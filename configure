#! /bin/csh -f

# set up $JSOC_MACHINE
set JSOC_MACHINE = `build/jsoc_machine.csh`
echo "Machine type is $JSOC_MACHINE"
echo ""

set CLEAN = "no"
set CHKLIBS = "no"
set CCMD = "c"
set LCMD = "l"

foreach ARG ($argv)
    set FLAG = `echo $ARG | awk '{print substr($0, 2)}'`
    if ($FLAG == $CCMD) then
      set CLEAN = "yes"
    else if ($FLAG == $LCMD) then
      set CHKLIBS = "yes"
    endif
end

if ($CHKLIBS == "no") then
    echo -n "Remove links for local project configuration..."
    rm -f proj/configure proj/make_basic.mk proj/Rules.mk proj/target.mk
    echo "done"

    echo -n "Remove links to man pages..."
    rm -rf man
    echo "done"

    echo -n "Removing links to headers..."
    if (-d base/include) then
	find base/include -name "*.h" -exec rm {} \;
    endif

    if (-d include) then
	find include -name "*.h" -exec rm {} \;
    endif
    echo "done"

    echo -n "Removing links to scripts..."
    if (-d scripts) then
	find scripts -name "*" -exec rm {} \;
    endif
    echo "done"

    echo -n "Removing links to jsds..."
    if (-d jsds) then
	find jsds -name "*" -exec rm {} \;
    endif
    echo "done"

    echo -n "Removing links to third-party libraries..."
    if (-d lib_third_party) then
	rm -rf lib_third_party
    endif
    echo "done"

    echo

    if ($CLEAN == "yes") then
	if (-x base/local/libs/dsds/scripts/rmlinks.csh) then
	    base/local/libs/dsds/scripts/rmlinks.csh
	endif

	if (-x base/local/libs/soi/scripts/rmlinks.csh) then
	    base/local/libs/soi/scripts/rmlinks.csh
	endif
    else
	echo -n "Setting links for local project configuration..."
	if (-e suflag.txt) then
	    cd proj
	    ln -sf ../projconf/su/configure configure
	    ln -sf ../projconf/su/make_basic.mk make_basic.mk
	    ln -sf ../projconf/su/Rules.mk Rules.mk
	    ln -sf ../projconf/su/target.mk target.mk
	    cd ..
	else
	    cd proj
	    ln -sf ../projconf/ex/configure configure
	    ln -sf ../projconf/ex/make_basic.mk make_basic.mk
	    ln -sf ../projconf/ex/Rules.mk Rules.mk
	    ln -sf ../projconf/ex/target.mk target.mk
	    cd ..
	endif
	echo "done"

	echo "Setting links to man pages..."
	if (-d /home/jsoc/man) then
	    if (!(-e man)) then
		ln -s /home/jsoc/man man
	    endif
	endif
	echo "done"

	echo "Setting links to headers..."
	if (!(-d base/include)) then
	    mkdir -p base/include
	endif
	cd base/include
	find .. -path '../include' -prune -o -name \*.h  \( \( -exec ln -s {} . \; -a -exec echo "  " {} " OK" \; \) -o -exec echo "  " {} " ERROR - couldn't create link" \; \)
	cd ../..

	mkdir -p include
	cd include
	if (-d ../base/include) then
	    find ../base/include -name \*.h -exec ln -s {} . \;
	endif
	cd ..
	echo "done"
	echo
	
	echo "Setting links to scripts..."
	mkdir -p scripts
	cd scripts

	# Sums scripts
	find ../base/sums/scripts -mindepth 1 \( -path \*CVS -prune -o -exec ln -s {} . \; -a -exec echo "  " {} " OK" \; \) -o -exec echo "  " {} " ERROR - couldn't create link" \;

	# Util scripts
	find ../base/util/scripts -mindepth 1 \( -path \*CVS -prune -o -exec ln -s {} . \; -a -exec echo "  " {} " OK" \; \) -o -exec echo "  " {} " ERROR - couldn't create link" \;

	# DRMS / IDL-interface scripts
	find ../base/drms/scripts -mindepth 1 \( -path \*CVS -prune -o -exec ln -s {} . \; -a -exec echo "  " {} " OK" \; \) -o -exec echo "  " {} " ERROR - couldn't create link" \;

	# Project-specific scripts - these won't show up if you don't have the project source.
	if (-x ../proj/configure) then
	    ../proj/configure
	endif

	cd ..
	echo "done"
	echo

	echo "Setting links to jsds..."
	if (!(-d jsds))  mkdir jsds
	cd jsds
	find ../base \( -name \*.jsd -exec ln -s {} . \; -a -exec echo "  " {} " OK" \; \) -o \( -name \*.jsd -exec echo "  " {} " ERROR - couldn't create link" \; \)
	cd ..
	echo "done"
	echo
	# Set links to third-party libraries
	echo "Setting links to third-party libraries"
	if (!(-d lib_third_party)) mkdir lib_third_party
	cd lib_third_party

	if (-e ../suflag.txt) then
            if (!(-d include)) mkdir include

            if (!(-d lib)) mkdir lib

            # Don't make a link directly from include/lib to a directory, else
            # all includes files/libs must reside in one directory.

            cd include
            # Standard location for all of JSOC's includes
            find /home/jsoc/include -maxdepth 1 -name "*.h" -exec ln -sfv {} \;
            find /home/jsoc/include -mindepth 1 -type d -exec ln -sfv {} \;
            cd ..

            cd lib
            # Standard locations for all of JSOC's libraries - x86_64
            if (!(-d linux_x86_64)) mkdir linux_x86_64

            cd linux_x86_64
                find /home/jsoc/lib/linux_x86_64/ -maxdepth 1 -name "*.a" -exec ln -sfv {} \;
            cd ..

            # Standard locations for all of JSOC's libraries - ia32
            if (!(-d linux_ia32)) mkdir linux_ia32

            cd linux_ia32
                find /home/jsoc/lib/linux_ia32/ -maxdepth 1 -name "*.a" -exec ln -sfv {} \;
            cd ..

            cd ..
	#else
# Non-Stanford users: edit these lines to reflect the location of required
#  3rd party libs: cfitsio.a
	    #ln -sfv /usr/local/include include
            #if (!(-d lib)) mkdir lib
	    #ln -sfv /usr/local/lib lib/$JSOC_MACHINE
	endif

	cd ..
        
        # Set custom make file to tell the make system that the gcc cfitsio library is called
        # libcfitsio_gcc.a
        if (-e suflag.txt) then
            echo "CFITSIOFNAME_GCC_X86_64 = cfitsio_gcc" > custom.mk
        endif

        # Make customizations - ensure changes here are synchronized to changes in make_basic.mk
        if (!(-e suflag.txt)) then
            # put compilation customizations here
            # echo "DRMS_DEFAULT_RETENTION = -10" >> custom.mk
        endif

	echo "done"
	echo

	# generate links for DSDS/SOI dynamic libraries - only do this if 
	# user's environment has access to /home/soi/CM
	if (-d /home/soi/CM/include && -d /home/soi/CM/src) then
	    if (-x base/local/libs/dsds/scripts/genlinks.csh) then
		base/local/libs/dsds/scripts/genlinks.csh
	    endif

	    if (-x base/local/libs/soi/scripts/genlinks.csh) then
		base/local/libs/soi/scripts/genlinks.csh
	    endif
	endif
    endif
endif

# Enter required library names and versions here.
if ($CHKLIBS == "yes") then

  echo
  echo "JSOC expects all third-party library header files to be located at"
  echo "         $JSOCROOT/lib_third_party/include/"
  echo "     and all third-party libraries to be located at
  echo "         $JSOCROOT/lib_third_party/$JSOC_MACHINE/"
  echo "     If you wish to build a target that uses one of the following"
  echo "     third-party libraries, please install the required library version"
  echo "     and create a link from from"
  echo "         $JSOCROOT/lib_third_party/include/"
  echo "     and $JSOCROOT/lib_third_party/$JSOC_MACHINE/"
  echo "     to the installed library headers and binary files, respectively."
  echo
  echo "Example:"
  echo "  cd $JSOCROOT/lib_third_party/"
  echo "  ln -s /usr/local/include include"
  echo "  cd $JSOCROOT/lib_third_party/$JSOC_MACHINE/"
  echo "  ln -s /usr/local/lib/libfftw3f.a libfftw3f.a "
  echo
  echo "Library libfftw3f.a (v. 3.1.2) required for targets: universe, examples, helloworld, xinterp, demo_td08062007"
  echo "Library libcfitsio.a (v. 3.03) required for targets: universe, examples, f_ingest_gong_mrv, f_dup_gong_mrv"

#    echo "Library libcfitsio.a (v. 3.03) required for targets: examples, helloworld"
#    echo "Library libmkl.so (v. 9.0) required for targets: examples, helloworld"
#    if ($JSOC_MACHINE == "linux_x86_64") then 
#	echo "Library libmkl_lapack64.so (v. 9.0) required for targets: examples, helloworld"
#    else echo "Library libmkl_lapack32.so (v. 9.0) required for targets: examples, helloworld"
#    endif


endif 

# Site Localization
if (!(-e suflag.txt)) then
  if (!(-e config.local)) then
    echo "Error: config.local not found. If you have a saved version of this"
    echo "       file from a previous installation, you should copy that into"
    echo "       this directory and rerun configure. Otherwise, copy the file"
    echo "       config.local.template to config.local and edit the config.local"
    echo "       file to contain site-appropriate values."
    echo 
    echo "*** IMPORTANT *** The edited config.local will contain site-specific"
    echo "    values that should not be modified during subsequent updates to"
    echo "    NetDRMS. Keep a safe copy of it somewhere outside of the DRMS"
    echo "    directory tree, for example in /usr/local. After each NetDRMS"
    echo "    update, ensure this file is in place."
  else
    echo "CUSTOM_DEFINES = __LOCALIZED_DEFS__" >> custom.mk
    ./gen_init.csh
  endif
endif

# Check for required libraries (must happen after localization, which might
# set links to such libraries
set TPWARN = 0

# Libraries required by all
if (!(-e "lib_third_party/lib/$JSOC_MACHINE/libcfitsio.a")) then
    echo
    echo "Can't find required library: lib_third_party/lib/$JSOC_MACHINE/libcfitsio.a"
    set TPWARN = 1
endif

# special required libraries for particular architectures

if (-e ../suflag.txt) then
# Stanford users' required libs.

    if (!(-e "lib_third_party/lib/$JSOC_MACHINE/libfftw3f.a")) then
        echo
        echo "Can't find required library: lib_third_party/lib/$JSOC_MACHINE/libfftw3f.a"
        set TPWARN = 1
    endif

# special required libraries for particular architectures
    if ($JSOC_MACHINE == "linux_x86_64") then
        if (!(-e lib_third_party/lib/linux_x86_64/libcfitsio_gcc.a)) then
            echo
            echo "Can't find required library: lib_third_party/lib/linux_x86_64/libcfitsio_gcc.a"
            set TPWARN = 1
        endif
	if (!(-e lib_third_party/lib/linux_x86_64/libgsl.a)) then
            echo
	    echo "Can't find required library: lib_third_party/lib/linux_x86_64/libgsl.a"
	    set TPWARN = 1
	endif
	if (!(-e lib_third_party/lib/linux_x86_64/libgslcblas.a)) then
            echo
	    echo "Can't find required library: lib_third_party/lib/linux_x86_64/libgslcblas.a"
	    set TPWARN = 1
	endif
    endif

    if ($JSOC_MACHINE == "linux_ia32") then
	if (!(-e lib_third_party/lib/linux_ia32/libgsl.a)) then
            echo
	    echo "Can't find required library: lib_third_party/lib/linux_ia32/libgsl.a"
	    set TPWARN = 1
	endif
	if (!(-e lib_third_party/lib/linux_ia32/libgslcblas.a)) then
            echo
	    echo "Can't find required library: lib_third_party/lib/linux_ia32/libgslcblas.a"
	    set TPWARN = 1
	endif
    endif

    if ($JSOC_MACHINE == "mac_osx_ppc") then
    endif

    if ($JSOC_MACHINE == "mac_osx_ia32") then
    endif
endif

if ($TPWARN) then
    echo "Did you update config.local to create links to installed third-party libraries?"
endif

foreach CCTST (icc gcc cc)
  set CCC = `which $CCTST`
  if ($status) continue
  echo "COMPILER = $CCC" >> custom.mk
  break
end

foreach CCTST (ifort gfortran g95)
  set CCC = `which $CCTST`
  if ($status) continue
  echo "F77 = $CCC" >> custom.mk
  break
end

if (-e config.local) then
  set PGPTH = `grep "^POSTGRES_INCS" config.local | awk '{print $2}'`
  echo "PGIPATH = $PGPTH" >> custom.mk
endif

# 2009/03/23 : jhourcle : fixing logic errors / simplifying code
# 2009/04/08 : jhourcle : cleaning up compiler assignment logic
# 2009/04/20 : rbogart : additional simplification

