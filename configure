#! /bin/csh -f

# set up $JSOC_MACHINE
set JSOC_MACHINE = `build/jsoc_machine.csh`
echo "Machine type is $JSOC_MACHINE"
echo ""

set CLEAN = "no"
set CHKLIBS = "no"
set CCMD = "c"
set LCMD = "l"
set LOCALIZE = "L"

foreach ARG ($argv)
    set FLAG = `echo $ARG | awk '{print substr($0, 2)}'`
    if ($FLAG == $CCMD) then
      set CLEAN = "yes"
    else if ($FLAG == $LCMD) then
      set CHKLIBS = "yes"
    endif
end

if ($CHKLIBS == "no") then
    echo -n "Remove links for local project configuration..."
    if (-d proj) then
	cd proj
	if (-e configure) then
	    rm configure
	endif
	if (-e make_basic.mk) then
	    rm make_basic.mk
	endif
	if (-e Rules.mk) then
	    rm Rules.mk
	endif
	if (-e target.mk) then
	    rm target.mk
	endif
	cd ..
    endif
    echo "done"

    echo -n "Remove links to man pages..."
    if (-e man) then
	rm -rf man
    endif
    echo "done"

    echo -n "Removing links to headers..."
    if (-d base/include) then
	cd base/include
	find . -name "*.h" -exec rm {} \;
	cd ../..
    endif

    if (-d include) then
	cd include
	find . -name "*.h" -exec rm {} \;
	cd ..
    endif
    echo "done"

    echo -n "Removing links to scripts..."
    if (-d scripts) then
	cd scripts
	find . -name "*" -exec rm {} \;
	cd ..
    endif
    echo "done"

    echo -n "Removing links to jsds..."
    if (-d jsds) then
	cd jsds
	find . -name "*" -exec rm {} \;
	cd ..
    endif
    echo "done"

    echo

    if ($CLEAN == "yes") then
	if (-x base/local/libs/dsds/scripts/rmlinks.csh) then
	    base/local/libs/dsds/scripts/rmlinks.csh
	endif

	if (-x base/local/libs/soi/scripts/rmlinks.csh) then
	    base/local/libs/soi/scripts/rmlinks.csh
	endif
    else
        # Make include directories here, since they are used by multiple script blocks below
        if (!(-d base/include)) then
            mkdir -p base/include
        endif

        if (!(-d include)) then
            mkdir -p include
        endif

	echo -n "Setting links for local project configuration..."
	if (-e suflag.txt) then
	    cd proj
	    ln -sf ../projconf/su/configure configure
	    ln -sf ../projconf/su/make_basic.mk make_basic.mk
	    ln -sf ../projconf/su/Rules.mk Rules.mk
	    ln -sf ../projconf/su/target.mk target.mk
	    cd ..
	else
	    cd proj
	    ln -sf ../projconf/ex/configure configure
	    ln -sf ../projconf/ex/make_basic.mk make_basic.mk
	    ln -sf ../projconf/ex/Rules.mk Rules.mk
	    ln -sf ../projconf/ex/target.mk target.mk
	    cd ..
	endif
	echo "done"

	echo "Setting links to man pages..."
	if (-d /home/jsoc/man) then
	    if (!(-e man)) then
		ln -s /home/jsoc/man man
	    endif
	endif
	echo "done"
        echo
	
	echo "Setting links to scripts..."
        if (!(-d scripts)) then
	    mkdir scripts
	endif
	cd scripts

	# Sums scripts
	find ../base/sums/scripts -mindepth 1 \( -path \*CVS -prune -o -exec ln -s {} . \; -a -exec echo "  " {} " OK" \; \) -o -exec echo "  " {} " ERROR - couldn't create link" \;

	# Util scripts
	find ../base/util/scripts -mindepth 1 \( -path \*CVS -prune -o -exec ln -s {} . \; -a -exec echo "  " {} " OK" \; \) -o -exec echo "  " {} " ERROR - couldn't create link" \;

	# DRMS / IDL-interface scripts
	find ../base/drms/scripts -mindepth 1 \( -path \*CVS -prune -o -exec ln -s {} . \; -a -exec echo "  " {} " OK" \; \) -o -exec echo "  " {} " ERROR - couldn't create link" \;

	# Project-specific scripts - these won't show up if you don't have the project source.
	if (-x ../proj/configure) then
	    ../proj/configure
	endif

	cd ..
	echo "done"
	echo

	echo "Setting links to jsds..."
	if (!(-d jsds)) then
	    mkdir jsds
	endif
	cd jsds
	find ../base \( -name \*.jsd -exec ln -s {} . \; -a -exec echo "  " {} " OK" \; \) -o \( -name \*.jsd -exec echo "  " {} " ERROR - couldn't create link" \; \)
	cd ..
	echo "done"
	echo

	# generate links for DSDS/SOI dynamic libraries - only do this if 
	# user's environment has access to /home/soi/CM
	if (-d /home/soi/CM/include && -d /home/soi/CM/src) then
	    if (-x base/local/libs/dsds/scripts/genlinks.csh) then
		base/local/libs/dsds/scripts/genlinks.csh
	    endif

	    if (-x base/local/libs/soi/scripts/genlinks.csh) then
		base/local/libs/soi/scripts/genlinks.csh
	    endif
	endif

	echo "done"
	echo

        # Site Localization

        # Path to the configuration file - at some point, make this an argument to the configure script
        set conflocal = "config.local"
        set LOCALIZATIONDIR = `perl -n -e 'if ($_ =~ /^LOCALIZATIONDIR\s+(.+)/) { print $1; }' $conflocal`

        if ($LOCALIZATIONDIR == "") then
            set LOCALIZATIONDIR = ${PWD}/localization
        endif

        # Eventually, dump all these generated files into a user-specified location.
        # This script will need to read the config.local file to get the 
        # localization directory. Otherwise, just use JSOC/localization as the default.
        # We should put custom.mk in the localization directory too.
        if (!(-d ${LOCALIZATIONDIR})) then
            mkdir ${LOCALIZATIONDIR}
            if ($? != 0) then
                echo "Error creating localization directory."
            endif
        endif
        
        if (-e ${LOCALIZATIONDIR}/custom.mk) then
            rm ${LOCALIZATIONDIR}/custom.mk
        endif

        # run moreconfigure.pl - this script is written in perl because it is easier to do the compiler detection 
        # in perl. It also reads suflag.txt (if it exists) to set the default Stanford values for certain make variables
        ./moreconfigure.pl -f${LOCALIZATIONDIR}/custom.mk

        if (!(-e suflag.txt)) then
            if (!(-e config.local)) then
                echo "Error: config.local not found. If you have a saved version of this"
                echo "       file from a previous installation, you should copy that into"
                echo "       this directory and rerun configure. Otherwise, copy the file"
                echo "       config.local.template to config.local and edit the config.local"
                echo "       file to contain site-appropriate values."
                echo 
                echo "*** IMPORTANT *** The edited config.local will contain site-specific"
                echo "    values that should not be modified during subsequent updates to"
                echo "    NetDRMS. Keep a safe copy of it somewhere outside of the DRMS"
                echo "    directory tree, for example in /usr/local. After each NetDRMS"
                echo "    update, ensure this file is in place."
                exit 1;
            else
                echo "CUSTOM_DEFINES = __LOCALIZED_DEFS__" >> ${LOCALIZATIONDIR}/custom.mk
                ./gen_init.csh
                ./customizemake.pl ./config.local ${LOCALIZATIONDIR}
            endif
        else if (-e config.local) then
            # config.local is optional at Stanford, but it won't necessarily contain the same information that 
            # a NetDRMS config.local contains. The first section contains items that will override the
            # the items in serverdefs.h. The second section contains items used to populate custom.mk, 
            # which causes make systems variables to be defined that override the default make behavior
            # (such as overriding the name of the directory to which binary data are written - linux_x86_64_n02
            # instead of linux_x86_64, for example).

            # Override the defaults defined in serverdefs.h (don't use gen_init.csh as it does several things, 
            # most of which are relevant only to non-SU NetDRMS sites). This script causes all 
            # items included in config.local to override those defined in serverdefs.h, but not all
            # items need be specified in config.local.
            ./customizedefs.pl
            echo "CUSTOM_DEFINES = __CUSTOMIZED_DEFS__" >> ${LOCALIZATIONDIR}/custom.mk

            # update custom.mk with data from config.local
            ./customizemake.pl ./config.local ${LOCALIZATIONDIR}
        endif

        echo "Setting links to headers..."

        cd base/include
        find .. -path '../include' -prune -o -name \*.h  \( \( -exec ln -s {} . \; -a -exec echo "  " {} " OK" \; \) -o -exec echo "  " {} " ERROR - couldn't create link" \; \)
        cd ../..

        cd include
        if (-d ../base/include) then
            find ../base/include -name \*.h -exec ln -s {} . \;
        endif
        cd ..
        echo "done"
        echo

        # Custom make variable values - these will override the values set in moreconfigure.pl
        # echo "JSOC_COMPILER = gcc" >> custom.mk
        # echo "JSOC_FCOMPILER = gfortran" >> custom.mk
        # echo "DRMS_DEFAULT_RETENTION = -10" >> custom.mk

    endif
else
# $CHKLIBS == "yes"
# Enter required library names and versions here.


endif 

