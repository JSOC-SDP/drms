#!/bin/bash
currDt=`date +"%m-%d-%Y %H:%M:%S"`

#--------------------------------------------------------------------
# Syntax check
#--------------------------------------------------------------------
if [[ $# -eq 2 ]]
then
        mainconfig=$1
	config_file=$2

        if [[ -f "$mainconfig" ]]; then   
            . "$mainconfig"
        else
            echo "ERROR: config file $mainconfig does not exist"
            exit 1
        fi
	
	if [[ -f $config_file ]]
	then
		. $config_file

                if [[ -f $kRepDir/toolbox ]]; then
                        . $kRepDir/toolbox
                else
                        echo "ERROR: toolbox file does not exist"
                        exit
                fi

		echo > $logfile
		logwrite "Starting $0"
		logwrite "Using$config_file" nl
	else
		echo "ERROR: File $config_file does not exist, exiting"
		exit
	fi
else
	echo "ERROR: Usage: $0 <master configuration file> <configuration file>"
	exit
fi

#--------------------------------------------------------------------
# Function that attempts to copy trigger file from remote server to 
# local, then checks to see if it was successful
#--------------------------------------------------------------------
trigger_return () {
	triggerfn=$1
	remote_host=$2
	remote_user=$3
	remote_triggerdir=$4

	logwrite "Attempting to copy over [$remote_triggerdir/$triggerfn] from [$remote_user@$remote_host]"

	counter=0
	# Loops every second. Each loop it attempts to do a scp of the file from the remote host, then checks to see if the file exists on the local machine.
	while [[ 1 = 1 ]]
	do
		echo -n "."
		run_command "scp $remote_user@$remote_host:$remote_triggerdir/$triggerfn $tempdir/."
		if [[ -f $tempdir/$triggerfn ]]
		then
			logwrite "Trigger file [$triggerfn] was successfully copied from [$remote_host:$remote_triggerdir/]"
			echo "Success!"
			break
		else
			logwrite "File not found yet" nl
		fi

		# If the counter reaches the timeout, alerts the master failover script of the failure
		if [[ "$counter" -eq "$timeout" ]]
		then
			logwrite "ERROR: After $timeout attempts, still could not find the trigger file, ABORTING!"
			echo "Failure"
			echo "ERROR: After $timeout attempts, could not find the trigger file [$triggerfn] from [$remote_host], ABORTING!"
			exit
		fi

		sleep 1
		counter=$(($counter+1))
	done
}

#--------------------------------------------------------------------
# Function that creates a trigger file, sends it to the remote server, then removes it from the local temp directory
#--------------------------------------------------------------------
trigger_send () {
	triggerfn=$1
	remote_host=$2
	remote_user=$3
	remote_triggerdir=$4
	
	logwrite "Creating trigger file [$triggerfn.tmp] in [$tempdir]"
	run_command "touch $tempdir/$triggerfn.tmp"
	logwrite "Copying trigger file [$triggerfn.tmp] from [$tempdir] to remote host [$remote_host:$remote_triggerdir/$triggerfn]"
	run_command "scp $tempdir/$triggerfn.tmp $remote_user@$remote_host:$remote_triggerdir/$triggerfn"
	logwrite "removing [$tempdir/$triggerfn.tmp]"
	run_command "rm -f $tempdir/$triggerfn.tmp"

}

#--------------------------------------------------------------------
# Function that creates a trigger file, sends it to the remote server, then removes it from the local temp directory
#--------------------------------------------------------------------
trigger_send_warmstandby () {
	triggerfn=$1
	remote_host=$2
	remote_user=$3
	remote_triggerdir=$4
	master_trigger=$5
	
	logwrite "Creating trigger file [$triggerfn.tmp] in [$tempdir]"
	cat $tempdir/$master_trigger | grep "netmask" > $tempdir/$triggerfn.tmp
	logwrite "Copying trigger file [$triggerfn.tmp] from [$tempdir] to remote host [$remote_host:$remote_triggerdir/$triggerfn]"
	run_command "scp $tempdir/$triggerfn.tmp $remote_user@$remote_host:$remote_triggerdir/$triggerfn"
	logwrite "removing [$tempdir/$triggerfn.tmp]"
	run_command "rm -f $tempdir/$triggerfn.tmp"

}

#--------------------------------------------------------------------
# Function that checks the returned trigger file for error code
#--------------------------------------------------------------------
trigger_verify () {
	triggerfn=$tempdir/$1
	host=$2
	if [[ $host == "master" ]]
	then
		upordown="down"
	elif [[ $host == "warmstandby" ]]
	then
		upordown="up"
	fi

	check=`tail -1 $triggerfn`
	set - $check
	echo

	if [[ "$1" == "success_report" && "$2" == "success" ]] 
	then
		echo "Success!"
		logwrite "Trigger file reported a success, removing it and continuing" nl
	elif [[ "$1" == "success_report" && "$2" == "failure" ]]  
	then
		echo "ERROR: The trigger file reported a failure!"
		echo "Aborting operation, please review the log file $triggerfn.log for failure information"
		logwrite "ERROR: The trigger file reported a failure!"
		logwrite "Aborting operation, please review the log file $triggerfn.log for failure information" nl
		run_command "mv -f $triggerfn $triggerfn.log"
		exit
	else
		echo "ERROR: Status was not reported by the trigger file [$triggerfn]"
		echo "Aborting operation, please review the log file $triggerfn.log for failure information"
		logwrite "ERROR: Status was not reported by the trigger file [$triggerfn]"
		logwrite "Aborting operation, please review the log file $triggerfn.log for failure information" nl
		run_command "mv -f $triggerfn $triggerfn.log"
		exit
	fi

	ip_check=`cat $triggerfn | grep "could not bring device"`
	if [[ -n $ip_check ]]
	then
		echo "WARNING: One or more of the IP alias's were not brought $upordown on the master! The $host server reported:"
		echo "$ip_check"
		echo "The failover process will continue, however these alias's must be moved manually."
	fi

	if [[ $host == "master" ]]
	then
		logwrite "will not remove the $triggerfn right now"
	else
		run_command "rm -f $triggerfn"
	fi
}


#--------------------------------------------------------------------
# Execute the failover sequence
#--------------------------------------------------------------------

# Bring down the slon daemons
echo
echo "Sending trigger file to slony slave to bring the slon daemons down."
trigger_send "failover_slave_down.trg" "$slave_ip" "$slave_user" "$slave_triggerdir"
echo "The slon daemons are being brought down."
echo -n "Retrieving confirmation from $slave_ip"
trigger_return "failover_slave_down.done" "$slave_ip" "$slave_user" "$slave_triggerdir"
logwrite "Removing trigger file failover_slave_down.done from $slave_ip"
trigger_verify "failover_slave_down.done"
ssh $slave_user@$slave_ip "rm -f $slave_triggerdir/failover_slave_down.done"
echo

# Bring down the ip alias on the master, and down the master databases
echo
echo "Sending trigger file to master to bring the database and the ip alias down."
trigger_send "failover_master_down.trg" "$master_ip" "$master_user" "$master_triggerdir"
echo "The master database is being brought down."
echo -n "Retrieving confirmation from $master_ip"
trigger_return "failover_master_down.trg.done" "$master_ip" "$master_user" "$master_triggerdir"
logwrite "Removing trigger file failover_master_down.trg.done from $master_ip"
trigger_verify "failover_master_down.trg.done" "master"
ssh $master_user@$master_ip "rm -f $master_triggerdir/failover_master_down.trg.done"
echo

# Bring the database on the warmstandby out of recovery mode, and bring the IP alias up
echo
echo "Sending trigger file to warm standby to bring the database and the ip alias up."
trigger_send_warmstandby "failover_ws_up.trg" "$ws_ip" "$ws_user" "$ws_triggerdir" "failover_master_down.trg.done"
echo "The warm standby database is being brought online."
echo -n "Retrieving confirmation from $ws_ip"
trigger_return "failover_ws_up.trg.done" "$ws_ip" "$ws_user" "$ws_triggerdir"
logwrite "Removing trigger file failover_ws_up.trg.done from $ws_ip"
trigger_verify "failover_ws_up.trg.done" "warmstandby"
ssh $ws_user@$ws_ip "rm -f $ws_triggerdir/failover_ws_up.trg.done"
run_command "rm -f $tempdir/failover_master_down.trg.done"
echo

# Bring the slon daemons back online 
echo
echo "Sending trigger file to the slony slave to bring the slon daemons back online."
trigger_send "failover_slave_up.trg" "$slave_ip" "$slave_user" "$slave_triggerdir"
echo "The slon daemons are being brought back online."
echo -n "Retrieving confirmation from $slave_ip"
trigger_return "failover_slave_up.done" "$slave_ip" "$slave_user" "$slave_triggerdir"
logwrite "Removing trigger file failover_slave_up.done from $slave_ip"
trigger_verify "failover_slave_up.done"
ssh $slave_user@$slave_ip "rm -f $slave_triggerdir/failover_slave_up.done"
echo

echo "Everything went smoothly. The master database has been failed over to the warm standby"
logwrite "Everything went smoothly." nl
logwrite "$0 done"
