#!/bin/bash
currDt=`date +"%m-%d-%Y %H:%M:%S"`

#--------------------------------------------------------------------
# Syntax check
#--------------------------------------------------------------------
if [[ $# -eq 3 ]]
then
        mainconfig=$1
	config_file=$2
	currNode=$3
	
        if [[ -f "$mainconfig" ]]; then   
            . "$mainconfig"
        else
            echo "ERROR: config file $mainconfig does not exist"
            exit 1
        fi

	if [[ -f $config_file ]]
	then
		. $config_file
               
                if [[ -f $kRepDir/toolbox ]]; then
                        . $kRepDir/toolbox
                else
                        echo "ERROR: toolbox file does not exist"
                        exit
                fi

		pidfile=$master_pidfile
		diefile=$master_diefile
		echo "Starting $0"
		echo "Using$config_file"
	else
		echo "ERROR: File $config_file does not exist, exiting"
		exit
	fi
else
	echo "ERROR: Usage: $0 <master configuration file> <configuration file>"
	exit
fi

#-------------------------------------------------------------------------
# Checking for another process already running
#-------------------------------------------------------------------------
if [ -f $pidfile ]
then
        pid=`cat $pidfile`
        if ps -p $pid | grep -qv PID
        then
                echo "somebody else is running at [$currDt]"
                exit
        else
                echo "found orphaned pid file at [$currDt]"
        fi
fi

echo $$ > $pidfile

#--------------------------------------------------------------------
# Exit if die file found
#--------------------------------------------------------------------
diecheck () {
	if [ -f $diefile ]
	then
	    logwrite "Die file [$diefile] found, dying"
	        run_command "rm -f $pidfile"
	        exit
	fi
}

diecheck

#--------------------------------------------------------------------
# Gets current IP address from config file based on $HOSTNAME
#--------------------------------------------------------------------
case $HOSTNAME in
hmidb0)
	currIP=$hmidb0IP
	;;

hmidb1)
	currIP=$hmidb1IP
	;;

hmidb2)
	currIP=$hmidb2IP
	;;

*)
	logwrite "ERROR: Could not determine what host I am on"
	exit
	;;
esac
logwrite "Found that with current hostname being [$HOSTNAME], current IP is [$currIP]"

#--------------------------------------------------------------------
# Checks to make sure we are on the master
#--------------------------------------------------------------------
# check to see if were on the master
logwrite "Checking to make sure we are on the master"
logwrite "$kPsqlCmd -p $MASTERPORT -h $currIP -U $REPUSER $MASTERDBNAME -t -c \"select sub_provider from _$CLUSTERNAME.sl_subscribe LIMIT 1\" 2>&1"
check=`$kPsqlCmd -p $MASTERPORT -h $currIP -U $REPUSER $MASTERDBNAME -t -c "select sub_provider from _$CLUSTERNAME.sl_subscribe LIMIT 1" 2>&1`
set - $check
logwrite "Result of sql query for selecting sub_provider [$check]"

if [[ "$check" == "psql: FATAL:  the database system is starting up" ]]
then
        logwrite "I am the warm standby"
	logwrite "I shouldn't be running, exiting"
	run_command "rm -f $pidfile"
        exit
elif [[ "$1" == "$currNode" ]]
then
        logwrite "I am the master"
elif [[ "$1" != "$currNode" ]]
then
        logwrite "I am the slave"
	logwrite "I shouldn't be running, exiting"
	run_command "rm -f $pidfile"
        exit
else
        logwrite "[$check]"
	run_command "rm -f $pidfile"
        exit
fi

#--------------------------------------------------------------------
# Function that gets a list of all the current ip alias's on this system
#--------------------------------------------------------------------

ip_alias_lst_get () {

	logwrite "Looking for [$IPAliasList]"
        if [[ -f $IPAliasList ]]
        then
                logwrite "There is a ip alias list already [$IPAliasList]. Copying it to our temporary ip alias list"
                cp -f $IPAliasList $IPAliasListTemp
        else

                # look for all alias devices with both eth in the device name, and ":".
                /sbin/ifconfig | grep "eth" | grep ":" > $tempdir/alias.tmp

                echo > $tempdir/alias.device.tmp

                # Create ip alias list file based on any IP alias's that are currently running
                exec < $tempdir/alias.tmp
                while read line
                do
                        # for each line found
                        unset isalias
                        set - $line
                        isalias=`echo "$1" | grep ":"`

                        if [[ -n $isalias ]]
                        then
				# get only the line with ip address
                                logwrite "[$isalias] is an alias, adding to list of IP alias's"
                                ip_get=`/sbin/ifconfig $isalias | grep "inet addr:"`
                                set - $ip_get
                                echo "$isalias $2 $4" >> $tempdir/alias.device.tmp
                        fi
                done

                # some cleanup, replace "addr:" with nothing, and replace "Mask:" with "netmask "
                sed 's/addr://' $tempdir/alias.device.tmp > $tempdir/alias.device.tmp.2
                sed 's/Mask:/netmask /' $tempdir/alias.device.tmp.2 > $IPAliasListTemp

                # remove temp files
                rm -f $tempdir/alias.tmp $tempdir/alias.device.tmp $tempdir/alias.device.tmp.2

        fi

logwrite "Removing [$MASTERHOST] from the list file if it exists"
grep -v "$MASTERHOST" $IPAliasListTemp > $IPAliasListTemp.2
run_command "rm -f $IPAliasListTemp"
run_command "mv -f $IPAliasListTemp.2 $IPAliasListTemp"
run_command "cp -f $IPAliasListTemp $logdir/MASTERHOST.lst.log"

}


#--------------------------------------------------------------------
# While loop that looks for trigger file, and executes it
#--------------------------------------------------------------------
while [[ 1 == 1 ]]
do

	diecheck
	logwrite "checking"
	triggerfile=$triggerdir/failover_master_down.trg
	
	# Check for the trigger file
	if [[ -f $triggerfile ]]
	then
		logwrite "Found [$triggerfile] trigger file"
		logwrite "Creating [$diefile] die file"
		run_command "touch $diefile"
		logwrite "Renaming [$triggerfile] to [$triggerfile.working]"
		run_command "mv -f $triggerfile $triggerfile.working"

		# generate a list of ip alias's for the sl_ip_chk to bring down
		ip_alias_lst_get
			
		# Create trigger file for sl_ip_chk to bring th IP alias downn
		logwrite "Creating $triggerdir/IPdown.trg"
		run_command "touch $triggerdir/IPdown.trg"

		ip_status=blank
		counter=0
		error=0
		# enter loop and wait for the IPdown script to report it has finished
		while [[ 1 == 1 ]]
		do
			logwrite "Checking for $triggerdir/IPdown.done"
			
			# If the IPdown.done file is found, read the variable ip_status from within, continue based on contents.
			if [[ -f $triggerdir/IPdown.done ]]
			then
				logwrite "Found $triggerdir/IPdown.done"
				# Dot's the file to retrieve the variable ip_status
				returnstatus=`cat $triggerdir/IPdown.done | grep "ip_status"`
				oldIFS=$IFS
				IFS="="
				set - $returnstatus
				ip_status=$2
				IFS=$oldIFS				

				logwrite "status from IP down script is [$ip_status]"

				if [[ "$ip_status" == "success" ]]
				then
					logwrite "Bringing down ip alias [$MASTERHOST] on device [$network_device] was successful"
					echo "Bringing down ip alias [$MASTERHOST] on device [$network_device] was successful" > $triggerfile.working
					break
				elif [[ "$ip_status" == "failure" ]]
				then
					errormsg="ERROR: Bringing down ip alias [$MASTERHOST] on device [$network_device] was unsuccessful"
					error=1
					logwrite "$errormsg"
					echo $errormsg > $triggerfile.working
					echo success_report failure >> $triggerfile.working
					run_command "mv -f $triggerfile.working $triggerfile.done"
					break
				else
					errormsg="Error: Ip alias status was not reported by the IPdown script!"
					error=1
					logwrite "$errormsg"
					echo $errormsg > $triggerfile.working
					echo success_report failure >> $triggerfile.working
					run_command "mv -f $triggerfile.working $triggerfile.done"
					break
				fi
			fi
	
			# If the counter reaches the timeout, alerts the master failover script of the failure
			if [[ "$counter" -eq "$timeout" ]]
			then
				errormsg="ERROR: After [$timeout] seconds, no IPdown.done file has been found. Verify IPdown is running"
				error=1
				logwrite "$errormsg"
				echo $errormsg > $triggerfile.working
				echo success_report failure >> $triggerfile.working
				run_command "mv -f $triggerfile.working $triggerfile.done"
				break
			fi
		
			counter=$(($counter+1))	
			sleep 1
		done

		if [[ $error -eq "1" ]]
		then
			exit
		fi
	
		logwrite "IP down was successful, bringing down the database now"	


		# Bring down the first master database, if it isn't already

		$pgbin/pg_ctl -D $pgdata stop -m fast

		sleep $dbdown_sleeptime

		counter=0
		success=0
		while [ 1 = 1 ]
		do
			check=`$kPsqlCmd -p $pgport -l -t 2>&1`
			check2=`echo $check | grep "could not connect to server"`
			check3=`echo $check | grep "the database system is starting up"`
			check4=`echo $check | grep "the database system is shutting down"`
			echo "[$check]"

			if [[ -n $check2 ]]
			then
			        logwrite "The Database 1 is down"
				success=1
				break
			elif [[ -n $check3 ]]
			then
			        logwrite "The Database 1 is starting up"
			elif [[ -n $check4 ]]
			then
			        logwrite "The Database 1 is shutting down"
			else
			        logwrite "The DatIbase 1 is online"
			fi

			$pgbin/pg_ctl -D $pgdata stop -m fast
	
		        if [ $counter -eq $dbdown_maxtries ]; then
		                logwrite "Max number of tries"
				echo "Could not bring database down after $dbdown_maxtries tries" >> $triggerfile.working
		                break
		        fi

			counter=$(($counter+1))
		        unset check check2 check3 check4
			sleep $dbdown_sleeptime
	
		done	
			
		if [ $success -eq "1" ]; then
			echo "database 1 was brought down" >> $triggerfile.working
		else
			echo "database 1 was could not be brought down" >> $triggerfile.working
			echo success_report failure >> $triggerfile.working
			run_command "mv -f $triggerfile.working $triggerfile.done"
			exit
		fi
		        
		# Bring down second the master database, if it isn't already
		logwrite "Bringing down the second database"
		$pgbin/pg_ctl -D $pgdata2 stop -m fast

		sleep $dbdown_sleeptime

		unset check check2 check3 check4
		counter=0
		success=0
		while [ 1 = 1 ]
		do
			check=`$kPsqlCmd -p $pgport2 -l -t 2>&1`
			check2=`echo $check | grep "could not connect to server"`
			check3=`echo $check | grep "the database system is starting up"`
			check4=`echo $check | grep "the database system is shutting down"`
			echo "[$check]"

			if [[ -n $check2 ]]
			then
			        logwrite "The Database 2 is down"
				success=1
				break
			elif [[ -n $check3 ]]
			then
			        logwrite "The Database 2 is starting up"
			elif [[ -n $check4 ]]
			then
			        logwrite "The Database 2 is shutting down"
			else
			        logwrite "The Database 2 is online"
			fi

			$pgbin/pg_ctl -D $pgdata2 stop -m fast
		        
			if [ $counter -eq $dbdown_maxtries ]; then
		                logwrite "Max number of tries"
				echo "Could not bring database down after $dbdown_maxtries tries" >> $triggerfile.working
		                break
		        fi

			counter=$(($counter+1))
		        unset check check2 check3 check4
			sleep $dbdown_sleeptime
	
		done	
		
		if [ $success -eq "1" ]; then
			echo "database 2 was brought down" >> $triggerfile.working
			cat $triggerdir/IPdown.done | grep -v "status" >> $triggerfile.working
			cat $IPAliasListTemp >> $triggerfile.working
			echo success_report success >> $triggerfile.working
		else
			echo "database 2 was could not be brought down" >> $triggerfile.working
			cat $triggerdir/IPdown.done | grep -v "status" >> $triggerfile.working
			echo success_report failure >> $triggerfile.working
		fi

		run_command "rm -f $triggerdir/IPdown.done"  #debug remove comment out
		run_command "rm -f $IPAliasListTemp"
		run_command "mv -f $triggerfile.working $triggerfile.done"
		        
	fi
	
	sleep 10
done

run_command "rm -f $pidfile"
