#!/bin/bash
currDt=`date +"%m-%d-%Y %H:%M:%S"`

#--------------------------------------------------------------------
# Syntax check
#--------------------------------------------------------------------
if [[ $# -eq 3 ]]
then
        mainconfig=$1
	config_file=$2
	currNode=$3

        if [[ -f "mainconfig" ]]; then   
            . "$mainconfig"
        else
            echo "ERROR: config file $mainconfig does not exist"
            exit 1
        fi
		
	if [[ -f $config_file ]]
	then
		. $config_file

                if [[ -f $kRepDir/toolbox ]]; then
                        . $kRepDir/toolbox
                else
                        echo "ERROR: toolbox file does not exist"
                        exit
                fi
		pidfile=$ws_pidfile
		diefile=$ws_diefile
		echo "Starting $0"
		echo "Using$config_file"
	else
		echo "ERROR: File $config_file does not exist, exiting"
		rm -f $pidfile
		exit
	fi
else
	echo "ERROR: Usage: $0 <configuration file>"
	rm -f $pidfile
	exit
fi

#-------------------------------------------------------------------------
# Checking for another process already running
#-------------------------------------------------------------------------
if [ -f $pidfile ]
then
        pid=`cat $pidfile`
        if ps -p $pid | grep -qv PID
        then
                echo "somebody else is running at [$currDt]"
                exit
        else
                echo "found orphaned pid file at [$currDt]"
        fi
fi

echo $$ > $pidfile

#--------------------------------------------------------------------
# Exit if die file found
#--------------------------------------------------------------------
diecheck () {
	if [ -f $diefile ]
	then
	    logwrite "Die file [$diefile] found, dying"
	        run_command "rm -f $pidfile"
	        exit
	fi
}

diecheck

trap "echo 'caught a signal'; rm -f $pidfile; exit" HUP INT TERM

#--------------------------------------------------------------------
# Gets current IP address from config file based on $HOSTNAME
#--------------------------------------------------------------------
case $HOSTNAME in
hmidb0)
        currIP=$hmidb0IP
        ;;

hmidb1)
        currIP=$hmidb1IP
        ;;

hmidb2)
        currIP=$hmidb2IP
        ;;

*)
	logwrite "ERROR: Could not determine what host I am on"
	exit
	;;
esac
logwrite "Found that with current hostname being [$HOSTNAME], current IP is [$currIP]"

#--------------------------------------------------------------------
# Checks to make sure we are on the warm standby
#--------------------------------------------------------------------
# check to see if were on the warm standby
logwrite "Checking to make sure we are on the warm standby"
check=`$kPsqlCmd -p $MASTERPORT -h $currIP -U $REPUSER $MASTERDBNAME -t -c "select sub_provider from _$CLUSTERNAME.sl_subscribe LIMIT 1" 2>&1`
logwrite "$kPsqlCmd -p $MASTERPORT -h $currIP -U $REPUSER $MASTERDBNAME -t -c \"select sub_provider from _$CLUSTERNAME.sl_subscribe LIMIT 1\" 2>&1"
set - $check
logwrite "Result of sql query for selecting sub_provider [$check]"

if [[ "$check" == "psql: FATAL:  the database system is starting up" ]]
then
        logwrite "I am the warm standby"
elif [[ "$1" == "$currNode" ]]
then
        logwrite "I am the master"
        logwrite "I shouldn't be running, exiting"
	run_command "rm -f $pidfile"
        exit
elif [[ "$1" != "$currNode" ]]
then
        logwrite "I am the slave"
        logwrite "I shouldn't be running, exiting"
	run_command "rm -f $pidfile"
        exit
else
        logwrite "[$check]"
	run_command "rm -f $pidfile"
        exit
fi


#--------------------------------------------------------------------
# While loop that looks for trigger file, and executes it
#--------------------------------------------------------------------
while [[ 1 == 1 ]]
do
	diecheck
	logwrite "checking"
	triggerfile=$triggerdir/failover_ws_up.trg
	
	# Check for the trigger file
	if [[ -f $triggerfile ]]
	then
		logwrite "Found [$triggerfile] trigger file"
		logwrite "Creating [$diefile] die file"
		run_command "touch $diefile"
		logwrite "Renaming [$triggerfile] to [$triggerfile.working]"
		run_command "mv -f $triggerfile $triggerfile.working"
		run_command "cp $triggerfile.working $IPAliasListTemp"

		# Bring up the warmstandby databases

		logwrite "Creating file $ws_recovery_trigger"
		run_command "touch $ws_recovery_trigger"
		
		if [[ ! -f $ws_recovery_trigger ]]
		then
			errormsg="ERROR: File [$ws_recovery_trigger] could not be created, warm standby server can not be brought online"
			logwrite "$errormsg"
			echo $errormsg > $triggerfile.working
			echo success_report failure >> $triggerfile.working
			run_command "mv -f $triggerfile.working $triggerfile.done"
			logwrite "Exiting"
			exit
		fi

		counter=0
		while [ 1 = 1 ]
		do
			check=`$kPsqlCmd -p $pgport -l -t 2>&1`
                        check2=`echo $check | grep "could not connect to server"`
                        check3=`echo $check | grep "the database system is starting up"`
                        check4=`echo $check | grep "the database system is shutting down"`
                        echo "[$check]"

                        if [[ -n $check2 ]]
                        then
                                logwrite "The Database 1 is down"
                        elif [[ -n $check3 ]]
                        then
                                logwrite "The Database 1 is starting up"
                        elif [[ -n $check4 ]]
                        then
                                logwrite "The Database 1 is shutting down"
                        else
                                logwrite "The Database 1 is online"
				echo "Database 1 is online" > $triggerfile.working
				run_command "rm -f $ws_recovery_trigger"
                                break
                        fi	
		
		        if [ $counter -eq $dbdown_maxtries ]; then
				errormsg="Error: After $dbdown_maxtries of checks, the first database is not online! Exiting!!"
				logwrite "$errormsg"
				echo $errormsg > $triggerfile.working
				echo success_report failure >> $triggerfile.working
				run_command "mv -f $triggerfile.working $triggerfile.done"
		                exit
		        fi
		
		        counter=$(($counter+1))
                        unset check check2 check3 check4	
		        sleep $dbdown_sleeptime
		
		done

		# Bring up the second warmstandby database
		logwrite "Bringing the second database online"
		logwrite "Creating file $ws_recovery_trigger2"
		run_command "touch $ws_recovery_trigger2"
		
		if [[ ! -f $ws_recovery_trigger2 ]]
		then
			errormsg="ERROR: File [$ws_recovery_trigger2] could not be created, warm standby server can not be brought online"
			logwrite "$errormsg"
			echo $errormsg > $triggerfile.working
			echo success_report failure >> $triggerfile.working
			run_command "mv -f $triggerfile.working $triggerfile.done"
			logwrite "Exiting"
			exit
		fi

		counter=0
		while [ 1 = 1 ]
		do
			check=`$kPsqlCmd -p $pgport2 -l -t 2>&1`
                        check2=`echo $check | grep "could not connect to server"`
                        check3=`echo $check | grep "the database system is starting up"`
                        check4=`echo $check | grep "the database system is shutting down"`
                        echo "[$check]"

                        if [[ -n $check2 ]]
                        then
                                logwrite "The Database 2 is down"
                        elif [[ -n $check3 ]]
                        then
                                logwrite "The Database 2 is starting up"
                        elif [[ -n $check4 ]]
                        then
                                logwrite "The Database 2 is shutting down"
                        else
                                logwrite "The Database 2 is online"
				echo "Database 2 is online" >> $triggerfile.working
				run_command "rm -f $ws_recovery_trigger2"
                                break
                        fi	
		
		        if [ $counter -eq $dbdown_maxtries ]; then
				errormsg="Error: After $dbdown_maxtries of checks, the second database is not online! Exiting!!"
				logwrite "$errormsg"
				echo $errormsg > $triggerfile.working
				echo success_report failure >> $triggerfile.working
				run_command "mv -f $triggerfile.working $triggerfile.done"
		                exit
		        fi
		
		        counter=$(($counter+1))
                        unset check check2 check3 check4	
		        sleep $dbdown_sleeptime
		
		done
		
		# Create trigger file to bring the ip alias online
		logwrite "Creating trigger file to bring the ip alias online."
		run_command "touch $IPupRequest"

		ip_status=blank
		counter=0
		# enter loop and wait for the ip alias script to report it has finished
		while [[ 1 == 1 ]]
		do
			logwrite "Checking for $triggerdir/ip_alias_monitor.done"
			
			# If the ip_alias_monitor.done file is found, read the variable ip_status from within, continue based on contents.
			if [[ -f $triggerdir/IPup.done ]]
			then
				# copy any return from the alias devices if they were not brought up
				cat $triggerdir/IPup.done | grep "could not bring device" >> $triggerfile.working


				logwrite "Found $triggerdir/ip_alias_monitor.done"

				# Retrieve the variable ip_status
                                returnstatus=`cat $triggerdir/IPup.done | grep "ip_status"`
                                oldIFS=$IFS
                                IFS="="
                                set - $returnstatus
                                ip_status=$2
                                IFS=$oldIFS
	
				run_command "rm -f $triggerdir/IPup.done"
				
				if [[ "$ip_status" == "success" ]]
				then
					logwrite "Bringing up ip alias [$MASTERHOST] on device [$network_device] was successful"
					echo "success_report success" >> $triggerfile.working
					run_command "mv -f $triggerfile.working $triggerfile.done"
					break
				elif [[ "$ip_status" == "failure" ]]
				then
					errormsg="ERROR: Bringing up ip alias [$MASTERHOST] on device [$network_device] was unsuccessful"
					logwrite "$errormsg"
					echo $errormsg >> $triggerfile.working
					echo success_report failure >> $triggerfile.working
					run_command "mv -f $triggerfile.working $triggerfile.done"
					break
				else
					errormsg="Error: Ip alias status was not reported by the ip_alias_monitor script!"
					logwrite "$errormsg"
					echo $errormsg >> $triggerfile.working
					echo success_report failure >> $triggerfile.working
					run_command "mv -f $triggerfile.working $triggerfile.done"
					break
				fi
			fi
	
			# If the counter reaches the timeout, alerts the master failover script of the failure
			if [[ "$counter" -eq "$timeout" ]]
			then
				errormsg="ERROR: After [$timeout] seconds, no IPup.done file has been found. Verify sl_ip_start is running"
				logwrite "$errormsg"
				echo $errormsg > $triggerfile.working
				echo success_report failure >> $triggerfile.working
				run_command "mv -f $triggerfile.working $triggerfile.done"
				break
			fi
		
			counter=$(($counter+1))	
			sleep 1
		done
	
		run_command "rm -f $IPAliasListTemp"
	
	fi
	
	sleep 10
done

run_command "rm -f $pidfile"
