#!/bin/bash

# syntax sl_slon_chk <master_config_file> <current_node_id> <configuration file>
if [ $# -ne 3 ]; then
	echo "Syntax Error:"
	echo "Usage:  $0 <master_config_file> <current_node_id> <configuration file>"
	exit
else
        mainconfig="$1"
	currNode=$2
	config_file=$3

        if [[ -f "mainconfig" ]]; then   
            . "$mainconfig"
        else
            echo "ERROR: config file $mainconfig does not exist"
            exit 1
        fi

        if [[ -f $config_file ]]
        then
                . $config_file
                if [[ -f $kRepDir/toolbox ]]; then
                        . $kRepDir/toolbox
                else
                        echo "ERROR: toolbox file does not exist"
                        exit
                fi
                echo "Starting $0"
                echo "Using $config_file"
		echo "Detailed log can be found at $logfile"
        else
                echo "ERROR: File $config_file does not exist, exiting"
                exit
        fi
fi

if [ -f "$slonReset" ]; then
	logwrite "$slonReset file found"
	/bin/rm -f ${slonDie}
	/bin/rm -f ${slonReset}
fi

if [ -f "$slonDie" ]; then
	echo "Die file found."
	logwrite "Die file found."
	exit;
fi

# see if the db's are up
ret=`$kPsqlCmd -h $MASTERHOST -p $MASTERPORT -U $REPUSER  -l | grep $MASTERDBNAME | wc -l`
logwrite "$kPsqlCmd -h $MASTERHOST -p $MASTERPORT -U $REPUSER  -l | grep $MASTERDBNAME | wc -l"
if [ "$ret" == "" ]; then
	logwrite "node1 db is down, aborting"
	exit
else
	set - $ret
	ret=$1
fi

if [ $ret -eq 0 ]; then
	logwrite "node1 db is not up, aborting"
	exit
fi



ret=`$kPsqlCmd -h $SLAVEHOST -p $SLAVEPORT -l -U $REPUSER  | grep $SLAVEDBNAME | wc -l`
if [ "$ret" == "" ]; then
	logwrite "node2 db is down, aborting"
	exit
else
	set - $ret
	ret=$1
fi

if [ $ret -eq 0 ]; then
	logwrite "node2 db is not up, aborting"
	exit
fi

#--------------------------------------------------------------------
# Gets current IP address from config file based on $HOSTNAME
#--------------------------------------------------------------------
case $HOSTNAME in
hmidb0)
        currIP=$hmidb0IP
        ;;

hmidb1)
        currIP=$hmidb1IP
        ;;

hmidb2)
        currIP=$hmidb2IP
        ;;

*)
        logwrite "ERROR: Could not determine what host I am on"
        exit
        ;;
esac
logwrite "Found that with current hostname being [$HOSTNAME], current IP is [$currIP]"

# check to see if were on the slave
logwrite "Checking to make sure we are on the slave"
check=`$kPsqlCmd -p $MASTERPORT -h $currIP -U $REPUSER $MASTERDBNAME -t -c "select sub_provider from _$CLUSTERNAME.sl_subscribe LIMIT 1" 2>&1`
logwrite "$kPsqlCmd -p $MASTERPORT -h $currIP -U $REPUSER $MASTERDBNAME -t -c \"select sub_provider from _$CLUSTERNAME.sl_subscribe LIMIT 1\" 2>&1"
set - $check
logwrite "Result of sql query for selecting sub_provider [$check]"

if [[ "$check" == "psql: FATAL:  the database system is starting up" ]]
then
        logwrite "I am the warm standby"
	exit
elif [[ "$1" == "$currNode" ]]
then
        logwrite "I am the master"
	exit
elif [[ "$1" != "$currNode" ]]
then
        logwrite "I am the slave"
else
        logwrite "[$check]"
	exit
fi

flag=0

if [ -f "$slonDie" ]; then
	echo "Die file found."
	logwrite "Die file found."
	exit;
fi

# check the daemon for node1
logwrite "checking for pidfile [$kMSMasterPIDFile]"
if [ -f "$kMSMasterPIDFile" ]; then
	pid=`cat $kMSMasterPIDFile`
	logwrite "Found pid [$pid]"
	if ps -p $pid | grep -qv PID
	then
		# another instance is still running, abort
		logwrite "slon daemon for node1 is already running"
		flag=1		
	else
		logwrite "no slon daemon for node1 found, executing: $kRepDir/manageslony/sl_start_slon_daemons.sh $mainconfig master"
		# old call
		#$scriptsBinDir/sl_start_daemons 1 $config_file
		$kRepDir/manageslony/sl_start_slon_daemons.sh $mainconfig master 
	fi
else
	logwrite "no slon daemon for node1 found, executing: $kRepDir/manageslony/sl_start_slon_daemons.sh $mainconfig master"
	# old call
	#$scriptsBinDir/sl_start_daemons 1 $config_file
	$kRepDir/manageslony/sl_start_slon_daemons.sh $mainconfig master 
fi

# check the daemon for node2
logwrite "checking for pidfile [$kMSSlavePIDFile]"
if [ -f "$kMSSlavePIDFile" ]; then
	pid=`cat $kMSSlavePIDFile`
	logwrite "Found pid [$pid]"
	if ps -p $pid | grep -qv PID
	then
		# another instance is still running, abort
		logwrite "slon daemon for node2 is already running"
		flag=1		
	else
		logwrite "no slon daemon for node2 found, executing: $kRepDir/manageslony/sl_start_slon_daemons.sh $mainconfig slave"
		# old call
		#$scriptsBinDir/sl_start_daemons 2 $config_file
		$kRepDir/manageslony/sl_start_slon_daemons.sh $mainconfig slave 
	fi
else
	logwrite "no slon daemon for node2 found, executing: $kRepDir/manageslony/sl_start_slon_daemons.sh $mainconfig slave"
	# old call
	#$scriptsBinDir/sl_start_daemons 2 $config_file
	$kRepDir/manageslony/sl_start_slon_daemons.sh $mainconfig slave 
fi

if [ $flag -eq "1" ]; then
	exit
fi
