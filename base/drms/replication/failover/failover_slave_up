#!/bin/bash
currDt=`date +"%m-%d-%Y %H:%M:%S - "`

#--------------------------------------------------------------------
# Syntax check
#--------------------------------------------------------------------
if [[ $# -eq 2 ]]
then
        mainconfig=$1
	config_file=$2

        if [[ -f "$mainconfig" ]]; then   
            . "$mainconfig"
        else
            echo "ERROR: config file $mainconfig does not exist"
            exit 1
        fi
	
	if [[ -f $config_file ]]
	then
		. $config_file

                if [[ -f $kRepDir/toolbox ]]; then
                        . $kRepDir/toolbox
                else
                        echo "ERROR: toolbox file does not exist"
                        exit
                fi

		pidfile=$slave_up_pidfile
		diefile=$slave_up_diefile
		echo "Starting $0"
		echo "Using $config_file"
	else
		echo "ERROR: File $config_file does not exist, exiting"
		exit
	fi
else
	echo "ERROR: Usage: $0 <master configuration file> <configuration file>"
	exit
fi

#-------------------------------------------------------------------------
# Checking for another process already running
#-------------------------------------------------------------------------
if [ -f $pidfile ]
then
        pid=`cat $pidfile`
        if ps -p $pid | grep -qv PID
        then
                echo "somebody else is running at [$currDt]"
                exit
        else
                echo "found orphaned pid file at [$currDt]"
        fi
fi

echo $$ > $pidfile

#--------------------------------------------------------------------
# Exit if die file found
#--------------------------------------------------------------------
diecheck () {
	if [ -f $diefile ]
	then
	    logwrite "Die file [$diefile] found, dying"
	        run_command "rm -f $pidfile"
	        exit
	fi
}

diecheck

#--------------------------------------------------------------------
# While loop that looks for trigger file, and executes it
#--------------------------------------------------------------------
while [[ 1 == 1 ]]
do
	diecheck
	logwrite "checking"

	# finds the failover_slave_up trigger file and brings down the slon daemons	
	if [[ -f $triggerdir/failover_slave_up.trg ]]
	then
		logwrite "Bringing up the slon daemons" nl

		mv -f $triggerdir/failover_slave_up.trg $triggerdir/failover_slave_up.working
	
		run_command "touch $triggerdir/slon.reset"
		
		counter=0
		while [[ 1 = 1 ]]
		do 
		
			logwrite "Checking to see if daemons were brought online"
			logwrite "ps -ef | grep $kMSMasterPIDFile | grep -v grep"
			mastercheck=`ps -ef | grep $kMSMasterPIDFile | grep -v grep`
			logwrite "mastercheck is [$mastercheck]"
			logwrite "ps -ef | grep $kMSSlavePIDFile | grep -v grep"
			slavecheck=`ps -ef | grep $kMSSlavePIDFile | grep -v grep`
			logwrite "slavecheck is [$slavecheck]"
		
			# If both checks are not blank, then it was successful
			if [[ "$mastercheck" != "" && "$slavecheck" != "" ]]
			then
				logwrite "Both daemons were brought online successfully"
				echo "success_report success" > $triggerdir/failover_slave_up.working
				unset counter
				break
			else
				logwrite "One or more of the daemons have not come online, waiting one second"
				sleep 1
			fi
			

			if [[ $counter -eq "$timeout" ]]
			then
				logwrite "ERROR: Checked to see if slon daemons came up over $timeout seconds, dying"
				echo "One or more of the slon daemons were not brought online after $timeout seconds" > $triggerdir/failover_slave_up.working
				echo "success_report failure" >> $triggerdir/failover_slave_up.working
				unset counter
				break
			fi

			unset mastercheck slavecheck
			counter=$(($counter + 1 ))
		done

		mv -f $triggerdir/failover_slave_up.working $triggerdir/failover_slave_up.done
	fi
	unset counter
	sleep 10
done

rm -f $pidfile


