#!/bin/bash
currDt=`date +"%m-%d-%Y %H:%M:%S"`

#-------------------------------------------------------------------------
# Syntax check
#-------------------------------------------------------------------------
if [[ $# -eq 1 ]]
then
	config_file=$1
	
	if [[ -f $config_file ]]
	then
		. $config_file
		logdir=$MRSLogDir

		if [[ -f "${kRepDir}/toolbox" ]]; then
			. "${kRepDir}/toolbox"
		else
			echo "ERROR: ${kRepDir}/toolbox does not exist"
			exit
		fi

		echo "Starting $0"
		echo "Using $config_file"
		echo "A detailed log can be found at [$logfile]"
	else
		echo "ERROR: File $config_file does not exist, exiting"
		exit
	fi
else
	echo "ERROR: Usage: $0 <configuration file>"
	exit
fi

#-------------------------------------------------------------------------
# Checking for another process already running
#-------------------------------------------------------------------------
if [ -f $MRSPIDFile ]
then
        pid=`cat $MRSPIDFile`
        if ps -p $pid | grep -qv PID
        then
                echo "somebody else is running at [$currDt]"
                exit
        else
                echo "found orphaned pid file at [$currDt]"
        fi
fi

# if no other process is running, create and write to PID file
echo $$ > $MRSPIDFile

logwrite "Starting $0" nl

#-------------------------------------------------------------------------
# Exit if die file found
#-------------------------------------------------------------------------
diecheck () {
        if [ -f $MRSDieFile ]
        then
        	logwrite "Die file [$MRSDieFile] found, dying"
        	run_command "rm -f $MRSPIDFile"
                exit
        fi
}

diecheck

#-------------------------------------------------------------------------
# Query the slony cluster to see how many replication sets there are
#-------------------------------------------------------------------------
rep_set_check () {
	logwrite "Checking the current number of replication sets in the slony cluster"
	logwrite "Executing: $MRSPSQLBin -p $MASTERPORT -h $MASTERHOST -U $REPUSER $MASTERDBNAME -t -c \"select max(sub_set) from _$CLUSTERNAME.sl_subscribe\" 2>&1"
	check=`$MRSPSQLBin -p $MASTERPORT -h $MASTERHOST -U $REPUSER $MASTERDBNAME -t -c "select max(sub_set) from _$CLUSTERNAME.sl_subscribe" 2>&1`
	set - $check

	# This is the maximum replication set number.
	maxSet=$1
	unset check

	logwrite "Found that the max rep set ID is [$maxSet]" nl

	if [[ $maxSet > 1 ]]
	then
		logwrite "There are more than one replication set. Continuing with merge operation" nl
	else
		logwrite "There's only one replication set. Nothing to do here. Exiting" nl
		run_command "rm -f $MRSPIDFile"
		logwrite "Finished $0" nl
		exit
	fi
}

#-------------------------------------------------------------------------
# Create temporary merge script
#-------------------------------------------------------------------------

create_temp_merge () {
	tempMergeScript=$MRSTempDir/merge.$maxSet.temp
	logwrite "Creating temporary merge script [$tempMergeScript]"
	# Since we already have the slony environment variables loaded, we'll just put them in the script also
	echo "#!/bin/bash
	
$MRSSlonikBin <<_EOF_

cluster name = $CLUSTERNAME;

node 1 admin conninfo = 'dbname=$MASTERDBNAME host=$MASTERHOST port=$MASTERPORT user=$REPUSER';
node 2 admin conninfo = 'dbname=$SLAVEDBNAME host=$SLAVEHOST port=$SLAVEPORT user=$REPUSER';

merge set ( id = 1, add id = $maxSet, origin = 1);

_EOF_" > $tempMergeScript

	run_command "chmod 777 $tempMergeScript"
	logwrite "Finished creating temporary merge script [$tempMergeScript]"
	#run_command "cp $tempMergeScript $tempMergeScript.log" #debug
}


#-------------------------------------------------------------------------
# Checks the number of lag events
#-------------------------------------------------------------------------
lag_event_check () {

	# checking the number of lag events
	check=`$MRSPSQLBin -h $MASTERHOST -p $MASTERPORT -t -U $REPUSER -c "select st_lag_num_events from _$CLUSTERNAME.sl_status" $MASTERDBNAME`
	check=${check// /}
	logwrite "Current number of lag events is [$check]"

}


#-------------------------------------------------------------------------
# Loops through and checks to see if lag events is zero, if zero try to merge.
#-------------------------------------------------------------------------
run_merge () {
	logwrite "Waiting until slony is synced to preform the merge."
	sleeptimer=1
	counter=0
	# Enters a loop, checking each time through for the lag events. If they are 0, attempt a merge. If merge was successful then end, if not, then repeat loop.
	while [[ 1 == 1 ]]
	do

		# check the number of lag events
		lag_event_check
		
		# lag events is 0, attempt a merge
	        if [ "$check" == "0" ]
	        then
	                echo "Lag events is [$check], attempting merge..."
	                logwrite "Lag events is [$check], attempting merge..."
	
			# execute the temporary script, and write the output to a temporary log
	                logwrite "Executing: $tempMergeScript > $MRSLogDir/merge.$maxSet.log 2>&1"

			$tempMergeScript > $MRSLogDir/merge.$maxSet.log 2>&1
	                
			# check to see if that temporary log has "ERROR" in it
			check2=`cat $MRSLogDir/merge.$maxSet.log | grep ERROR`
	                logwrite "Result from merge attempt is [$check2]"
	
			# if there were errors, keep looping. If there were NO errors, exit out and report success
	                if [ -n "$check2" ]
	                then
	                        logwrite "Merge failed, if lag events is still 0, trying again."
	                else
	                        logwrite "Merge was successful!"
	                        echo "Merge was successful!"
	                	run_command "rm -f $MRSLogDir/merge.$maxSet.log"
	                	run_command "rm -f $tempMergeScript"
	                        break
	                fi
	                unset check2
	                rm -f $MRSLogDir/merge.$maxSet.log
	
		# end of if statement for if lag events is 0
	        fi
		unset check
		# sleep for set time untill next check to see if lag events is 0
	        sleep $MRSSleepTimer
	        
		if [[ "$counter" -eq "$MRSMaxTries" ]]
		then
			logwrite "Reached max number of tries [$MRSMaxTries] without success, Exiting"
	                run_command "rm -f $MRSLogDir/merge.$maxSet.log"
	                run_command "rm -f $tempMergeScript"
			break
		fi
	
		counter=$(($counter + 1))
	
	done
}


#-------------------------------------------------------------------------
# Execute process
#-------------------------------------------------------------------------

# Check the number of replication sets. If 1 we exit. If more than 1, we continue.
rep_set_check 

# Create a temporary merge script
create_temp_merge

# Attempt to merge if lag events is 0. loops until lag events are 0 
run_merge

run_command "rm -f $MRSPIDFile"

logwrite "Finished $0" nl

