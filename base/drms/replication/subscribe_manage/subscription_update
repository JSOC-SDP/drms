#!/bin/bash
pidfile=$0.pid

# ART - my attempt at documenting this:
#
#   LST-file management:
#   If $node is a new site, then all series being subscribed to get written to $node.new.lst. All series
#   being unsubscribed from are ignored. If $node is an existing site, then all lines in $node.lst are examined.
#   All items that are not in the unsubscribe list are added to $node.new.lst. The result is that $node.new.lst
#   contains what it should had we started with $node.lst and made the appropriate additions for series in the
#   subscribe list, and subtractions for series in the unsubscribe list.


#--------------------------------------------------------------------
# Subscription Update
# Syntax: ./subscription_update <server configuration file> <node name> <new site (true/false)> <Config File>
#--------------------------------------------------------------------

#-------------------------------------------------------------------------
# syntax check
#-------------------------------------------------------------------------
if [ $# -eq 8 ]
then
    config_file=$1       # The server configuration file
    node=$2              # The client node requesting a subscription
    new_site=$3          # 1 if the client node has never subscribed before
    archive=$4           # The archive value to be used when creating the subscribed-to series on the client side
    retention=$5         # The retention value to be used when creating the subscribed-to series on the client side
	tapegroup=$6         # The tapegroup value to be used when creating the subscribed-to series on the client side
    input_file=$7        # The data file (contains name of the series to subscribe to - and whether this is a subscription or an unsubscription request)
    subscribelockpath=$8
else
        error="ERROR: Usage: $0 <server configuration file> <node> <new subscription, true/false> <subscription information file> <subscription lock file path>"
        echo $error
	exit
fi

## First thing!: source config file
. $config_file

if [ -z "$kSMlogDir" ] 
then
  echo "There is not log directory [kSMlogDir] assigned in Config file!! Exiting ..."
  exit 1;
elif [ ! -d "$kSMlogDir" ]
then
  echo "Directory [kSMlogDir=$kSMlogDir] doesn't exists!! Exiting ..."
  exit 1;
fi

logfile=$kSMlogDir/update.$node.log

if [ -z "$kMaxLog" ]
 then
   maxlog=1048576
else
  maxlog="$kMaxLog"
fi

if [ ! -f "$logfile" ]
then
  touch "$logfile"
  if [ $? -ne 0 ]
  then
    logecho "Couldn't touch log file [$logfile] ... exiting."
    exit 1;
  fi
else
  # log exists, truncate if getting too big
  sz=`stat -c%s $logfile`
  if [ $sz -ge $maxlog ]
  then
    : > "$logfile"
    if [ $? -ne 0 ]
      then
        logecho "Couldn't truncate log file [$logfile] ... exiting."
      exit 1;
    fi
  fi
fi

exec >> $logfile 2>&1

## After setting the logfile variable source the subscriber functions
## The ORDER things get sourced is IMPORTANT!!
. $kRepDir/subscribe_manage/subscribe_functions

# ART LST - usertables is used in exactly one place.
usertables=$tables_dir/$node.lst


logwrite "Starting $0 $1" nl

## At this point I'd like to test if this is a subscription retry,
## e.g. the client connection dropped and it retried again
## or if it is a legit one, a first try.
last_running_subupdate=`ls -1r ${input_file%.[0-9]*.[0-9]*}* | grep -v $input_file | tail -1`;

## Note if last_running_subupdate is empty then this is NOT a retry
if [ -n "$last_running_subupdate" ]
then
  ## we've got a retry
  ##
  grep_pid=`grep "#UPDATE PID:" $last_running_subupdate`; 
  update_pid=${grep_pid#"#UPDATE PID:"};
  program_name="";
  this_basename=`basename $0`;
  ## check if pid is running
  if [ -n $update_pid ]
  then
    #program_name=`ps -p $update_pid -o comm=`;
    program_name=`ps -ef | grep $this_basename | grep -v "grep" | grep "$update_pid"`
    logwrite "Checking to see if [$update_pid] is currently running, found [$program_name] as a result."
  fi

  if [ -n "$program_name" ]
  #if [ -n "$program_name" ] && [ "$program_name" == "$this_basename" ]
  then
    ## ok program is already running
    logwrite "There is a [$this_basename] with pid [$update_pid] already running on node [$node] ... exiting"
    ## exit
    rm -f $input_file;
    ## TODO inform the client this is the case.
    exit 1;
  else
    ## no pid running
    logwrite "Accepting request as previous instance of $this_basename died";
    logwrite "cleaning old [$last_running_subupdate] file";
    rm -f $last_running_subupdate;
    ## do some cleaning?? and continue
  fi

  ## making sure I don't break anything down the line
  unset last_running_subupdate
  unset grep_pid
  unset update_pid
  unset program_name
  unset this_basename

fi

## accept this request!
echo "#UPDATE PID:$$" >> $input_file;

############################
# If we reached this point, we can assume that for this current <node>, sql_gen is not still running from
# 	any previous run, and the subscruber ran subscribe_series either for the first time, or re-ran it
# 	after a failed - halted run previously. 
# 	So at this point, we will be running subscription_update and sqlgen either for the first time, or again.
# 	If any files still exist from a possible previous run, we should remove them. As well as remove the
#	<node>.new entry from slon_parser.cfg.
############################

# Removing old trigger files, directories, or list files we need to eventually recreate

# Remove the node.new slony log directory
 if [[ -d $subscribers_dir/$node.new ]]; then 
 	logwrite "Cleanup process: $subscribers_dir/$node.new exists, removing it"
 	rm -rf $subscribers_dir/$node.new
 fi

# Remove the node.sql.tar.gz tar file
 if [[ -f $triggerdir/$node.sql.tar.gz ]]; then
 	logwrite "Cleanup process: $triggerdir/$node.sql.tar.gz exists, removing it"
 	rm -f $triggerdir/$node.sql.tar.gz
 fi

# Remove the node.subscribe_series.sqldone file
 if [[ -f $triggerdir/$node.subscribe_series.sqldone ]]; then
 	logwrite "Cleanup process: $triggerdir/$node.subscribe_series.sqldone exists, removing it"
 	rm -f $triggerdir/$node.subscribe_series.sqldone
 fi

# Remove the node.subscribe_series.done file
 if [[ -f $triggerdir/$node.subscribe_series.done ]]; then
 	logwrite "Cleanup process: $triggerdir/$node.subscribe_series.done exists, removing it"
	rm -f $triggerdir/$node.subscribe_series.done
 fi


# Remove the node.new entry from the slon_parser.cfg file, if a lock can be established
 logwrite "Done removing files for cleanup, attempting to get lock [$subscribelockpath] to edit the slon_parser.cfg file"
 cleanup_counter=0
 while [[ 1 == 1 ]]
 do
	if ( set -o noclobber; echo "$$" > "$subscribelockpath") 2> /dev/null;
	then
	    trap 'rm -f "$subscribelockpath"; exit 1' INT TERM HUP

	    logwrite "Obtained lock"

        # ART LST - This call: 1. Deletes the $node.new entry from slon_parser.cfg, 2. Deletes $node.new.lst,
        # 3. Removes $node.new from su_production.slonycfg, and 4. Removes $node.new from su_production.slonylst.
        # It acquires the gentables.txt lock, but it does not acquire any other locks. Because it modifies slon_parser.cfg,
        # it must be run inside the $subscribelockpath.
        cmd="$kRepDir/subscribe_manage/gentables.pl op=remove conf=$config_file --node=$node.new"
        logwrite "Cleanup process: Deleting entry for $node.new from parser config file, deleting $node.new.lst, removing entry for $node.new from cfg db table, removing entries for $node.new from db lst table."
        logwrite "Running $cmd"
        `$cmd`

        if [ $? -ne 0 ]
        then
            logwrite "ERROR: Failure to clean-up db-table entries for $node.new."
            exit 1;
        fi

	    rm -f $subscribelockpath

	    trap - INT TERM HUP
	    logwrite "Updating $parser_config complete, breaking from loop"
	    break
	else
	    logwrite "Could not acquire the subscription lock [sql_gen]"
	fi

 	if [[ $cleanup_counter -eq $cleanup_max_tries ]]; then
		logwrite "ERROR: Reached the maximum number of attempts [$cleanup_max_tries] while attempting to get a lock on the lock file, exiting!"
		exit 1
	fi

 cleanup_counter=$(( $cleanup_counter + 1 )) 
 logwrite "Sleeping for 5 seconds"
 sleep 5

 done



#-------------------------------------------------------------------------
# Reads the subscription request file into the arrays:
# $series[] is the name of the series
# $request[] is what type of request it is (subscribe or unsubscribe)
#-------------------------------------------------------------------------
# Note: the input_file is a copy of the trigger file the client originally sent but with the "tgr" extension replaced by subupdate. e.g. NSO.subscribe_series.subupdate
## 
## see that input file now contains the PID of the process dealing with it
## i.e. #UPDATE PID:<pid>
## basically we are allowing comment lines in the file
##
counter=0
# $input_file is the subupdate file - a list of series and the action to take on that series
# (subscribe/unsubscribe)
exec < $input_file
        while read line
        do
                # skips blank lines
                if [ ${#line} -eq 0 ]
                then
			continue
                fi
                # skips comment lines
                if [ -z "${line%%#*}" ]
                then
			continue
                fi
		set - $line
logwrite "series [$1] and request [$2]";
                series[$counter]=$1
		request[$counter]=$2

		counter=$(( $counter + 1 ))
			
        done

#-------------------------------------------------------------------------
# Create directory $node.new and newtablefile $node.new.lst
#-------------------------------------------------------------------------
if [ $new_site == "true" ]
then
	logwrite "New site, making new directory $subscribers_dir/$node.new"
	mkdir $subscribers_dir/$node.new
	chmod a+rx $subscribers_dir/$node.new
else
	logwrite "Old site, making directory $subscribers_dir/$node.new"
	mkdir $subscribers_dir/$node.new
	chmod a+rx $subscribers_dir/$node.new
## We don't need the copy anymore
##	cp -far  $subscribers_dir/$node $subscribers_dir/$node.new
fi

# ART - creation of shoom.new succeeds here. shoom.new.lst does NOT exist yet.

# ART LST - the new lst file is referred to by both newtablefile and $tables_dir/$node.new.lst in many places.
# The code creates $node.new.lst
newtablefile=$tables_dir/$node.new.lst
logwrite "newtablefile is [$newtablefile]"
echo > $newtablefile

#-------------------------------------------------------------------------
# Applies the subscription information to the usertables file
#-------------------------------------------------------------------------
newsubscription=0
# If new_site is true, adds all subscriptions in the config file to the end of the new usertables file
# ART - This section copies all series in the node's $series array to the $node.new.lst file. This
#   assumes that the node has specified "subscribe" for all series in $series, and that the node
#   is a brand new subscriber. This is not a valid
#   assumption and there should be error checking to catch the error that a node could have 
#   specified "unsubscribe", even though the node is a new node. 
if [ $new_site == "true" ]
then
	logwrite "The Subscription request is from a new site"
	# Copy current user tables to the new usertables file
	counter=0
	while [ $counter -lt ${#series[*]} ]
	do
		logwrite "Adding [${series[$counter]} to $newtablefile"
                # ART LST - for a single node, add all newly subscribed to series to the new lst file.
		echo "${series[$counter]}" >> $newtablefile
                
                # ART - this was missing
                newsubscription=1
                
                # ART - this assumes that there are no unsubscribe requests
                # in the client's trigger file, if the client is a new
                # subscriber (should filter out these bad unsubscribe
                # requests, or fail or something)
		counter=$(( $counter + 1 ))
	done
	logwrite " "

# If new_site is false, does two things: 
# First removes subscriptions with the tag "unsubscribe"
# Second, adds all subscriptions with the tag "subscribe" to the end of the file
# ART - This section removes from the current node's lst file all series that the node is 
#   removing from subscription, and it adds to the current node's lst file all series
#   that the node is subscribing to.
elif [ $new_site == "false" ]
then
    unsubhappening=0
	logwrite "The Subscription request is from a current site"

	# Removes subscriptions if $request[#] is "unsubscribe"
        # usertables is the subscribing node's .lst file
        # ART - LST FILE
        # 
	exec < $usertables
        	while read line
        	do
			flag=0
			counter=0

			# skips blank lines
	                if [ ${#line} -eq 0 ]
	                then
                	        continue
			fi

                        # skips comment lines
                        if [ -z "${line%%#*}" ]
                        then
                          continue
                        fi
			# Loops through each entry in the $series array and $request array for each $line
            # ART - I think that the $series array has the list of all series that the node is either
            # subscribing to, or unsubscribing to. The $request array is contains the verb
            # "subscribe" or "unsubscribe". So, for each series in $series, $request says
            # whether the series is being subscribed to or removed from subscription.
			while [ $counter -lt ${#series[*]} ]
			do
				linecompare="${series[$counter]}"
logwrite "counter [$counter] [${#series[*]}] request counter [${request[$counter]}] and line [$line] and linecompare [$linecompare]"
				if [[ "$line" == "$linecompare" && ${request[$counter]} == "unsubscribe" ]]
				then
				    # Found match, setting $flag to 1 so line doesn't get rewritten to tablelist
                                    # flag == 1 means an unsubscribe request for an existing series
                                    # (applicable only for existing sites)
                                    # ART - flag can be unset in later iterations, which is okay for
                                    # this double loop, but flag is used at the end of this script. 
                                    # That location is testing for ANY unsubscribe, so we need a 
                                    # new variable
				    flag=1
                                    unsubhappening=1
				fi
				
				counter=$(( $counter + 1 ))
			done

			# if a match was not found, write the line to the new user tables file
                        # if not requesting an unsubscribe to the current series in the .lst file
                        # write the .lst file line to the newtablefile (node.lst.new)
            # ART - here's my translation:
            #   If we are NOT unsubscribing to the current series in the node's lst file, then we want
            #   to copy the series name to newtablefile, which is the $node.new.lst file.
			if [ $flag -eq 0 ]
			then
				logwrite "Writing $line to $newtablefile"
				echo $line >> $newtablefile
			fi
			
		done # end loop over lst file entries.

        # ART LST - At this point, $newtablefile has the set of series to which $node
        # will be subscribed, if the subscription process succeeds. Replace the node.new's
        # su_production.slonylst information with the contents of $newtablefile. We must 
        # have entries from two nodes at this point: $node.lst and $node.new.lst. The 
        # subscription process keeps slony-log files for both $node and $node.new for 
        # a period of time. If things go well, it replaces the contents of $node with 
        # the contets of $node.new.

        $kRepDir/subscribe_manage/gentables.pl op=replace conf=$config_file --node=$node.new --lst=$newtablefile

# ART- shoom.new.lst and shoom.new still exist here.

        if [ $? -ne 0 ]
        then
            logecho "ERROR: Failure to update db-table entries for $node.new."
            exit 1;
        fi

	# adds all lines where request = subscribe to the end of the file	
	counter=0
	while [ $counter -lt ${#series[*]} ]
	do
		# if the request is subscribe, then add to the list, if not, do nothing.
		if [ ${request[$counter]} == "subscribe" ]
		then
			logwrite "Checking to see if subscription request already exists"
			logwrite "Executing [check=cat $newtablefile | grep ${series[$counter]}]"
			check=`cat $newtablefile | grep -w "${series[$counter]}"`
			if [ "$check" == "" ]
			then
				logwrite "Subscription does not already exist"
				logwrite "Writing ${series[$counter]} to $newtablefile"
				echo "${series[$counter]}" >> $newtablefile
                                newsubscription=1
			else 
				logwrite "The subscription request [${series[$counter]}] already exists"
				logwrite "Removing the subscription request [${series[$counter]}] from [$input_file]"
				cat $input_file | grep -v "${series[$counter]}" > $SMworkDir/newinputfile
				mv -f $SMworkDir/newinputfile $input_file
			fi
			unset check
		fi	
		counter=$(( $counter + 1 ))
	done
		
else
	logwrite "ERROR: New subscription value must be either "true" or "false"" nl
	exit
fi

# ART- shoom.new.lst exists and has the series to subscribe to in it. shoom.new exists too, but is empty.

#-------------------------------------------------------------------------
# Adding the new entry to the slon log parser config file
# This was moved to subscription_cleanup, into the critical region
#-------------------------------------------------------------------------
#logwrite "Adding the new entry to $parser_config"
#logwrite "[$subscribers_dir/$node.new	$newtablefile]" nl
#	
#echo "$subscribers_dir/$node.new	$newtablefile" >> $parser_config

# ART - the $new_site == "false" was missing, and replace flag with unsubhappening - 
# flag wasn't the right variable to use

# Always call sql_gen - even if the result will be an empty .sql file. The client
# needs the .sql.done file that sql_gen writes. If we are not actually adding
# any series to the subscription list, then just delete the $node.new directory.
# It won't contain any logs that the client needs. 
# When the parser restarts, the first log file (and subsequent ones) will not have
# content for the series that was dropped.
if [ $newsubscription -ne 1 -a $new_site == "false" -a $unsubhappening -eq 1 ]
then
    # There were no new subscriptions, and at least one unsubscribe, so we need to
    # overwrite the old .lst file - the new one will be missing at least one series
    # ART - I'm not sure what the above comment has to do with this line of code.
    logwrite "Deleting $subscribers_dir/$node.new" nl
    rm -fr $subscribers_dir/$node.new
fi

 #-------------------------------------------------------------------------
  # Execute the sql_gen script [$kRepDir/subscribe_manage/sql_gen $node $new_site $input_file]"
  #-------------------------------------------------------------------------
logwrite "Executing the sql_gen script [. $kRepDir/subscribe_manage/sql_gen $node $new_site $input_file]" nl
. $kRepDir/subscribe_manage/sql_gen $node $new_site $archive $retention $tapegroup $input_file

logwrite "Removing input file [$input_file]"
rm -f "$input_file"
logwrite "$0 finished"
