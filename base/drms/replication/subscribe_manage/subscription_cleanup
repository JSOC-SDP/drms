#!/bin/bash
pidfile=$0.pid

#-------------------------------------------------------------------------
# syntax check
#-------------------------------------------------------------------------
if [ $# -eq 6 ]
then
        config_file=$1
	node=$2
	new_site=$3
	success=$4
	input_file=$5
        subscribelockpath=$6
else
	error="ERROR: [$#] [$@] Usage: $0 <server configuration file> <node> <new_site> <success of sql application, true/false> <subscription information file> <path to subscription path>"
	echo $error
	exit 1
fi


. $config_file
. $kRepDir/subscribe_manage/subscribe_functions

#--------------------------------------------------------------------
# Setting up the log
#--------------------------------------------------------------------
logfile=$kSMlogDir/cleanup.$node.log

if [ -z "$kMaxLog" ]
then
  maxlog=1048576
else
  maxlog="$kMaxLog"
fi

if [ ! -f "$logfile" ]
then
  touch "$logfile"
  if [ $? -ne 0 ]
  then
    logecho "Couldn't touch log file [$logfile] ... exiting."
    exit 1;
  fi
else
  # log exists, truncate if getting too big
  sz=`stat -c%s $logfile`
  if [ $sz -ge $maxlog ]
  then
    : > "$logfile"
    if [ $? -ne 0 ]
      then
        logecho "Couldn't truncate log file [$logfile] ... exiting."
      exit 1;
    fi
  fi
fi

exec >> $logfile 2>&1;

logwrite "Starting $0 $1" nl


#-------------------------------------------------------------------------
# Reads the subscription request file into the arrays:
# $series[] is the name of the series
# $request[] is what type of request it is (subscribe or unsubscribe)
#-------------------------------------------------------------------------
counter=0
exec < $input_file
        while read line
        do
                # skips blank lines
                if [ ${#line} -eq 0 ]
                then
			continue
                fi
		set - $line

		series[$counter]=$1
		request[$counter]=$2

		#echo "[[$line]]"

		counter=$(( $counter + 1 ))
			
        done

cleanup_lockfile_success=0
cleanup_counter=0
while [[ 1 == 1 ]]; do
cleanup_counter=$(( $cleanup_counter + 1 ))

# ART - at this point, $node.new.lst exists and so does $node.new (but it is empty).

	## lock parser
	if ( set -o noclobber; echo "$$" > "$subscribelockpath") 2> /dev/null;
	then
	    trap 'rm -f "$subscribelockpath"; exit 1' INT TERM HUP
	    
	    cleanup_lockfile_success=1
	
	
	    # Critical region
	#-------------------------------------------------------------------------
	# If successful, remove old directory and list file and replace with the new ones
	# If unsuccessful, remove new directory and list file
	#-------------------------------------------------------------------------
	# removing $node.new.lst from $parser_config
	    logwrite "Removing new entry from $parser_config" 
	    cat $parser_config | grep -v "$node.new.lst" > $parser_config.new
	    mv -f $parser_config.new $parser_config

        # ART LST - Remove $node.new from $parser_config and remove $node.new from su_production.slonycfg
        # and remove all entries for $node.new from su_production.slonylst.
        $kRepDir/subscribe_manage/gentables.pl op=remove --node=$node.new

        if [ $? -ne 0 ]
        then
            # If the database table update fails, set the local success variable to
            # to false (it looks like that variable isn't used after this point
            # anyway).
            #
            # Somehow we have to pass this failure back to subscription_manager.
            success=false
            # Need to clean up
            logwrite "ERROR new site: Unable to remove $node.new from config and lst tables!"
            rm -rf $subscribers_dir/$node.new
            rm -f $tables_dir/$node.new.lst
        fi

	    if [ $success == "true" ]
	    then	
		if [ $new_site == "true" ]
		then
			# Success on new site!
		    logwrite "Subscriber SQL was a success"
		    logwrite "Adding the new entry to $parser_config "
		    logwrite "[$subscribers_dir/$node   $tables_dir/$node.lst]" nl
		    echo "$subscribers_dir/$node        $tables_dir/$node.lst" >> $parser_config

            # ART LST - Add $node to su_production.slonycfg. At the same time, insert records for $node in
            # su_production.slonylst. $subscribers_dir/$node, the sitedir, doesn't exit yet, but it will shortly.
            $kRepDir/subscribe_manage/gentables.pl op=add config=$config_file --node=$node --sitedir=$subscribers_dir --lst=$tables_dir/$node.new.lst

            if [ $? -ne 0 ]
            then
                # If the database table update fails, set the local success variable to
                # to false (it looks like that variable isn't used after this point
                # anyway).
                #
                # Somehow we have to pass this failure back to subscription_manager.
                success=false
                # Need to clean up
                logwrite "ERROR new site: Unable to add $node to config and lst db tables!"
                rm -rf $subscribers_dir/$node.new
                rm -f $tables_dir/$node.new.lst
           else
                logwrite "Moving subscriber directory"
	        ## remove any log files that might contain duplicates
                if [ -f $SMworkDir/slon_counter.$node.txt ]
                then
                    slon_counter=`cat $SMworkDir/slon_counter.$node.txt`;
                    
                    slon_file=`printf "$subscribers_dir/$node.new/slony1_log_2_020%d.log" $slon_counter`;
                    while [ -f $slon_file ]
                    do
                      rm -f $slon_file
                      slon_counter=$(($slon_counter-1));
                      slon_file=`printf "$subscribers_dir/$node.new/slony1_log_2_020%d.log" $slon_counter`;
                    done
                    rm -f $SMworkDir/slon_counter.$node.txt
                else
                    logwrite "ERROR:: No $SMworkDir/slon_counter.$node.txt"
                fi
                
                # Create the sitedir
                mv -f $subscribers_dir/$node.new $subscribers_dir/$node
                
                logwrite "Moving subscriber table list"
                mv -f $tables_dir/$node.new.lst $tables_dir/$node.lst
                # ART LST - no need to populate su_production.slonylst for $node. That was done when gentables.pl op=add was called.
            fi # gentables.pl success.
		else
			# Success on old site!
		    logwrite "Subscriber SQL was a success"
		    logwrite "Moving new directory to the old file directory" nl
	                ## remove any log files that might contain duplicates
	            if [ -f $SMworkDir/slon_counter.$node.txt ]
	            then
	                slon_counter=`cat $SMworkDir/slon_counter.$node.txt`;
	
	                slon_file=`printf "$subscribers_dir/$node.new/slony1_log_2_020%d.log" $slon_counter`;
	                while [ -f $slon_file ]
	                do
	                    rm -f $slon_file
	                    slon_counter=$(($slon_counter-1));
	                    slon_file=`printf "$subscribers_dir/$node.new/slony1_log_2_020%d.log" $slon_counter`;
	                done
	                rm -f $SMworkDir/slon_counter.$node.txt
	            else
	                logwrite "NOTE:: No $SMworkDir/slon_counter.$node.txt (only needed if adding series to subscription list)"
	            fi

            # COPY the newly created log files to $subscribers_dir/$node. Don't move - this is an existing node so its sitdir
            # might have existing logs.
		    cp -pr $subscribers_dir/$node.new/* $subscribers_dir/$node
            rm -rf $subscribers_dir/$node.new
		    logwrite "Removing old subscriber table list"
            rm -f $tables_dir/$node.lst
		    logwrite "Updating lst table"

            # ART - This is failing because $tables_dir/$node.new.lst doesn't exist.
		    mv -f $tables_dir/$node.new.lst $tables_dir/$node.lst

            # ART LST - call into perl code to update db-table versions of the .lst files. Make sure
            # to use $node.lst to populate the lst table, and not $node.new.lst - the latter got
            # renamed to $node.lst.
            $kRepDir/subscribe_manage/gentables.pl conf=$config_file op=replace --node=$node --lst=$node.lst

            if [ $? -ne 0 ]
            then
                # If the database table update fails, set the local success variable to
                # to false (it looks like that variable isn't used after this point
                # anyway).
                #
                # Somehow we have to pass this failure back to subscription_manager.
                success=false

                # Need to clean up
                logwrite "ERROR existing site: Unable to update lst tables properly!"
                rm -rf $subscribers_dir/$node.new
                rm -f $tables_dir/$node.new.lst
            fi
		fi # success on existing site
	    else # if success
		if [ $new_site == "true" ]
		then
			# Failure on new site!
		    logwrite "Subscriber SQL was not a success"
		    logwrite "Remove new subscriber folder" nl
		    rm -rf $subscribers_dir/$node.new
		    logwrite "Removing new subscriber table list"
		    rm -f $tables_dir/$node.new.lst
            # ART LST - $node.new was already removed from su_production.slonylst in a previous call to gentables.pl
		else
			# Failure on old site!
		    logwrite "Subscriber SQL was not a success"
		    logwrite "Remove new subscriber folder" nl
		    rm -rf $subscribers_dir/$node.new
		    logwrite "Removing new subscriber table list"
		    rm -f $tables_dir/$node.new.lst
            # ART LST - $node.new was already removed from su_production.slonylst in a previous call to gentables.pl
		fi
	    fi
	
	    # release subscribe lock
	    rm -f "$subscribelockpath"
	
	    trap - INT TERM HUP
	else
	    logwrite "Could not acquire the subscription lock [cleanup]"
	    logwrite "Sleeping for 1 second"
	fi

	if [[ $cleanup_lockfile_success -eq 1 ]]
	then
		logwrite "Flag found that signals establishing lock file was a success. Breaking from loop"
		break
	fi

	if [[ $cleanup_counter -eq $cleanup_max_tries ]]
	then
	        logwrite "Max tries [$cleanup_max_tries] reached, exiting!"
	        exit
	fi

	sleep 1
done



#-------------------------------------------------------------------------
# If successful, remove old directory and replace with the new one
#-------------------------------------------------------------------------
logwrite "Renaming the $node.subscribe_series.cleanup file to $node.subscribe_series.done" 
mv $input_file $triggerdir/$node.subscribe_series.done
logwrite "Removing the $node.subscribe_series.cfg file" nl
rm -f $triggerdir/$node.subscribe_series.cfg
logwrite "Removing the $node.subscribe_series.sqldone file" nl
rm -f $triggerdir/$node.subscribe_series.sqldone

logwrite "$0 done"
