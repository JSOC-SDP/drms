#!/bin/bash
#
# Run this in the background as:
#   subscription_manager /b/devtest/JSOC/proj/replication/etc/repserver.dev.cfg subscribelock.txt
#--------------------------------------------------------------------
# syntax check
#--------------------------------------------------------------------
if [ $# -eq 2 ]
then
        config_file=$1
        subscribelock=$2
else
        error="ERROR: Usage: $0 <server configuration file> <subscription lock file>"
        echo $error
        exit 1;
fi

## First thing!: source config file
. $config_file

#--------------------------------------------------------------------
# Setting up the log
#--------------------------------------------------------------------
if [ -z "$kSMlogDir" ] 
then
  echo "There is not log directory [kSMlogDir] assigned in Config file!! Exiting ..."
  exit 1;
elif [ ! -d "$kSMlogDir" ]
then
  echo "Directory [kSMlogDir=$kSMlogDir] doesn't exists!! Exiting ..."
  exit 1;
fi

logfile=$kSMlogDir/subscription.log

if [ -z "$kMaxLog" ]
then
  maxlog=1048576
else
  maxlog="$kMaxLog"
fi

if [ ! -f "$logfile" ]
then
  touch "$logfile"
  if [ $? -ne 0 ]
  then
    logecho "Couldn't touch log file [$logfile] ... exiting."
    exit 1;
  fi
else
  # log exists, truncate if getting too big
  sz=`stat -c%s $logfile`
  if [ $sz -ge $maxlog ]
  then
    : > "$logfile"
    if [ $? -ne 0 ]
      then
        logecho "Couldn't truncate log file [$logfile] ... exiting."
      exit 1;
    fi
  fi
fi

exec >> $logfile 2>&1

#echo > $logfile

## After setting the logfile variable source the subscriber functions
## The ORDER things get sourced is IMPORTANT!!
. $kRepDir/subscribe_manage/subscribe_functions

currDt=`date`
pidfile=$0.pid
diefile=$0.die

logwrite "Starting $0"

logwrite "Using config file [$config_file]";

trap "echo 'caught a signal'; rm -f $pidfile; exit" HUP INT TERM

#-------------------------------------------------------------------------
# Checking for another process already running
#-------------------------------------------------------------------------
if [ -f $pidfile ]
then
        pid=`cat $pidfile`
        if ps -p $pid | grep -qv PID
        then
                echo "somebody else is running at [$currDt]"
                exit
        else
                echo "found orphaned pid file at [$currDt]"
        fi
fi

echo $$ > $pidfile
while [ 1 -eq 1 ]
do

  if [ -f $diefile ]
  then
	logwrite "Die file found, dying"
        rm -f $pidfile
        exit
  fi

  #-------------------------------------------------------------------------
  # Reads the subscription request file into the arrays:
  # $series[] is the name of the series
  # $request[] is what type of request it is (subscribe or unsubscribe)
  #-------------------------------------------------------------------------
  # Find trigger files for sql_gen
  logwrite "checking $triggerdir"
  ls -1 $triggerdir | grep .subscribe_series.tgr > temp.txt

  counter=0
  exec < temp.txt
	while read line
	do
                # skips blank lines
                if [ ${#line} -eq 0 ]
                then
                        continue
                fi
		
		logwrite "Found file $line"
                triggerfile[$counter]=$line

                counter=$(( $counter + 1 ))

	done

  #-------------------------------------------------------------------------
  # For each trigger file found, extract the information and execute subscription_update
  #-------------------------------------------------------------------------
  counter=0
  while [ $counter -ne ${#triggerfile[*]} ]
  do
	logwrite "Extracting data from ${triggerfile[$counter]}" 

	# Find the node name and new_site values and adds to new  file
	subupdatefile=$SMworkDir/${triggerfile[$counter]/tgr/subupdate.`date +'%Y%m%d.%H%M%S'`}

	echo > $subupdatefile

	exec < $triggerdir/${triggerfile[$counter]}
		while read line
		do
			# skips blank lines
               		if [ ${#line} -eq 0 ]
       		        then
       		          continue
               		fi
	
                        # skips comment lines
                        if [ -z "${line%%#*}" ]
                        then
                          continue
                        fi
	
			set - $line

			if [ $1 == "node" ]
			then
				node=$2
				logwrite "Node is $node"
			elif [ $1 == "archive" ]
			then
				archive=$2
				logwrite "Archive is $archive"
				continue
			elif [ $1 == "retention" ]
			then
				retention=$2
				logwrite "Retention is $retention"
				continue
			elif [ $1 == "tapegroup" ]
			then
				tapegroup=$2
				logwrite "tapegroup is $tapegroup"
				continue
			else
				logwrite "Adding $1 $2 to $subupdatefile"
				echo $1 $2 >> $subupdatefile
			fi
		done

  #-------------------------------------------------------------------------
  # Check to see if the subscriber is a new subscriber, or an old one.
  #-------------------------------------------------------------------------
	nodecheck=" "$node" "
	new_site=true
	logwrite "Checking for existing directory named $node in $subscribers_dir"
	for i in `ls -1 $subscribers_dir`
	do
          compare=" "$i" "
          logwrite "Comparing [$nodecheck] with [$compare]"
          if [ "$nodecheck" == "$compare" ]
          then
            logwrite "Found $node directory in $subscribers_dir, setting new_site to false"
            new_site="false";
            break;
          fi
	done

	logwrite "Appending [new_site $new_site] to $triggerdir/$node.subscribe_series.tgr"
	echo "new_site $new_site" >> $triggerdir/$node.subscribe_series.tgr
		
	logwrite "Executing [$kRepDir/subscribe_manage/subscription_update $config_file $node $new_site $archive $retention $tapegroup $subupdatefile]" 
	($kRepDir/subscribe_manage/subscription_update $config_file $node $new_site $archive $retention $tapegroup $subupdatefile $kServerLockDir/$subscribelock & )

	# Renaming trigger file from $node.subscribe_series.tgr to $node.subscribe_series.cfg
	logwrite "Move $triggerdir/${triggerfile[$counter]} $triggerdir/${triggerfile[$counter]/tgr/cfg}" nl
	mv -f $triggerdir/${triggerfile[$counter]} $triggerdir/${triggerfile[$counter]/tgr/cfg}

	# Increasing counter to move to the next array element
	counter=$(( $counter + 1 ))

	#unset the node and new_site variables
	unset node
	unset new_site
  done		

  # removes temp text file for finding the subscribe_series.tgr trigger files
  rm -f temp.txt


  #-------------------------------------------------------------------------
  # Looks for sqlapplied trigger files
  # Reads the sqlapplied files into the arrays:
  # $series[] is the name of the series
  # $request[] is what type of request it is (subscribe or unsubscribe)
  #-------------------------------------------------------------------------
  # Find trigger files for sql_gen
  ls -1 $triggerdir | grep .subscribe_series.sqlapplied > temp.txt

  counter=0
  exec < temp.txt
	while read line
	do
                # skips blank lines
                if [ ${#line} -eq 0 ]
                then
                        continue
                fi
		
		logwrite "Found file $line"

		# For each file found ($line) adding it to the sqlappliedfile array
                sqlappliedfile[$counter]=$line

		# Increase array counter
                counter=$(( $counter + 1 ))

	done

  #-------------------------------------------------------------------------
  # For each sqlapplied file found, extract the information and execute subscription_cleanup
  #-------------------------------------------------------------------------
  counter=0
  while [ $counter -ne ${#sqlappliedfile[*]} ]
  do
	logwrite "Extracting data from ${sqlappliedfile[$counter]}"
	# Finds the node name and new_site values and adds to new sqlgen file
	appliedfile=$SMworkDir/${sqlappliedfile[$counter]/sqlapplied/cleanup}
	logwrite "creating ${appliedfile}"
	echo > $appliedfile
	exec < $triggerdir/${sqlappliedfile[$counter]}		
		while read line
		do
			# skips blank lines
               		if [ ${#line} -eq 0 ]
       		            then
       		                 continue
               		fi
		
			set - $line

			if [ $1 == "node" ]
			then
				node=$2
				logwrite "Node is $node"
			elif [ $1 == "success" ]
			then
				success=$2
				logwrite "Success is $success"
			elif [ $1 == "new_site" ]
			then
				new_site=$2
				logwrite "New_site is $new_site"
			else
				logwrite "Adding $1 $2 to $appliedfile"
				echo $1 $2 >> $appliedfile
			fi
		done

        if [ -n "$success" ]
        then
          logwrite "Executing $kRepDir/subscribe_manage/subscription_cleanup $config_file $node $new_site $success $appliedfile &" 

          ($kRepDir/subscribe_manage/subscription_cleanup $config_file $node $new_site $success $appliedfile $kServerLockDir/$subscribelock & )
        else
          logwrite "ERROR:: FILE [$triggerdir/${sqlappliedfile[$counter]}] doesn't have a valid [Success is true/false] line" 
        fi

	logwrite "Removing $triggerdir/${sqlappliedfile[$counter]}" nl
	rm -f $triggerdir/${sqlappliedfile[$counter]}

	# Increase the counter so next array elemenet is used
	counter=$(( $counter + 1 ))

	#unset the node, success, and new_site variables
	unset node
	unset success
	unset new_site
  done		

  # removes temp text file for finding the subscribe_series.tgr trigger files
  rm -f temp.txt


  if [ -f $diefile ]
  then
	logwrite "Die file found, dying" 
        rm -f $pidfile
        exit
  fi

  sleep 10

  # removes values from triggerfile array.
  unset triggerfile
  unset sqlappliedfile

done

rm -f $pidfile
