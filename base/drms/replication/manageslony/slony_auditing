#!/bin/bash
#-------------------------------------------------------------------------
# Slony auditing can be run manually or by cron on a set scedule. It will
# 	execute to the end and exit. 
#
# Slony auditing will preform two functions. First it will get the list of 
#	tables currently in slony replication, and get a count on each of 
# 	them for both the master and the slave, as well as the current lag 
# 	events. If anything looks wrong, it will send out an email using 
#	sendmail.
#	The second function is simply creating a snapshot of the sl_status
#	view in a metadata database table for record keeping.
#-------------------------------------------------------------------------

#-------------------------------------------------------------------------
# Syntax check
#-------------------------------------------------------------------------
if [[ $# -eq 1 ]]
then
        config_file=$1

        if [[ -f $config_file ]]
        then
                . $config_file
		logdir=$SALogDir

                if [[ -f $kRepDir/toolbox ]]; then
                        . $kRepDir/toolbox
                else
                        echo "ERROR: toolbox file does not exist"
                        exit
                fi

                echo "Starting $0"
                echo "Using $config_file"
                echo "A detailed log can be found at [$logfile]"
        else
                echo "ERROR: File $config_file does not exist, exiting"
                exit
        fi
else
        echo "ERROR: Usage: $0 <configuration file>"
        exit
fi

if [ -z "$kMaxLog" ]
then
	maxlog=1048576
else
	maxlog="$kMaxLog"
fi
# truncate log if getting too big
size=`stat -c%s $logfile`
if [ $size -ge $maxlog ]; then
	echo > "$logfile"
	if [ $? -ne 0 ]; then
		logecho "Couldn't truncate log file [$logfile] ... exiting."
		exit 1;
	fi
fi

logwrite "Starting $0"

#-------------------------------------------------------------------------
# Function that gets the list of tables in replication
#-------------------------------------------------------------------------
get_table_list () {
	logwrite "Getting list of tables that are currently in replication"
	tables=`$kPsqlCmd -h $MASTERHOST -p $MASTERPORT -U $REPUSER -t -c "select tab_nspname, tab_relname from _$CLUSTERNAME.sl_table" $MASTERDBNAME`
	#take out all spaces
	tables=${tables// /}
	# for each schema|table in the result, extract the schema and tables
	counter=0
	for i in `echo $tables`; do
		oldIFS=$IFS
		IFS="|"
		set - $i
		schema_table[$counter]="$1.$2"
		logwrite "- Found table [${schema_table[$counter]}] is in replication, adding to list to be checked."
		IFS=$oldIFS
		counter=$(($counter + 1))
	done
	logwrite "Finished getting list of tables that are currently in replication" nl
}

#-------------------------------------------------------------------------
# Function that adds a row to the slony_auditing_status_history table as a select from sl_status
#-------------------------------------------------------------------------
sl_status_get () {
	logwrite "Getting a snapshot of the sl_status view on the master"
	# Add new row to the sl_status history table
	insert="insert into $SAMetadataSchema.slony_auditing_status_history (st_origin, st_received, st_last_event, st_last_event_ts, st_last_received, st_last_received_ts, st_last_received_event_ts, st_lag_num_events, st_lag_time) (select * from _$CLUSTERNAME.sl_status)"
	logwrite "Executing: [$insert]"
	add_status=`$kPsqlCmd -h $SAMetadatahost -p $SAMetadataport -U $SAMetadatauser -t -c "$insert" $SAMetaDatadb 2>&1`
	set - $add_status
        if [[ $1 != "INSERT" ]]; then
                logwrite "ERROR: Inserting into the metadata database failed. Execution returned with [$add]"
                exit
        fi
	logwrite "Finished getting a snapshot of the sl_status view on the master"
}	

#-------------------------------------------------------------------------
# Function that adds to the metadata db the information found
#-------------------------------------------------------------------------
add_metadata () {
	logwrite "Adding a rows to the metadata database"
	add_sql="insert into $SAMetadataSchema.slony_auditing_metadata (schema_table, master_count, slave_count, match_flag, lag_events) VALUES ('$1', '$2', '$3', '$4', '$5')"
	logwrite "Executing: [$add_sql]"
	add=`$kPsqlCmd -h $SAMetadatahost -p $SAMetadataport -U $SAMetadatauser -t -c "$add_sql" $SAMetaDatadb 2>&1`
	set - $add
	if [[ $1 != "INSERT" ]]; then
		logwrite "ERROR: Inserting into the metadata database failed. Execution returned with [$add]"
		exit
	fi
	
	logwrite "Finished adding a row to the metadata database"
}

#-------------------------------------------------------------------------
# Function executed when a table has matching counts between master and slave
#-------------------------------------------------------------------------
rows_match () {
	logwrite "Seems there has been a match. Table name is [$1], master count is [$2], slave count is [$3], and lag events is [$4]"
	#update the metadata db with this information
	add_metadata "$1" "$2" "$3" "t" "$4"

}

#-------------------------------------------------------------------------
# Function executed when a table has nonmatching counts between master and slave
#-------------------------------------------------------------------------
rows_nomatch () {
	nomatch_table=$1
	nomatch_master=$2
	nomatch_slave=$3
	nomatch_lag=$4
	logwrite "There has been a non match found with table [$nomatch_table]"

	if [[ $nomatch_master -gt $nomatch_slave ]] && [[ $nomatch_lag -eq "0" ]]; then
		# If we reach here, something is very broken. Master count is higher than slave, and lag events is zero.
		logwrite "WARNING: The master count [$nomatch_master] is greater than the slave count [$nomatch_slave], and the lag events are [$nomatch_lag]. Sending alert email."
		red_flag "$nomatch_table" "$nomatch_master" "$nomatch_slave" "$nomatch_lag" "Slony Auditing has found that the row count for table [$nomatch_table] do not match. The master reports a count of [$nomatch_master] and the slave reports [$nomatch_slave] with lag events reporting [$nomatch_lag]. This could be bad. Verify the slon daemons are running"
	fi
	if [[ $nomatch_master -lt $nomatch_slave ]]; then
		# If we reach here, something is very broken. Master count is less than the slave count.
		logwrite "WARNING: The master count [$nomatch_master] is less than the slave count [$nomatch_slave], this should never happen. Sending alert email."
		red_flag "$nomatch_table" "$nomatch_master" "$nomatch_slave" "$nomatch_lag" "Slony Auditing has found that the row count for table [$nomatch_table] do not match. The master reports a count of [$nomatch_master] and the slave reports [$nomatch_slave]. This shouldn't ever happen."
	fi
	if [[ $nomatch_master -gt $nomatch_slave ]] && [[ $nomatch_lag -gt "0" ]]; then
		# If we reach here, It is not a bad thing. Master count is higher than slave count, but lag events are not zero.
		# Checking to see what the result of our last check was in this matter
		last_count_query="select match_flag, snap_dt from slony_auditing_metadata where schema_table = '$nomatch_table' order by snap_dt desc limit 1"
		logwrite "Executing: [$last_count_query]"
		last_count=`$kPsqlCmd -h $SAMetadatahost -p $SAMetadataport -U $SAMetadatauser -t -c "$last_count_query" $AMetadatadb 2>&1`
		last_count=${last_count// /}
		oldIFS=$IFS
		IFS="|"
		set - $last_count
		IFS=$oldIFS
		logwrite "Result is match_flag = [$1], snap_dt = [$2]"
		
		# if the result is 'f', then the last time this table was checked it also did not match.
		if [[ $1 == "f" ]]; then
			# If we reach here, we've noticed that the rows down't match, the lag events are not zero, and this has happened before.
			logwrite "WARNING: The master count [$nomatch_master] is greater than the slave count [$nomatch_slave], and the lag events are [$nomatch_lag]. The last check showed the same thing. Sending alert email."
			red_flag "$nomatch_table" "$nomatch_master" "$nomatch_slave" "$nomatch_lag" "Slony Auditing has found that the row count for table [$nomatch_table] do not match. The master reports a count of [$nomatch_master] and the slave reports [$nomatch_slave] with lag events reporting [$nomatch_lag]. The last time this was checked at [$2] it also did not match."
		fi
	fi
	logwrite "Seems there has been a nonmatch. Table name is [$nomatch_table], master count is [$nomatch_master], slave count is [$nomatch_slave], and lag events is [$nomatch_lag]"
	#update the metadata db with this information
	add_metadata "$nomatch_table" "$nomatch_master" "$nomatch_slave" "f" "$nomatch_lag"

}
#-------------------------------------------------------------------------
# Function that sends out an email reporting that there is something very wrong
#-------------------------------------------------------------------------
red_flag () {
	logwrite "A red flag has been raised on table [$1]. Sending an alert email"
	
	# Build the email file
	temp_email=$SATempDir/slony_auditing_email.temp
	echo "Subject: ALERT! Slony Auditing has found a possible problem with table $1" > $temp_email
	# Add emails to the file
	for i in `echo $SAEmailList`; do
		echo "Cc: $i" >> $temp_email
	done
	echo "" >> $temp_email
	# Add the actual message
	echo "$5" >> $temp_email

	logwrite "Email $temp_email"

	$SASendmailBin -t < $temp_email

	email_contents=`cat $temp_email`

	logwrite "Email sent. Email contents = [$email_contents]"
	
	run_command "rm $temp_email"
	
	
}
#-------------------------------------------------------------------------
# Find the row count of each table that's part of replication and also grab the current lag events from the slony master
#-------------------------------------------------------------------------
row_check () {
	# get the list of tables 
	get_table_list

	counter=0
	while [[ $counter -lt ${#schema_table[@]} ]]; do
		logwrite "Checking table [${schema_table[$counter]}] for differences in row counts"
		
		# Prepair each query
		master_count_query="select count(*) from ${schema_table[$counter]}"
		slave_count_query="select count(*) from ${schema_table[$counter]}"
		lag_count_query="select st_lag_num_events from _$CLUSTERNAME.sl_status"
	
		# Execute each query in the background and append "done" to the end of the temporary files to signify the query has finished.
		logwrite "Executing [$master_count_query]"
		touch $SATempDir/master_count.tmp && $kPsqlCmd -h $MASTERHOST -p $MASTERPORT -U $REPUSER -t -c "$master_count_query" $MASTERDBNAME > $SATempDir/master_count.tmp && echo "done" >> $SATempDir/master_count.tmp &
	
		logwrite "Executing [$slave_count_query]"
		touch $SATempDir/slave_count.tmp && $kPsqlCmd -h $SLAVEHOST -p $SLAVEPORT -U $REPUSER -t -c "$slave_count_query" $SLAVEDBNAME > $SATempDir/slave_count.tmp && echo "done" >> $SATempDir/slave_count.tmp &
	
		logwrite "Executing [$lag_count_query]"
		touch $SATempDir/lag_count.tmp && $kPsqlCmd -h $MASTERHOST -p $MASTERPORT -U $REPUSER -t -c "$lag_count_query" $MASTERDBNAME > $SATempDir/lag_count.tmp && echo "done" >> $SATempDir/lag_count.tmp &
	
		sleep 1
	
		# enter a loop and wait for each of the queries to finish. This should let us get the results of all three queries for the same time period
		wait_counter=0
		while [[ 1 == 1 ]]; do
			notfinished="0"
			if [[ `tail -1 $SATempDir/master_count.tmp` == "done" ]]; then
				logwrite "Master count is done"
			else
				logwrite "Master count is not done yet"
				notfinished="1"
			fi
			if [[ `tail -1 $SATempDir/slave_count.tmp` == "done" ]]; then
				logwrite "Slave count is done"
			else
				logwrite "Slave count is not done yet"
				notfinished="1"
			fi
			if [[ `tail -1 $SATempDir/lag_count.tmp` == "done" ]]; then
				logwrite "Lag count is done"
			else
				logwrite "Lag count is not done yet"
				notfinished="1"
			fi
			if [[ $notfinished -eq "0" ]]; then
				logwrite "All queries finished"
				break
			fi
			wait_counter=$(($counter + 1))
	
			# if we reach this point, one of the queries has not finished yet. We sleep one second, and try again if we haven't reached the timeout
			if [[ $counter -gt $SACountTimeout ]]; then 
				logwrite "Reached timeout of [$SACountTimeout] seconds amd one of the count queries did not finish. Exiting"
				exit
			fi
			sleep 1
		done
		
		# get the results from the temp files and remove them
		master_count=`head -1 $SATempDir/master_count.tmp`
		run_command "rm -f $SATempDir/master_count.tmp"
		slave_count=`head -1 $SATempDir/slave_count.tmp`
		run_command "rm -f $SATempDir/slave_count.tmp"
		lag_count=`head -1 $SATempDir/lag_count.tmp`
		run_command "rm -f $SATempDir/lag_count.tmp"
	
		# strip the spaces from the variables
		master_count=${master_count// /}
		slave_count=${slave_count// /}
		lag_count=${lag_count// /}
		logwrite "- master count for ${schema_table[$counter]} is [$master_count]"
		logwrite "- slave count for ${schema_table[$counter]} is [$slave_count]"
		logwrite "- lag count for ${schema_table[$counter]} is [$lag_count]"
		
		# Compare the counts
		if [[ $master_count -eq $slave_count ]]; then
			# counts match, execute the rows_match function
			logwrite "- Row counts [$master_count] and [$slave_count] match"
			rows_match "${schema_table[$counter]}" "$master_count" "$slave_count" "$lag_count"
		else 
			# counts dont match, execute the rows_nomatch function
			logwrite "- WARNING: We do not have a match. Investigating more"
			rows_nomatch "${schema_table[$counter]}" "$master_count" "$slave_count" "$lag_count"
		fi
	
		logwrite "Finished checking table [${schema_table[$counter]}] for differences in row counts" nl
		counter=$(($counter + 1))
	
		unset master_count_query slave_count_query lag_count_query master_count slave_count lag_count 
	
	done
}

# Execute the row_check function
row_check

# Execute the sl_status_get function
sl_status_get


logwrite "$0 Finished"


