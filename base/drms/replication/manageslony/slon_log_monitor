#!/bin/bash
currDt=`date +"%m-%d-%Y %H:%M:%S"`

#-------------------------------------------------------------------------
# Syntax check
#-------------------------------------------------------------------------
if [[ $# -eq 2 ]]
then
        config_file=$1
	search_list=$2

        if [[ ! -f $search_list ]]
        then
		echo "ERROR: [$search_list] does not exist"
		exit
	fi

        if [[ -f $config_file ]]
        then
                . $config_file
                logdir=$SLMLogDir

                if [[ -f "${kRepDir}/toolbox" ]]; then
                        . "${kRepDir}/toolbox"
                else
                        echo "ERROR: ${kRepDir}/toolbox does not exist"
                        exit
                fi

                echo "Starting $0"
                echo "Using $config_file"
                echo "A detailed log can be found at [$logfile]"
        else
                echo "ERROR: File $config_file does not exist, exiting"
                exit
        fi
else
        echo "ERROR: Usage: $0 <configuration file> <search list file>"
        exit
fi

#-------------------------------------------------------------------------
# Checking for another process already running
#-------------------------------------------------------------------------
if [ -f $SLMPIDFile ]
then
        pid=`cat $SLMPIDFile`
        if ps -p $pid | grep -qv PID
        then
                echo "somebody else is running at [$currDt]"
                exit
        else
                echo "found orphaned pid file at [$currDt]"
        fi
fi

# if no other process is running, create and write to PID file
echo $$ > $SLMPIDFile

logwrite "Starting $0" nl

#-------------------------------------------------------------------------
# Function that removes temp files and pid file, exits out.
#-------------------------------------------------------------------------

exit_out () {
	run_command "rm -f $SLMPIDFile"
	run_command "rm -f $SLMTempDir/temp_slon_log.tmp"
	run_command "rm -f $SLMTempDir/temp_slon_log.working"
	run_command "rm -f $SLMTempDir/slon_log_action_que.lst"
	logwrite "Finished $0"	
	exit
}

#-------------------------------------------------------------------------
# Function that copies the slony log file to a temporary one, then extracts
# 	all lines that it has not yet scanned for search string matches.
#-------------------------------------------------------------------------

log_grab () {
	
	logwrite "Grabbing unscanned lines from the slony log to a temporary log"

	# if the last line file does not exist, create it with a value of 0
	if [[ ! -f $SLMLastLineFile ]]
	then
		logwrite "WARNING: File [$SLMLastLineFile] does not exist, creating it now"
		echo "0" > $SLMLastLineFile
	fi

	# copy the slony log file to a temporary file
	run_command "cp -f $SLMSlonyLog $SLMTempDir/temp_slon_log.working"

	# retrieve the values from last line file, as well as the line count form the temporary log file
	lastlinecount=`cat $SLMLastLineFile`
	logwrite "Executing: \"wc -l $SLMTempDir/temp_slon_log.working\""
	currentlinecount=`wc -l $SLMTempDir/temp_slon_log.working`
	set - $currentlinecount
	currentlinecount=$1
	logwrite "----- Result [$currentlinecount]"

	# continue based on the comparison between the current counter, and the last counter
	if [[ $lastlinecount -lt $currentlinecount ]]
	then
		# if there are more lines now than the last time we ran, grab the new lines to a new file
		linecountdiff=$(($currentlinecount - $lastlinecount))
		logwrite "There have been [$linecountdiff] log entries since the last time I ran"
		logwrite "Writing [$currentlinecount] to the last line file"
		echo "$currentlinecount" > $SLMLastLineFile
		logwrite "Grabbing the last [$linecountdiff] lines from the end of the temp log file"
		tail -$linecountdiff $SLMTempDir/temp_slon_log.working > $SLMTempDir/temp_slon_log.tmp
		logwrite "Removing the old temp log file" nl
		run_command "rm -f $SLMTempDir/temp_slon_log.working"
		
	elif [[ $lastlinecount -gt $currentlinecount ]]
	then
		# if there are less lines now than the last time we ran, assume it was truncated. Start from scratch, grab all lines.
		logwrite "The file has been truncated since I last ran. Writing [$currentlinecount] to the last line file"
		echo "$currentlinecount" > $SLMLastLineFile
		logwrite "Moving the $SLMTempDir/temp_slon_log.working to $SLMTempDir/temp_slon_log.tmp"
		run_command "mv -f $SLMTempDir/temp_slon_log.working $SLMTempDir/temp_slon_log.tmp"

	elif [[ $lastlinecount -eq $currentlinecount ]]
	then
		# If the lines count is the same as last time then we assume there has been no change, exit out.
		logwrite "The log file has not changed since the last time I ran, exiting"
		exit_out

	fi

	logwrite "The last log line found was [$lastlinecount], the current last line is [$currentlinecount], the difference is [$linecountdiff]" #debug

}

#-------------------------------------------------------------------------
# Function that loops through the string and command list file, 
# 	and searches for string matches for each line, and adds the action 
# 	to the action que if match is found.
#-------------------------------------------------------------------------

build_action_que () {

	logwrite "Searching for string matches in the temp log file, building action que if any are found"
	echo > $SLMTempDir/slon_log_action_que.lst
	echo ". $config_file" >> $SLMTempDir/slon_log_action_que.lst

	# While loop that loops though each line in the list file, parses it, and preforms a search on the temporary log file
	counter=0
	exec < $search_list
	while read line
	do

		unset strmatch search_string command_string string_forward frequency

	        # skips blank lines
	        if [ ${#line} -eq 0 ]
	        then
	                continue
	        fi
	
	        # skips comment lines
	        if [ -z "${line%%#*}" ]
	        then
	                continue
	        fi

		# split the line based on the pipe	
		oldIFS=$IFS
		IFS="|"
		set - $line
		IFS=$oldIFS

		# Sets each variable to reuseable variables
		search_string=$1
		command_string=$2
		string_forward=$3
		frequency=$4

		# strip of leading and tailing spaces for both strings
		search_string=`echo $search_string | sed -e 's/^[ \t]*//'`
		search_string=`echo $search_string | sed -e 's/[ \t]*$//'`
		command_string=`echo $command_string | sed -e 's/^[ \t]*//'`
		command_string=`echo $command_string | sed -e 's/[ \t]*$//'`
		string_forward=`echo $string_forward | sed -e 's/^[ \t]*//'`
		string_forward=`echo $string_forward | sed -e 's/[ \t]*$//'`
		frequency=`echo $frequency | sed -e 's/^[ \t]*//'`
		frequency=`echo $frequency | sed -e 's/[ \t]*$//'`

		# check to make sure each of the 4 variables were retrieved as intended
		if [[ -n $search_string ]] && [[ -n $command_string ]] && [[ -n $string_forward ]] && [[ -n $frequency ]]
		then
			logwrite ""
			logwrite "The current search string is [$search_string] and command string is [$command_string] string_forward is [$string_forward] frequency is [$frequency]"	
		else
			logwrite "ERROR: Not all variables were retrieved from the search list file:"
			logwrite "-------the search string was retrieved as [$search_string]"
			logwrite "-------the command string was retrieved as [$command_string]"
			logwrite "-------the string forward was retrieved as [$string_forward] (should be either \"true\" or \"false\")"
			logwrite "-------the frequency was retrieved as [$frequency] (should be \"0\" \"1\" or \"2\")"
			exit_out
		fi

		# Search the temporary slony log file for the $search_string 
		strmatch=`grep "$search_string" $SLMTempDir/temp_slon_log.tmp | head -1`
		logwrite "Executing: grep \"$search_string\" $SLMTempDir/temp_slon_log.tmp | head -1" #debug

		# if we find a match, we enter into this if statement
		if [[ -n $strmatch ]]
		then
			strmatch="\"$strmatch\""
			logwrite "Found a match for [$search_string]"
			logwrite "-----[$strmatch]"

			# if frequency is 0
			if [[ $frequency -eq "0" ]]
			then
				logwrite "Since frequency is 0, adding to the action que automatically"
				add_to_que "$command_string" "$strmatch" "$string_forward"
			elif [[ $frequency -eq "1" ]]
			then
				unset check timecheck historytimestamp 
				hourlyHistoryfile=$SLMTempDir/log_monitor_hourly_history.lst
				logwrite "Since frequency is 1, checking to see if action has been executed in the past hour"

				if [[ ! -f $hourlyHistoryfile ]]
				then
					logwrite "WARNING: File [$hourlyHistoryfile] does not exist, creating it now"
					run_command "touch $hourlyHistoryfile"
				fi

				logwrite "Checking the file [$hourlyHistoryfile] for [$search_string]"
				check=`grep "$search_string" $hourlyHistoryfile`
				logwrite "----- Result is [$check]"

				if [[ -n $check ]]
				then
					# split the line based on the pipe	
					oldIFS=$IFS
					IFS="|"
					set - $check
					IFS=$oldIFS
					historytimestamp=$1

					# Found a match, starts check to see if the action was done within the past hour
					logwrite "Found a match, checking now to see if it was executed in the past hour"
					logwrite "$SLMPSQLBin -U $SLMUser -h $SLMHost -p $SLMPort $SLMDBName -t -c \"select count(*) where (now() - timestamp '$historytimestamp') < interval '1 hour'\""
					timecheck=`$SLMPSQLBin -U $SLMUser -h $SLMHost -p $SLMPort $SLMDBName -t -c "select count(*) where (now() - timestamp '$historytimestamp') < interval '1 hour'"`
					set - $timecheck
					timecheck=$1
					logwrite "----- Result is [$timecheck]"

					# if the result is 0, then no, it was NOT executed in the past hour. Will add to the action que
					if [[ $timecheck -eq "0" ]]
					then
						logwrite "Action was not executed in the past hour, adding to action que and updating the history file"
						add_to_que "$command_string" "$strmatch" "$string_forward"
						grep -v "$search_string" $hourlyHistoryfile > $hourlyHistoryfile.tmp
						run_command "mv -f $hourlyHistoryfile.tmp $hourlyHistoryfile"
						echo `date +"%m-%d-%Y %H:%M:%S"` "| $search_string" >> $hourlyHistoryfile

					# if the result is 1, then yes, it was executed in the past hour. Will not add to the action que
					elif [[ $timecheck -eq "1" ]]
					then
						logwrite "Action was executed in the past hour, not adding action to the action que or updating the history file"						
					
					# if the result is not 0 or 1, something went wrong with the query, report an ERROR
					else
						logwrite "ERROR: Could not determine timestamp comparison. Doing nothing!"
					fi

				else
					
					# no match was found in the history file. We assume there has been no action on this string found yet.
					logwrite "No match was found, adding it to the history file"
					echo `date +"%m-%d-%Y %H:%M:%S"` "| $search_string" >> $hourlyHistoryfile
					
					logwrite "Adding the command to the que"
					add_to_que "$command_string" "$strmatch" "$string_forward"

				fi


			elif [[ $frequency -eq "2" ]]
			then
				unset check timecheck historytimestamp 
				dailyHistoryfile=$SLMTempDir/log_monitor_daily_history.lst
				logwrite "Since frequency is 2, checking to see if action has been executed in the past day"

				if [[ ! -f $dailyHistoryfile ]]
				then
					logwrite "WARNING: File [$dailyHistoryfile] does not exist, creating it now"
					run_command "touch $dailyHistoryfile"
				fi

				logwrite "Checking the file [$dailyHistoryfile] for [$search_string]"
				check=`grep "$search_string" $dailyHistoryfile`
				logwrite "----- Result is [$check]"

				if [[ -n $check ]]
				then
					# split the line based on the pipe	
					oldIFS=$IFS
					IFS="|"
					set - $check
					IFS=$oldIFS
					historytimestamp=$1

					# Found a match, starts check to see if the action was done within the past day
					logwrite "Found a match, checking now to see if it was executed in the past day"
					logwrite "$SLMPSQLBin -U $SLMUser -h $SLMHost -p $SLMPort $SLMDBName -t -c \"select count(*) where (now() - timestamp '$historytimestamp') < interval '1 day'\""
					timecheck=`$SLMPSQLBin -U $SLMUser -h $SLMHost -p $SLMPort $SLMDBName -t -c "select count(*) where (now() - timestamp '$historytimestamp') < interval '1 day'"`
					set - $timecheck
					timecheck=$1
					logwrite "----- Result is [$timecheck]"

					# if the result is 0, then no, it was NOT executed in the past day. Will add to the action que
					if [[ $timecheck -eq "0" ]]
					then
						logwrite "Action was not executed in the past day, adding to action que and updating the history file"
						add_to_que "$command_string" "$strmatch" "$string_forward"
						grep -v "$search_string" $dailyHistoryfile > $dailyHistoryfile.tmp
						run_command "mv -f $dailyHistoryfile.tmp $dailyHistoryfile"
						echo `date +"%m-%d-%Y %H:%M:%S"` "| $search_string" >> $dailyHistoryfile

					# if the result is 1, then yes, it was executed in the past day. Will not add to the action que
					elif [[ $timecheck -eq "1" ]]
					then
						logwrite "Action was executed in the past day, not adding action to the action que or updating the history file"						
					
					# if the result is not 0 or 1, something went wrong with the query, report an ERROR
					else
						logwrite "ERROR: Could not determine timestamp comparison. Doing nothing!"
					fi

				else
					
					# no match was found in the history file. We assume there has been no action on this string found yet.
					logwrite "No match was found, adding it to the history file"
					echo `date +"%m-%d-%Y %H:%M:%S"` "| $search_string" >> $dailyHistoryfile
					
					logwrite "Adding the command to the que"
					add_to_que "$command_string" "$strmatch" "$string_forward"

				fi

			else
				# this will trigger if the user input was something other than 0 1 or 2, or if they didn't input anything
				logwrite "ERROR: \$frequency does not equal 0, 1, or 2"
				exit_out
			fi
		fi

	done

	logwrite "Done searching for string matches in temp log file" nl

}


#-------------------------------------------------------------------------
# Function that actually adds an action to the action que
#-------------------------------------------------------------------------
add_to_que () {
	action=$1
	log_line=$2
	forward=$3

	# if the boolean for forwarding the found string to the executed script is true, add it. If not then don't.
	#logwrite "comparing [$forward] to [true]" #debug
	if [[ "$forward" == "true" ]]
	then
		# add the action as well as the found line to the action que
		logwrite "Adding to the action que: \"$action $log_line\" >> $SLMTempDir/slon_log_action_que.lst"
		echo "$action $log_line" >> $SLMTempDir/slon_log_action_que.lst
	elif [[ "$forward" == "false" ]]
	then
		# add only the action to the action que
		logwrite "Adding to the action que: \"$action\" >> $SLMTempDir/slon_log_action_que.lst"
		echo "$action" >> $SLMTempDir/slon_log_action_que.lst
	else
		logwrite "ERROR: variable \$forward [$string_forward] seems to be neither true nor false"
	fi
	
}


#-------------------------------------------------------------------------
# Function that loops through all the actions in the action que and executes them
#-------------------------------------------------------------------------

run_que () {

	logwrite "Executing the action que"

	run_command "chmod 777 $SLMTempDir/slon_log_action_que.lst"

	run_command "$SLMTempDir/slon_log_action_que.lst"
	
	logwrite "Done executing the action que"

}

# grab all the unscaned log lines from the log file and put in a new temp log file
log_grab

# search the temporary log for matches from the search list, if matches are found, add the line to the action que
build_action_que

# execute the action que
run_que

# exit out and clean up
exit_out
