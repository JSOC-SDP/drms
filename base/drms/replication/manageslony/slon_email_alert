#!/bin/bash
#SEALogDir=../log/
#SEATempDir=../temp/
#-------------------------------------------------------------------------
# Syntax check
#-------------------------------------------------------------------------
if [[ $# -eq 2 ]]
then
        config_file=$1
        input_string=$2

        if [[ -f $config_file ]]
        then
                . $config_file

        else
                echo "ERROR: File $config_file does not exist, exiting"
                exit
        fi

else
        echo "ERROR: Usage: $0 <config file> <input string>"
        exit
fi

#--------------------------------------------------------------------
# Setting up the log
#--------------------------------------------------------------------
logfile=$SEALogDir/`basename $0.log`
logwrite () {
        echo `date +"%m-%d-%Y %H:%M:%S - "` "$1" >> $logfile
        if [ ! $2 == "" ]
        then
                echo `date +"%m-%d-%Y %H:%M:%S - "` >> $logfile
        fi
}

logwrite "Starting $0"
logwrite "Using $config_file"

#--------------------------------------------------------------------
# Function that executes a command, and echos the result to the log
#--------------------------------------------------------------------
run_command () {
    logwrite "executing [$1]"
    cmd=`$1 2>&1`
    cmdResult=$?
    if [[ $cmdResult -eq "0" ]]
    then
        logwrite "--Command [$1] successful with output [$cmd]" nl
    else
        logwrite "ERROR: Command [$1] failed with output [$cmd]"
    fi
}

trap "echo 'caught a signal'; exit" HUP INT TERM

#-------------------------------------------------------------------------
# Email list import
#-------------------------------------------------------------------------
get_email_list () {
        # read each line of the email list file
        exec < $SEAEmailList
        while read line
        do
        set - $line
        if [[ ${#1} == "0" ]]
        then
                continue
        fi
        if [[ "$1" == "#" ]]
        then
                continue
        else
                logwrite "Adding email [$1] to list of recipients"
                echo "Cc: $1" >> $tempemailfile
        fi

done
}

#-------------------------------------------------------------------------
# Extract the slony XID from the input line
#-------------------------------------------------------------------------
get_xid () {

	set - $input_string
	cntr=0
	while [[ 1 == 1 ]]
	do
		# if XID is found, the next variable will be the actual XID, grab it and exit the loop
		if [[ $1 == "XID" ]]
		then
			slony_xid=$2
			logwrite "Found the slony XID is [$slony_xid]"
			break
		else
			shift
		fi
		
		# if a blank variable is found, we've reached the end of the string without a match, error out
		if [[ $1 == "" ]]
		then
			logwrite "ERROR: Could not find the XID from the input string! [$input_string]"
			logwrite "Exiting"
			run_command "rm -f $tempemailfile"
			exit
		fi
	done

}


#-------------------------------------------------------------------------
# pg_stat_activity information fetch
#-------------------------------------------------------------------------

pg_stat_get () {

	get_xid

	# First, get the list of transactions that are locked with an xid before that which was reported by slony
	$kPsqlCmd -h $MASTERHOST -p $MASTERPORT -U $REPUSER -t -c "select pid from pg_locks where transactionid < '$slony_xid' and transactionid is not null order by transactionid" $MASTERDBNAME > $SEATempDir/transactions.tmp

	# next, build a query that will fetch pg_stat_activity data on each of the results from the above query
	query="select * from pg_stat_activity where "
	first=0
	exec < $SEATempDir/transactions.tmp
	while read line
	do
		if [[ ${#line} == "0" ]]
		then
			continue
		fi
	
		set - $line

		if [[ $first == "0" ]]
		then
			query="$query procpid = '$1'"
		else
			query="$query or procpid = '$1'"
		fi
			
		first=$(( $first + 1 ))

	done

	rm -f $SEATempDir/transactions.tmp
		
	# execute the query that was built
	$kPsqlCmd -h $MASTERHOST -p $MASTERPORT -U $REPUSER -c "$query" >> $tempemailfile
}

#-------------------------------------------------------------------------
# Create temp email file
#-------------------------------------------------------------------------
# Create a temporary email with current date stamp so another process doesn't overwrite it
currDt=`date +"%m-%d-%Y.%H:%M:%S:%N"`
tempemailfile=$SEATempDir/email_body.$currDt.txt

logwrite "Forming temporary email file [$tempemailfile]"

echo "Subject: ALERT: Slony replication waiting on old transaction(s)" > $tempemailfile
get_email_list
echo "" >> $tempemailfile
echo "Alert, the slon_log_monitor found the following in the slony log file" >> $tempemailfile
echo "\"$input_string\"" >> $tempemailfile
pg_stat_get
echo "" >> $tempemailfile

logwrite "Finished forming temp email file"

#-------------------------------------------------------------------------
# send email
#-------------------------------------------------------------------------
logwrite "Sending email"
$SEASendmailBin -t < $tempemailfile
logwrite "Finished sending email" nl


#-------------------------------------------------------------------------
# cleanup
#-------------------------------------------------------------------------
sent_email=`cat $tempemailfile`
logwrite "-----Email has been sent--------------------

$sent_email

"
logwrite "--------------------------------------------" nl

run_command "rm -f $tempemailfile"


logwrite "Finished $0" nl



