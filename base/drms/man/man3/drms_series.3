.\"
.TH drms_series 1  27-Nov-2007  "DRMS MANPAGE" "DRMS Programmer's Manual"
.SH NAME
drms_series \- functions to query the existence of series, get information about a series' primary keywords, and check series compatibility.

.SH SYNOPSIS
.nf
#include "drms_series.h"

char **drms_series_createpkeyarray(DRMS_Env_t *env, 
				   const char *seriesName, 
				   int *nPKeys,
				   int *status);
void drms_series_destroypkeyarray(char ***pkeys, int nElements);
int drms_series_exists(DRMS_Env_t *drmsEnv, const char *sname, int *status);
int drms_series_checkseriescompat(DRMS_Env_t *drmsEnv,
				  const char *series1, 
				  const char *series2, 
				  HContainer_t *matchSegs,
				  int *status);
int drms_series_checkrecordcompat(DRMS_Env_t *drmsEnv,
				  const char *series,
				  DRMS_Record_t *recTempl,
				  HContainer_t *matchSegs,
				  int *status);
int drms_series_checkkeycompat(DRMS_Env_t *drmsEnv,
			       const char *series,
			       DRMS_Keyword_t *keys,
			       int nKeys,
			       int *status);
int drms_series_checksegcompat(DRMS_Env_t *drmsEnv,
			       const char *series,
			       DRMS_Segment_t *segs,
			       int nSegs,
			       int *status);

.SH DESCRIPTION
\fBdrms_series_createpkeyarray\fR allocates and returns an array of null-terminated strings,
each of which is the name of a primary keyword of the series <seriesName>. It is the caller's
responsibility to free the allocated array by calling \fBdrms_series_destroypkeyarray\fR.
Upon success, \fBdrms_series_createpkeyarray\fR returns by reference in the nPKeys parameter
the number of primary keywords that belong to the series <seriesName>.
.PP
\fBdrms_series_destroypkeyarray\fR deallocates an array of strings allocated by 
\fBdrms_series_createpkeyarray\fR. The user must specify the number of primary keywords
in the <nElements> parameter. Failure to provide the correct number could result
in undetermined program behavior. Upon success, it sets *pkeys to NULL.
.PP
\fBdrms_series_exists\fR queries the DRMS database to determine if the series specified by
<sname> exists. If a null value for <sname>, or an empty string, is provided, the function
returns 0. Otherwise, if <sname> is a valid series name, but the series does not exist
in DRMS, the function returns 0, and sets *status to DRMS_ERROR_UNKNOWNSERIES. If 
there is an error looking up <sname>, the function returns 0, and sets *status to 
the value that would result by calling \fBdrms_template_record\fR with <sname>. If <sname> is
a valid series name, and it names an existing DRMS series, the function returns 1.
.PP
\fBdrms_series_checkseriescompat\fR queries the DRMS database to determine if <series1> and
<series2> are compatible in terms of their primary-keyword and segment definitions. Two
primary keyword definitions "match" if the \fBtype\fR, \fBisconstant\fR, and 
\fBper_segment DRMS_Keyword_t\fR fields are equal. \fBdrms_segment_segsmatch\fR
is used to determine if two segment definitions "match". If all
primary keywords and at least one segment match and no error occurs, 
the function intializes <matchSegs> and allocates one \fBHContainer_t\fR element for each 
segment that the two series have in common. Each \fBHContainer_t\fR element is a string
that names the matching segment. The caller must provide a non-NULL <matchSegs> container
to the function. It is the caller's responsibility to deallocate memory associated
with the allocation of \fBHContainer_t\fR elements (see hcontainer(3)).
.PP
\fBdrms_series_checkrecordcompat\fR queries the DRMS database to determine if <recTempl>
is compatible with the series named <series> in terms of their primary-keyword 
and segment definitions. The two are compatible if an attempt to insert <recTempl> into 
the series named <series> would succeed. This function should be used whenever
a record is created by a means other than \fBdrms_create_records\fR 
or \fBdrms_clone_records\fR, and the
user will attempt to insert that newly created record into series <series>.
.PP
\fBdrms_series_checkkeycompat\fR queries the DRMS database to determine if
each of the keywords in <keys>, an array of \fBDRMS_Keyword_t\fR, "match" a keyword
defined for series <series>. \fBdrms_keyword_keysmatch\fR is used to determined 
if the two \fBDRMS_Keyword_t\fR match. The caller must provide, in the <nKeys> parameter,
the number of keywords contained in <keys>.
.PP
\fBdrms_series_checksegcompat\fR queries the DRMS database to determine if
each of the segments in <segs>, an array of \fBDRMS_Segment_t\fR, "match" a segment
defined for series <series>. \fBdrms_segment_segsmatch\fR is used to determine 
if two segment definitions match. The caller must provide, in the <nSegs> parameter,
the number of segments contained in <segs>.

.SH RETURN VALUES
Upon success, the functions set *status to DRMS_SUCCESS. In addition to the errors
described above, the functions could encounter other errors, in which case 
they set *status to a diagostic status code 
(see drms_statuscodes(5)), which includes the following:

DRMS_ERROR_UNKNOWNSERIES - the parameter specifying the series name refers to a
non-existent series
.br
DRMS_ERROR_OUTOFMEMORY - a memory allocation fails due to insufficient memory
available
.br
DRMS_ERROR_INVALIDDATA - a parameter to a function has an unexpected value (such as
providing a null pointer when a character string is expected)
.br
.PP
All checking functions (\fBdrms_series_exists\fR, \fBdrms_series_checkseriescompat\fR, 
\fBdrms_series_checkrecordcompat\fR,
\fBdrms_series_checkkeycompat\fR, \fBdrms_series_checksegcompat\fR) return 1 
if the check they perform succeeds (e.g., if the series exists
\fBdrms_series_exists\fR returns 1).


.SH EXAMPLES
.nf
To check for the existence of a series:
  int status = DRMS_SUCCESS;
  drms_series_exists(drms_env, seriesout, &status);
  if (status == DRMS_ERROR_UNKNOWNSERIES))
  {
    fprintf(stderr, "Output series %s doesn't exist.\\n", seriesout);
    return 1;
  }
.PP
To access the primary keyword names:
  int nPKeys = 0;
  char **pkArray = NULL;
  int ikey;

  pkArray = drms_series_createpkeyarray(drms_env, dsout, &nPKeys, &status);
  if (status == DRMS_SUCCESS)
  {
    for (iKey = 0; iKey < nPKeys; iKey++)
    {
      /* Do something with pkArray[ikey] */
    }

    drms_series_destroypkeyarray(&pkArray, nPKeys);
  }
.PP
To check a record's compatibility with a series:
  int status = DRMS_SUCCESS;
  int error = 0;
  int compat = 0;
  HContainer_t *matchSegNames = NULL;
  XASSERT((matchSegNames = (HContainer_t *)malloc(sizeof(HContainer_t))) != NULL);
  compat = drms_series_checkrecordcompat(drms_env,
                                         series, 
                                         prototype, 
                                         matchSegNames, 
                                         &status);
  if (!compat)
  {
    fprintf(stderr, 
            "Output series %s is not compatible with output data.\\n", 
            series);
            error = 1;
  }
  ...
  hcon_destroy(&matchSegNames);

To check if each member of a set of keys exists in a series:
  int status = DRMS_SUCCESS;
  int error = 0;
  if (!drms_series_checkkeycompat(drms_env, series, keys, nKeys, &status))
  {
    if (status == DRMS_SUCCESS)
    {
      fprintf(stderror, 
              "One or more keywords do not match a keyword in series %s.\\n", 
              series);
              error = 1;
    }
  }

To check if each member of a set of segments exists in a series:
  int status = DRMS_SUCCESS;
  int error = 0;
  if (!drms_series_checksegcompat(drms_env, series, segs, nSegs, &status))
  {
    if (status == DRMS_SUCCESS)
    {
      fprintf(stderror, 
              "One or more segments do not match a segment in series %s.\\n", 
              series);
              error = 1;
    }
  }

.SH "SEE ALSO"
.R drms_keyword(3)
.R drms_record(3)
.R drms_segment(3)
.R drms_statuscodes(5)
.R drms_types(5)
.R hcontainer(3)
