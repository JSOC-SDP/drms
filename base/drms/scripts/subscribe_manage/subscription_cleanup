#!/bin/bash
pidfile=$0.pid
config_file=../etc/subscription_manager.cfg

. $config_file

#-------------------------------------------------------------------------
# syntax check
#-------------------------------------------------------------------------
if [ $# -eq 4 ]
then
	node=$1
	new_site=$2
	success=$3
	input_file=$4
else
	error="ERROR: Usage: $0 <node> <new_site> <success of sql application, true/false> <subscription information file>"
	echo $error
	exit
fi
logfile=../log/$0.$node.log

#--------------------------------------------------------------------
# Setting up the log
#--------------------------------------------------------------------
echo > $logfile
logwrite () {
        echo `date +"%m-%d-%Y %H:%M:%S - "` "$1" >> $logfile
        if [ ! $2 == "" ]
        then
                echo `date +"%m-%d-%Y %H:%M:%S - "` >> $logfile
        fi
}

logwrite "Starting $0 $1" nl


#-------------------------------------------------------------------------
# Reads the subscription request file into the arrays:
# $series[] is the name of the series
# $request[] is what type of request it is (subscribe or unsubscribe)
#-------------------------------------------------------------------------
counter=0
exec < $input_file
        while read line
        do
                # skips blank lines
                if [ ${#line} -eq 0 ]
                then
			continue
                fi
		set - $line

		series[$counter]=$1
		request[$counter]=$2

		#echo "[[$line]]"

		counter=$(( $counter + 1 ))
			
        done

#-------------------------------------------------------------------------
# If successful, remove old directory and list file and replace with the new ones
# If unsuccessful, remove new directory and list file
#-------------------------------------------------------------------------
# removing $node.new.lst from $parser_config
logwrite "Removing new entry from $parser_config" 
cat $parser_config | grep -v "$node.new.lst" > $parser_config.new
mv -f $parser_config.new $parser_config

if [ $success == "true" ]
then
	if [ $new_site == "true" ]
	then
		# Success on new site!
		logwrite "Subscriber SQL was a success"
		logwrite "Adding the new entry to $parser_config "
		logwrite "[$subscribers_dir/$node   $tables_dir/$node.lst]" nl
		echo "$subscribers_dir/$node        $tables_dir/$node.lst" >> $parser_config
		logwrite "Moving subscriber directory"
		mv -f $subscribers_dir/$node.new $subscribers_dir/$node
		logwrite "Moving subscriber table list"
		mv -f $tables_dir/$node.new.lst $tables_dir/$node.lst
	else
		# Success on old site!
		logwrite "Subscriber SQL was a success"
		logwrite "Removing old subscriber directory"
		rm -rf $subscribers_dir/$node
		logwrite "Moving new directory the old file directory" nl
		mv -f $subscribers_dir/$node.new $subscribers_dir/$node
		logwrite "Removing old subscriber table list"
		rm -f $tables_dir/$node.lst
		logwrite "Moving new subscriber table list to old one"
		mv -f $tables_dir/$node.new.lst $tables_dir/$node.lst
	fi
else
	if [ $new_site == "true" ]
	then
		# Failure on new site!
		logwrite "Subscriber SQL was not a success"
		logwrite "Remove new subscriber folder" nl
		rm -rf $subscribers_dir/$node.new
		logwrite "Removing new subscriber table list"
		rm -f $tables_dir/$node.new.lst
	else
		# Failure on old site!
		logwrite "Subscriber SQL was not a success"
		logwrite "Remove new subscriber folder" nl
		rm -rf $subscribers_dir/$node.new
		logwrite "Removing new subscriber table list"
		rm -f $tables_dir/$node.new.lst
	fi
fi

#-------------------------------------------------------------------------
# If successful, remove old directory and replace with the new one
#-------------------------------------------------------------------------
logwrite "Renaming the $node.subscribe_series.cleanup file to $node.subscribe_series.done" 
mv $node.subscribe_series.cleanup $triggerdir/$node.subscribe_series.done
logwrite "Removing the $node.subscribe_series.cfg file" nl
rm -f $triggerdir/$node.subscribe_series.cfg
logwrite "Removing the $node.subscribe_series.sqldone file" nl
rm -f $triggerdir/$node.subscribe_series.sqldone

logwrite "$0 done"
