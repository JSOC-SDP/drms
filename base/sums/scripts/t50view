eval 'exec /home/jsoc/bin/$JSOC_MACHINE/perl -S $0 "$@"'
    if 0;
#
#/home/jim/cvs/PROTO/script/SUM/t50view
#Perl/Tk gui for use with tape_svc for Spectra-Logic T50.
#
#Usage: t50view [-h] [-p] [-i] [-llog_file] [DB]
# -h = help. Show this usage message.
# -p = playback mode (vs. real-time mode)
# -i = interactive mode. you can do imp/exp of tapes. mutually exclusive
#      with -p mdoe. The interactive mode requires a password.
# -lfile = the name of the tape_svc log file. The default log_file is the 
#          latest copy of  /usr/local/logs/SUM/tape_svc_(pid).log
#  DB = database name to connect to. Default is hmidbX.
#
#Reads the log file and updates the display from the directive lines that
#are in the log file. The log file is written by tape_svc, drive[n]_svc,
#and robot[n]_svc. These programs and this gui are therefore strongly
#coupled!
#
use Tk;
use Tie::IxHash;
use DBI;
use Term::ReadKey;

sub usage {
  print "Usage: t50view [-h] [-p] [-i] [-llog_file] [DB]\n";
  print "  -h = help. Show this usage message.\n";
  print "  -p = playback mode (vs. real-time mode)\n";
  print "  -i = interactive mode. you can do imp/exp of tapes. mutually exclusive\n";
  print "       with -p mdoe. The interactive mode requires a password.\n";
  print "  -lfile = the name of the tape_svc log file. The default log_file is the\n";
  print "           latest copy of  /usr/local/logs/SUM/tape_svc_(pid).log\n";
  print "   DB = database name to connect to. Default is $DEFAULTDB.\n";
  exit;
}

%Hofrdq = ();		#hash key is ds_index
%Hofwtq = ();		#hash key is ds_index
%Hofreplace = ();	#key is tapeid. tape replaced in input order
%Hofneed = ();		#key is tapeid. tape imported in input order
%Hofclosed = ();	#key is tapeid. tape closed in order
tie %Hofrdq, "Tie::IxHash"; #lets you take out keys in input order
tie %Hofwtq, "Tie::IxHash"; #lets you take out keys in input order
tie %Hofreplace, "Tie::IxHash"; #lets you take out keys in input order
tie %Hofneed, "Tie::IxHash"; #lets you take out keys in input order
tie %Hofclosed, "Tie::IxHash"; #lets you take out keys in input order

#NOTE: must have our full path name here for any restart signaled by sum_svc
#$OURPATH = "/home/production/cvs/jsoc/scripts/sum/t50view"; #!!this program
$OURPATH = "/home/production/cvs/JSOC/base/sums/scripts/t50view";

$DEFAULTDB = "jsocdc";		#default DB
#$HOSTDB = "localhost";		#host where DB runs
$HOSTDB = `hostname -s`;	#host where DB runs
$NOTAPEARC = "/usr/local/logs/soc/NOTAPEARC";
$INLOG = 0;			#use default tape_svc log
$localhost = `hostname -s`;
#$login = "dsowner";
$pid0 = 0;

$CLEANSLOT = 25;		#slot with cleaning tape
$CLEANDRIVE = 0;		#drive # to clean
$MAX_DRIVES = 1;
$MAX_SLOTS = 25;
$NUM_IMP_EXP_SLOTS = 5;
$MAX_Q_ENTIRES = 9;
$EEcnt = 0;
$ReClosecnt = 0;
$lopened = 0;
$playback = 0;
$drivebusy = 0;
$ldate = &labeldate();
$user = $ENV{'USER'};

while ($ARGV[0] =~ /^-/) {
  $_ = shift;
  if (/^-l(.*)/) {
    $INLOG = $1;
  }
  elsif (/^-p(.*)/) {
    $playback = 1;
  }
  elsif (/^-h(.*)/) {
    $helpflg = 1;
  }
  elsif (/^-i(.*)/) {
    $interactive = 1;
    $nopasswd = 1;	#!!!TEMP for now
  }
  elsif (/^-z(.*)/) {
    $interactive = 1;
    $nopasswd = 1;
  }
  else {
    &usage;
  }
}
if($#ARGV == 0) {
  $DB = $ARGV[0];
}
else {
  $DB = $DEFAULTDB; 
}
if($helpflg) { &usage; }
if($playback && $interactive) {
  print "Playback and interactive are mutually exclusive.\n";
  &usage;
}
$hostdb = $HOSTDB;      #host where Postgres runs
$UID = $<;              #get real user id
#$HOME = $ENV{'HOME'};

$runtag = "/tmp/t50view_$UID.tag";
if(-e $runtag) {        #this user already running
  print "Already found a $runtag\n";
  print "Only one instance of t50view allowed for a user. ";
  print "If not so do: \n/bin/rm $runtag\n";
  exit(1);
}

@pst120 = `ps -ef | grep sum_svc`;
#@sumsvc = grep(/hmidb/, @pst120);
#if($line = shift(@sumsvc)) {
while($line = shift(@pst120)) {
  ($x, $sumdb) = split(/sum_svc /, $line); 
  if($sumdb) {
    chomp($sumdb);
    if($sumdb =~ /-s/) {
      ($x, $sumdb) = split(/ /, $sumdb); #ignore any sim -s flag
    }
    if($sumdb ne $DB) {
      print "t50view db=$DB does not match running sum_svc=$sumdb\n";
      exit;
    }
    last;
  }    
}
#if($sumdb ne $DB) {
#  print "t50view db=$DB does not match that of the running sum_svc=$sumdb\n";
#  exit;
#}

if($interactive) {
  if($user ne "production") {
    print "You must be user production to run t50view in interactive mode\n";
    print "!!!TEMP ignore for now...";
#    exit; #!!!!TEMP NOOP
  }
  if(!$nopasswd) {
    print "Need password to run interactive mode: passwd =";
    ReadMode('noecho');
    $passwd = ReadLine(0);
    chomp($passwd);
    ReadMode('normal');
    print "\n";
    if($passwd ne "hmi4sdo") {
      print "Invalid passwd\n";
      exit(1);
    }
  }
}
$ext = "$user"."_$ldate";
$log = "/usr/local/logs/SUM/t50view_$ext.log";
open(LOG, ">$log") || die "Can't open $log: $!\n";
select(LOG); $| = 1; select(STDOUT);	#make unbuffered
print LOG "$ldate $log\n\n";
my(@pl) = qw/-side top -anchor nw/;
my(@pl1) = qw/-side top/;
my(@pl2) = qw/-side top -pady 1.0m/;
my(@pl3) = qw/-side left/;

if(!($PGPORT = $ENV{'SUMPGPORT'})) {
  print "You must have ENV SUMPGPORT set to the port number, e.g. 5430\n";
  exit;
}

#First connect to database
  #$dbh = DBI->connect( '', "$login", "$passw", 'Oracle' );
  $dbh = DBI->connect("dbi:Pg:dbname=$DB;host=$hostdb;port=$PGPORT", "$user", "$password");
  if ( !defined $dbh ) {
    die "Cannot do \$dbh->connect: $DBI::errstr\n";
  }

system "touch $runtag";		#offically started running now

####!!!TEMP for testing
#&get_exp_tapes; #!!!TEMP
#print "exptapes = @exptape\n";
#$expnum = $#exptape+1;
#print "num of exptape = $expnum\n";
$date = &get_effdate;
print "effdate = $date\n";

  $mw = MainWindow->new;
  $mw->geometry("+10+40");
  #$mw->Photo('image1', -file => 'SDO_Badge.gif');
  #$mw->Label(-image => 'image1')->pack(@pl);
  $tframe = $mw->Frame(-borderwidth => 1)->pack(-side => 'top');
  $tframe->Label(-text => "T50 User Interface (tui) $localhost",
	-font => 'arial 18 bold', -padx => 150)->pack(-side => 'left');
  $b0text = "Imp/Exp\n$EEcnt";
  $b0 = $tframe->Button(
        -text => $b0text,
        -background => 'grey',
        -command =>  \&ImpExp_sub, 
        );
  $b0->pack(-side=> 'left', -pady => 0, -padx => 20);
  $b1text = "Start\nCleaning";
  $b1 = $tframe->Button(
        -text => $b1text,
        -background => 'lightsalmon',
        -command => \&Clean_sub,
        );
  $b1->pack(-side=> 'left', -padx => 10);
  $b = $tframe->Button(
        -text => 'Exit',
        -background => 'red',
        -command => \&Exit_sub,
        );
  $b->pack(-side=> 'left', -pady => 0);

  #$mw->Photo('image2', -file => 'GRAD_BLUE_LINE.gif');
  #$mw->Label(-image => 'image2')->pack(@pl2);
  $mw->Label(-text => 'Slot#    Tape_id', -font => 'arial 12 bold')->pack(@pl);
  $f0 = $mw->Frame(-borderwidth => 3, -relief=>'groove')
		->pack(-side => 'left');
  if($INLOG) {
    $tapelog = $INLOG;
  }
  else {
    $tapelog = `ls -t /usr/local/logs/SUM/tape_svc*.log | sed -n 1p`;
    chomp $tapelog;
  }
  if(!-e $tapelog) {
    print "ERROR: No such log file $tapelog\n";
    system "/bin/rm $runtag";
    exit;
  }
  &show_notape_in_slots;	#show blank tape slots

  $d0tape = "-------------";
  $d1tape = "-------------";
  $d2tape = "-------------";
  $d3tape = "-------------";

  my $fop = $mw->Frame(-borderwidth => 0, -relief=>'flat')
                ->pack(-side => 'top', -pady=>5);
  my $lopa = $fop->Label(-text => 'Operation colors: ', -anchor => 'w',
		-background=>'grey')->pack(-side=> 'left');
  my $lopb = $fop->Label(-text => ' robot ', -anchor => 'w',
		-background=>'yellow')->pack(-side=> 'left');
  my $lopc = $fop->Label(-text => 'tape read', -anchor => 'w',
		-background=>'green')->pack(-side=> 'left');
  my $lopd = $fop->Label(-text => 'tape write', -anchor => 'w',
		-background=>'lightblue')->pack(-side=> 'left');
  my $lope = $fop->Label(-text => 'drive clean', -anchor => 'w',
		-background=>'lightsalmon')->pack(-side=> 'left');

  if($MAX_DRIVES >= 5) { 
    print("Sorry S/W not configured for 5 or more drives. FIX IT!\n");
    exit;
  }
  #drive #0
  my $f1 = $mw->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'top', -pady=>10);
  my $f11 = $f1->Frame(-borderwidth => 3, -relief=>'groove', 
		-background=>'white')
		->pack(-side => 'left');
  my $f12 = $f1->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $f13 = $f1->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $l11 = $f11->Label(-text => 'Drive 0', -anchor => 'w',
		-background=>'white') ->pack(-side=> 'top');
  $b01_drv0 = $f11->Button( -text => $d0tape, -background => 'grey',
		-relief => 'sunken', -command => [\&Mt_stat, 0],)
		->pack(-side=> 'top', -pady => 10);

  my $l13 = $f13->Label(-text => 'Qentry', -anchor => 'n')
		->pack(-side=> 'top', -pady=>0);
  my $b03 = $f13->Button( -text => '------------', -background => 'grey',
	-height=>1, -width=>24, -relief => 'sunken', -command => \&Exit_sub,)
		->pack(-side=> 'top', -padx=>4, -pady => 8);

  my $fcmd0 = $mw->Frame(-borderwidth => 0, -relief=>'flat')
                ->pack(-side => 'top', -pady=>0);
  my $lcmd0 = $fcmd0->Label(-text => 'Drive 0 cmd:', -anchor => 'w')
		->pack(-side=> 'left', -pady=>0);
  #my $tcmd0 = $fcmd0->Text(qw/-width 64 -height 2/)->pack(-side=>'left');
  my $tcmd0 = $fcmd0->Scrolled("Text", -scrollbars=> "e", 
		qw/-width 64 -height 0/) ->pack(-side=>'left');
  $tcmd0->insert('end', "this will be Drive 0 cmds\n");
  $tcmd0->bindtags(undef);

  #drive #1
  if($MAX_DRIVES >= 2) {
  my $f2 = $mw->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'top', -pady=>10);
  my $f21 = $f2->Frame(-borderwidth => 3, -relief=>'groove',
		-background=>'white')
		->pack(-side => 'left');
  my $f22 = $f2->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $f23 = $f2->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $l21 = $f21->Label(-text => 'Drive 1', -anchor => 'w',
		-background=>'white') ->pack(-side=> 'top');
  $b11_drv1 = $f21->Button( -text => $d1tape, -background => 'grey',
		-relief => 'sunken', -command => [\&Mt_stat, 1],)
		->pack(-side=> 'top', -pady => 10);

  my $l23 = $f23->Label(-text => 'Qentry', -anchor => 'n')
		->pack(-side=> 'top', -pady=>0);
  my $b13 = $f23->Button( -text => '------------', -background => 'grey',
	-height=>1, -width=>24, -relief => 'sunken', -command => \&Exit_sub,)
		->pack(-side=> 'top', -padx=>4, -pady => 8);
  my $fcmd1 = $mw->Frame(-borderwidth => 0, -relief=>'flat')
                ->pack(-side => 'top', -pady=>0);
  my $lcmd1 = $fcmd1->Label(-text => 'Drive 1 cmd:', -anchor => 'w')
		->pack(-side=> 'left', -pady=>0);
  my $tcmd1 = $fcmd1->Scrolled("Text", -scrollbars=> "e", 
		qw/-width 64 -height 2/) ->pack(-side=>'left');
  $tcmd1->insert('1.0', "this will be Drive 1 cmds\n");
  $tcmd1->bindtags(undef);
  }

  #drive #2
  if($MAX_DRIVES >= 3) {
  my $f3 = $mw->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'top', -pady=>10);
  my $f31 = $f3->Frame(-borderwidth => 3, -relief=>'groove',
		-background=>'white')
		->pack(-side => 'left');
  my $f32 = $f3->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $f33 = $f3->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $l31 = $f31->Label(-text => 'Drive 2', -anchor => 'w',
		-background=>'white') ->pack(-side=> 'top');
  $b21_drv2 = $f31->Button( -text => $d2tape, -background => 'grey',
		-relief => 'sunken', -command => [\&Mt_stat, 2],)
		->pack(-side=> 'top', -pady => 10);

  my $l33 = $f33->Label(-text => 'Qentry', -anchor => 'n')
		->pack(-side=> 'top', -pady=>0);
  my $b23 = $f33->Button( -text => '------------', -background => 'grey',
	-height=>1, -width=>24, -relief => 'sunken', -command => \&Exit_sub,)
		->pack(-side=> 'top', -padx=>4, -pady => 8);

  my $fcmd2 = $mw->Frame(-borderwidth => 0, -relief=>'flat')
                ->pack(-side => 'top', -pady=>0);
  my $lcmd2 = $fcmd2->Label(-text => 'Drive 2 cmd:', -anchor => 'w')
		->pack(-side=> 'left', -pady=>0);
  my $tcmd2 = $fcmd2->Scrolled("Text", -scrollbars=> "e", 
		qw/-width 64 -height 2/) ->pack(-side=>'left');
  $tcmd2->insert('1.0', "this will be Drive 2 cmds\n");
  $tcmd2->bindtags(undef);
  }

  #drive #3
  if($MAX_DRIVES >= 4) {
  my $f4 = $mw->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'top', -pady=>10);
  my $f41 = $f4->Frame(-borderwidth => 3, -relief=>'groove',
		-background=>'white')
		->pack(-side => 'left');
  my $f42 = $f4->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $f43 = $f4->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $l41 = $f41->Label(-text => 'Drive 3', -anchor => 'w',
		-background=>'white') ->pack(-side=> 'top');
  $b31_drv3 = $f41->Button( -text => $d3tape, -background => 'grey',
		-relief => 'sunken', -command => [\&Mt_stat, 3],)
		->pack(-side=> 'top', -pady => 10);

  my $l43 = $f43->Label(-text => 'Qentry', -anchor => 'n')
		->pack(-side=> 'top', -pady=>0);
  my $b33 = $f43->Button( -text => '------------', -background => 'grey',
	-height=>1, -width=>24, -relief => 'sunken', -command => \&Exit_sub,)
		->pack(-side=> 'top', -padx=>4, -pady => 8);

  my $fcmd3 = $mw->Frame(-borderwidth => 0, -relief=>'flat')
                ->pack(-side => 'top', -pady=>0);
  my $lcmd3 = $fcmd3->Label(-text => 'Drive 3 cmd:', -anchor => 'w')
		->pack(-side=> 'left', -pady=>0);
  my $tcmd3 = $fcmd3->Scrolled("Text", -scrollbars=> "e", 
		qw/-width 64 -height 2/) ->pack(-side=>'left');
  $tcmd3->insert('1.0', "this will be Drive 3 cmds\n");
  $tcmd3->bindtags(undef);
  }

   #now the Rd and Wt queues
   $fq3 = $mw->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'top', -pady=>20);
   $fq31 = $fq3->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
   $fq32 = $fq3->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
   $l31 = $fq31->Label(-text => 'Rd Q', -anchor => 'w')
  		->pack(-side=> 'top');
   for($i=0; $i < $MAX_Q_ENTIRES; $i++) {
     $x = "\$brdq$i = \$fq31->Button( -text => '------------', 
	-background => 'grey', -height=>1, -width=>24, -relief => 'sunken', 
	-command => \\&Exit_sub,) ->pack(-side=> 'top', -padx=>4)";
     eval($x);
   }
   $brdq_ix = 0;		#index of next position to update

   $l32 = $fq32->Label(-text => 'Wt Q', -anchor => 'w')
		->pack(-side=> 'top');
   for($i=0; $i < $MAX_Q_ENTIRES; $i++) {
     $x = "\$bwtq$i = \$fq32->Button( -text => '------------', 
	-background => 'grey', -height=>1, -width=>24, -relief => 'sunken', 
	-command => \\&Exit_sub,) ->pack(-side=> 'top', -padx=>4)";
     eval($x);
   }
   $bwtq_ix = 0;		#index of next position to update

  #now the robot commands
  my $fr4 = $mw->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'bottom', -pady=>0);
  my $lr = $fr4->Label(-text => 'Robot0 cmd:', -anchor => 'w')
		->pack(-side=> 'left', -pady=>0);
  #my $trobot0 = $fr4->Text(qw/-width 60 -height 2/)->pack(-side=>'left');
  my $trobot0 = $fr4->Scrolled("Text", -scrollbars=> "e",
                qw/-width 60 -height 0/) ->pack(-side=>'left');
  $trobot0->insert('end', "this will be robot0 cmd\n");
  $trobot0->bindtags(undef);

  $mw->bind('all', '<Control-c>' => \&Exit_sub);
  #$mw->bind('all', '<Destroy>' => \&exit);#No, will exit incorrectly
  $mw->afterCancel($log_track);
  if(!$playback) {
    $log_track = $mw->repeat(1000, \&log_update); #update every 1.0 sec
  }
  else {
    $log_track = $mw->repeat(2000, \&log_update); #introduce delay for playb
  }

MainLoop;

###########################################################################

#Called every second to get any new queue, robot, or drive activity.
#If playback mode, wait 5 secs after each active line found.
sub log_update {
  my $new_file = "/usr/local/logs/SUM/sum_restart_$$.touch";
  if((-e $new_file) && !$playback) {    #sum_svc tells us to restart
    `/bin/rm -f $new_file`;
    $lopened = 0;
    system "/bin/rm $runtag";
    print "$OURPATH is exiting and restarting...\n";
    if($interactive) {
      $cmd = "kill $$; $OURPATH -z $DB";
    } 
    else {
      $cmd = "kill $$; $OURPATH $DB";
    }
    system($cmd);
  }
  if(!$lopened) {       #ignore this part if already opened
    if(!open(LOGL, $tapelog)) {
      print "Can't open $tapelog: $!\n";
      system "/bin/rm $runtag";
      exit;
    }
    $lopened = 1;
  }
  seek(LOGL, 0, 1);		#seek to current pos to reset eof err
  while(<LOGL>) {
    if(/^\*Tp:RdQsort:/) {	#rd Q may have been reordered
      $bix = 0;
      while(1) {
        if($bix < $MAX_Q_ENTIRES) {
          $x = "\$brdq$bix->configure(-text => '------------')";
          eval($x);
          $bix++;
        }
        else { last; }
      }
      $brdq_ix = 0;
      %Hofrdq = ();		#reinit
    }
    elsif(/^\*Tp:RdQadd:/) {
      ($a, $uidstr, $tapeidstr, $fnumstr, $userstr, $dxstr) = split(/ /, $_);
      ($a, $uid) = split(/=/, $uidstr);
      ($a, $tid) = split(/=/, $tapeidstr);
      ($a, $filenum) = split(/=/, $fnumstr);
      ($a, $user) = split(/=/, $userstr);
      ($a, $dsix) = split(/=/, $dxstr);
      chomp($dsix);
      $newtxt = "$tid $filenum $user $dsix";
      $Hofrdq{$dsix} = $newtxt;		#!!TBD ck for dups of $dsix?
      $x = "\$brdq$brdq_ix->configure(-text => \$newtxt)";
      eval($x);
      $brdq_ix++;
      if($playback) { last; }
    }
    elsif(/^\*Tp:RdQdel:/) {
      ($a, $dsixstr, $drvstr) = split(/ /, $_);
      ($a, $dsix) = split(/=/, $dsixstr);
      ($a, $dnum) = split(/=/, $drvstr);
      chomp($dnum);
      $txt = $Hofrdq{$dsix};
      if($dnum == 0) {
        $b03->configure(-text => $txt);
      }
      elsif($dnum == 1) {
        $b13->configure(-text => $txt);
      }
      elsif($dnum == 2) {
        $b23->configure(-text => $txt);
      }
      elsif($dnum == 3) {
        $b33->configure(-text => $txt);
      }
      else {			#it's an error msg 
        print "$dnum\n";
      }
      delete($Hofrdq{$dsix});
      @inorder = keys %Hofrdq;          #any keys in order of insert
      $bix = 0;
      while($ix = shift(@inorder)) {
        $txt = $Hofrdq{$ix};
        $x = "\$brdq$bix->configure(-text => \$txt)";
        eval($x);
        $bix++;
      }
      $brdq_ix = $bix;
      while(1) {
        if($bix < $MAX_Q_ENTIRES) {
          $x = "\$brdq$bix->configure(-text => '------------')";
          eval($x);
          $bix++;
        }
        else { last; }
      }
      if($playback) { last; }
    }
    elsif(/^\*Tp:Need:/) {	#missing tape
      ($a, $tapeidstr, $b) = split(/ /, $_);
      ($a, $tid) = split(/=/, $tapeidstr);
      if(/^\*Tp:Need:Rd/) {	#need a missing tape to read
        #old t120 stuff
        #if(!$Hofneed{$tid}) {
        #  $Hofneed{$tid} = 1;	#save tape as needed
        #  $EEcnt++;
        #}
        #$b0text = "Imp/Exp\n$EEcnt";
        #$b0->configure(-text => $b0text, -background => 'yellow' );
        if(Exists($WarnImpExpfRd)) {
          $WarnImpExpfRd->destroy();
        }
        $WarnImpExpfRd = $mw->Toplevel();
        $WarnImpExpfRd->geometry("500x340+100+400");
        $WarnImpExpfRd->title("No Tape Import/Export for Read");
        $WarnImpExpfRd->Button(
              -text => 'Close',
              -background => 'grey',
              -command => sub {$WarnImpExpfRd->destroy();},
              )->pack();
        $w0text = "ERROR: Cannot re-import a closed tape for read.\nThe datacapture system is designed for archiving.\n(If you really want to read an exported tape do:\n  sum_stop_dc; put the tape in a live slot; sum_start_dc)";
        $w0 = $WarnImpExpfRd->Button( -text => $w0text, -background => 'red',)
                  ->pack(-side=> 'top');
      }
      else {			#means no blank tape to write
        if(Exists($WarnImpExpf)) {
          $WarnImpExpf->destroy();
        }
        $WarnImpExpf = $mw->Toplevel();
        $WarnImpExpf->geometry("500x340+100+400");
        $WarnImpExpf->title("No Tape Import/Export");
        $WarnImpExpf->Button(
              -text => 'Close',
              -background => 'grey',
              -command => sub {$WarnImpExpf->destroy();},
              )->pack();
        $w0text = "ERROR: There are no blank tapes.\n(tapearc may have to be restarted after you put some blank tapes in.)\n";
        $w0 = $WarnImpExpf->Button( -text => $w0text, -background => 'red',)
                  ->pack(-side=> 'top');
      }
    }
    elsif(/^\*Tp:Close:/) {
      ($a, $tapeidstr) = split(/ /, $_);
      ($a, $tid) = split(/=/, $tapeidstr);
      $EEcnt++;
      $Hofclosed{$tid} = 1;	#keep tack of closed tapes
      $b0text = "Imp/Exp\n$EEcnt";
      $b0->configure(-text => $b0text, -background => 'yellow' );
    }
    elsif(/^\*Tp:ReClose:/) {	#a closed tape was inventoried 
      $ReClosecnt++;
      ($a, $tapeidstr) = split(/ /, $_);
      ($a, $tid) = split(/=/, $tapeidstr);
      $Hofclosed{$tid} = 1;	#keep tack of closed tapes
      $b0text = "Imp/Exp\n$ReClosecnt";
      $b0->configure(-text => $b0text, -background => 'yellow',
      		-command =>  \&ImpExp_sub,); 
    }
    elsif(/^\*Tp:WtQadd:/) {
      ($a, $uidstr, $tapeidstr, $fnumstr, $userstr, $dxstr) = split(/ /, $_);
      ($a, $uid) = split(/=/, $uidstr);
      ($a, $tid) = split(/=/, $tapeidstr);
      ($a, $filenum) = split(/=/, $fnumstr);
      ($a, $user) = split(/=/, $userstr);
      ($a, $dsix) = split(/=/, $dxstr);
      chomp($dsix);
      $newtxt = "$tid $filenum $user $dsix";
      $Hofwtq{$dsix} = $newtxt;		#!!TBD ck for dups of $dsix?
      $x = "\$bwtq$bwtq_ix->configure(-text => \$newtxt)";
      eval($x);
      $bwtq_ix++;
      if($playback) { last; }
    }
    elsif(/^\*Tp:WtQdel:/) {
      ($a, $dsixstr, $drvstr) = split(/ /, $_);
      ($a, $dsix) = split(/=/, $dsixstr);
      ($a, $dnum) = split(/=/, $drvstr);
      chomp($dnum);
      $txt = $Hofwtq{$dsix};
      if(index($dnum, "*WRN") == -1) {	#if found don't update drv Q display
        if($dnum == 0) {
          $b03->configure(-text => $txt);
        }
        elsif($dnum == 1) {
          $b13->configure(-text => $txt);
        }
        elsif($dnum == 2) {
          $b23->configure(-text => $txt);
        }
        elsif($dnum == 3) {
          $b33->configure(-text => $txt);
        }
        else {			#it's an error msg 
          print "$dnum\n";
        }
      }
      delete($Hofwtq{$dsix});
      @inorder = keys %Hofwtq;          #any keys in order of insert
      $bix = 0;
      while($ix = shift(@inorder)) {
        $txt = $Hofwtq{$ix};
        $x = "\$bwtq$bix->configure(-text => \$txt)";
        eval($x);
        $bix++;
      }
      $bwtq_ix = $bix;
      while(1) {
        if($bix < $MAX_Q_ENTIRES) {
          $x = "\$bwtq$bix->configure(-text => '------------')";
          eval($x);
          $bix++;
        }
        else { last; }
      }
      if($playback) { last; }
    }
    elsif(/^\*Tp:BulkLoadDone/) {
      if(Exists($ImpExpf)) {		#this is in case tui restarts
        $ImpExpf->destroy();
        @needorder = ();
        $EEcnt = 0;
        $b0text = "Imp/Exp\n$EEcnt";
        $b0->configure(-text => $b0text, -background => 'grey',
		-command =>  \&ImpExp_sub,); 
      }
      if(!$interactive) {
        $EEcnt = 0;
        $b0text = "Imp/Exp\n$EEcnt";
        $b0->configure(-text => $b0text, -background => 'grey',
		-command =>  \&ImpExp_sub,); 
      }
    }
    elsif(/^\*Tp:t50BulkLoadDone/) {
      $EEcnt = $ReClosecnt;
      $ReClosecnt = 0;
      $b0text = "Imp/Exp\n$EEcnt";
      if($EEcnt == 0) { $ecolor = 'grey'; }
      else { $ecolor = 'yellow'; }
      $b0->configure(-text => $b0text, -background => $ecolor,
		-command =>  \&ImpExp_sub,); 
    }
    elsif(/^\*Tp:DrBusy:/) {
      $drivebusy = 1;
    }
    elsif(/^\*Tp:DrNotBusy:/) {
      $drivebusy = 0;
    }
    elsif(/^\*Tp:CleanInProgress/) {
      $b01_drv0->configure(-background => 'lightsalmon');
    }
    elsif(/^\*Tp:CleaningDone/) {
      $b01_drv0->configure(-background => 'grey');
      if(Exists($cleanf)) {
        $cleanf->destroy();
      }
      $drivebusy = 0;
    }
    elsif(/^\*Rb:door:/) {		#a imp/exp door transfer cmd
      $str = substr($_, 10);
      $trobot0->insert('end', $str);
      $trobot0->see('end');
      ($a,$b,$dev,$com,$sslot,$dslot) = split(/ /, $str);
      $x = "\$slotbt$sslot->configure(-background => 'yellow')";
      eval($x);
      $x = "\$slotbtx$dslot->configure(-background => 'yellow')";
      eval($x);
    }
    elsif(/^\*Rb:t50door:/) {		#a imp/exp door transfer cmd
      $str = substr($_, 13);
      $trobot0->insert('end', $str);
      $trobot0->see('end');
      ($a,$b,$dev,$com,$sslot,$dslot) = split(/ /, $str);
      $x = "\$slotbtx$sslot->configure(-background => 'yellow')";
      eval($x);
      $x = "\$slotbt$dslot->configure(-background => 'yellow')";
      eval($x);
    }
    elsif(/^\*Rb:t50startdoor:/) {	#now trans from imp/exp to slot 
      if($interactive) { &ImpExp_sub_t50_reload; }
    }
    elsif((/^\*\*Rb:doorsuccess/) || (/^\*\*Rb:doorfailure/)) {
      $x = "\$slotbt$sslot->configure(-background => 'grey',
			-text=>'$slottapes[$dslot-1]')";
      eval($x);
      $y = $slottapes[$sslot-1];
      $slottapes[$sslot-1] = $slottapes[$dslot-1];
      $slottapes[$dslot-1] = $y;
      $x = "\$slotbtx$dslot->configure(-background => 'grey',
			-text=>\$y)";
      eval($x);
    }
    elsif((/^\*\*Rb:t50doorsuccess/) || (/^\*\*Rb:t50doorfailure/)) {
      $x = "\$slotbtx$sslot->configure(-background => 'grey',
			-text=>'$slottapes[$dslot-1]')";
      eval($x);
      $y = $slottapes[$sslot-1];
      $slottapes[$sslot-1] = $slottapes[$dslot-1];
      $slottapes[$dslot-1] = $y;
      $x = "\$slotbt$dslot->configure(-background => 'grey',
			-text=>\$y)";
      eval($x);
    }
    elsif(/^\*\*Rb:t50doorcomplete/) {
      `/bin/rm -f $NOTAPEARC`;		#allow tapearc to run again
      if(Exists($ImpExpf)) {
        $ImpExpf->destroy();
      }
    }
    elsif((/^\*\*Rb:doorcomplete/)) {
      #the Expired tapes have been unloaded. resume the imp/exp operations
      if($interactive) { &Imp_Exp_Open_Door; }
    }
    elsif(/^\*Rb:cmd:/) {		#a tape robot cmd 
      $str = substr($_, 9);
      chomp($str);
      $trobot0->insert('end', $str);
      $trobot0->see('end');
      ($a,$b,$dev,$com,$snum,$rbdnum) = split(/ /, $str);
      $x = "\$slotbt$snum->configure(-background => 'yellow')";
      eval($x);
      if($com eq "load") {		#loading tape to a drive
        delete($Hofreplace{$slottapes[$snum-1]}); #not eligible for replace
      }
      elsif($com eq "unload") {		#unloading tape from a drive
        $x = eval("\$d".$rbdnum."tape");
        $Hofreplace{$x} = 1;		#eligible for replace again
      }
      if($rbdnum == 0) {
        $b01_drv0->configure(-background => 'yellow');
      }
      elsif($rbdnum == 1) {
        $b11_drv1->configure(-background => 'yellow');
      }
      elsif($rbdnum == 2) {
        $b21_drv2->configure(-background => 'yellow');
      }
      elsif($rbdnum == 3) {
        $b31_drv3->configure(-background => 'yellow');
      }
      if($playback) { last; }
    }
    elsif(/^\*\*\*Rb:/) {
      $trobot0->insert('end', $_);
      if($rbdnum == 0) {
        $b01_drv0->configure(-background=>'grey', -text=>$slottapes[$snum-1]);
        $x = "\$slotbt$snum->configure(-background=>'grey',-text=>\$d0tape)";
        eval($x);
        $y = $d0tape;
        $d0tape = $slottapes[$snum-1];
        $slottapes[$snum-1] = $y;
      }
      elsif($rbdnum == 1) {
        $b11_drv1->configure(-background=>'grey', -text=>$slottapes[$snum-1]);
        $x = "\$slotbt$snum->configure(-background=>'grey',-text=>\$d1tape)";
        eval($x);
        $y = $d1tape;
        $d1tape = $slottapes[$snum-1];
        $slottapes[$snum-1] = $y;
      }
      elsif($rbdnum == 2) {
        $b21_drv2->configure(-background=>'grey', -text=>$slottapes[$snum-1]);
        $x = "\$slotbt$snum->configure(-background=>'grey',-text=>\$d2tape)";
        eval($x);
        $y = $d2tape;
        $d2tape = $slottapes[$snum-1];
        $slottapes[$snum-1] = $y;
      }
      elsif($rbdnum == 3) {
        $b31_drv3->configure(-background=>'grey', -text=>$slottapes[$snum-1]);
        $x = "\$slotbt$snum->configure(-background=>'grey',-text=>\$d3tape)";
        eval($x);
        $y = $d3tape;
        $d3tape = $slottapes[$snum-1];
        $slottapes[$snum-1] = $y;
      }
      #if($playback) { last; }
    }
    elsif(/^\*Inv:/) {			#an inventory cmd
      $str = substr($_, 6, 33);
      $trobot0->insert('end', "$str\n");
      $trobot0->see('end');
      foreach $i (1 .. $MAX_SLOTS) {	#turn all slots yellow
        $x = "\$slotbt$i->configure(-background => 'yellow',-text=>'-------------')";
        eval($x);
      }
      #always go away to give time to see the display change
      last;
      #if($playback) { last; }
    }
    elsif(/^\*\*\*Inv:/) {
      $trobot0->insert('end', $_);
      foreach $i (1 .. $MAX_SLOTS) {	#turn all slots grey
        $x = "\$slotbt$i->configure(-background => 'grey')";
        eval($x);
      }
      &show_tape_in_slots;		#display where tapes are
      if($playback) { last; }
    }
    elsif(/^\*\*\*ENDInvPhase:/) {
      %Hofclosed = ();			#reset all closed tapes
      $EEcnt = 0;
      $b0text = "Imp/Exp\n$EEcnt";
      $b0->configure(-text => $b0text, -background => 'grey',
      		-command =>  \&ImpExp_sub,); 
    }
    elsif(/^\*Dr0:rd:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd0->insert('end', "$str\n");
      $tcmd0->see('end');
      $b01_drv0->configure(-background => 'green');
      if($playback) { last; }
    }
    elsif(/^\*\*\*Dr0:rd:/) {
      $tcmd0->insert('end', $_);
      $b01_drv0->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr1:rd:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd1->insert('end', "$str\n");
      $tcmd1->see('end');
      $b11_drv1->configure(-background => 'green');
      if($playback) { last; }
    }
    elsif(/^\*\*\*Dr1:rd:/) {
      $tcmd1->insert('end', $_);
      $b11_drv1->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr2:rd:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd2->insert('end', "$str\n");
      $tcmd2->see('end');
      $b21_drv2->configure(-background => 'green');
      if($playback) { last; }
    }
    elsif(/^\*\*\*Dr2:rd:/) {
      $tcmd2->insert('end', $_);
      $b21_drv2->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr3:rd:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd3->insert('end', "$str\n");
      $tcmd3->see('end');
      $b31_drv3->configure(-background => 'green');
      if($playback) { last; }
    }
    elsif(/^\*\*\*Dr3:rd:/) {
      $tcmd3->insert('end', $_);
      $b31_drv3->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr0:wt:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd0->insert('end', "$str\n");
      $tcmd0->see('end');
      $b01_drv0->configure(-background => 'lightblue');
      if($playback) { last; }
    }
    elsif(/^\*\*\*Dr0:wt:/) {
      $tcmd0->insert('end', $_);
      $b01_drv0->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr1:wt:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd1->insert('end', "$str\n");
      $tcmd1->see('end');
      $b11_drv1->configure(-background => 'lightblue');
      if($playback) { last; }
    }
    elsif(/^\*\*\*Dr1:wt:/) {
      $tcmd1->insert('end', $_);
      $b11_drv1->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr2:wt:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd2->insert('end', "$str\n");
      $tcmd2->see('end');
      $b21_drv2->configure(-background => 'lightblue');
      if($playback) { last; }
    }
    elsif(/^\*\*\*Dr2:wt:/) {
      $tcmd2->insert('end', $_);
      $b21_drv2->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr3:wt:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd3->insert('end', "$str\n");
      $tcmd3->see('end');
      $b31_drv3->configure(-background => 'lightblue');
      if($playback) { last; }
    }
    elsif(/^\*\*\*Dr3:wt:/) {
      $tcmd3->insert('end', $_);
      $b31_drv3->configure(-background=>'grey');
      if($playback) { last; }
    }
  }
}

#######################################################################
#Open the log file and show the results of the inventory for which
#tapes are in which slots and drives.
#
sub show_tape_in_slots {
  $row = $column = $slnum = $freeslots = $tapesindrives = 0;
  $rows_per_col = 13;
  @slottapes = ();
  @emptyslottapes = ();
  while(<LOGL>) {
    if(/^\*\*\*ENDInv:/) { last; }
    if(/^tapeid in drive 0/) {
      $pos = index($_, "0 = ");
      $d0tape = substr($_, $pos+4);
      chomp($d0tape);
      if($d0tape eq "(null)") {
        $d0tape = "-------------";
      }
      else {
        $d0tape = "$d0tape  ";	#2 extra spaces needed here
        $tapesindrives++;
      }
    }
    if(/^tapeid in drive 1/) {
      $pos = index($_, "1 = ");
      $d1tape = substr($_, $pos+4);
      chomp($d1tape);
      if($d1tape eq "(null)") {
        $d1tape = "-------------";
      }
      else {
        $d1tape = "$d1tape  ";	#2 extra spaces needed here
        $tapesindrives++;
      }
    }
    if(/^tapeid in drive 2/) {
      $pos = index($_, "2 = ");
      $d2tape = substr($_, $pos+4);
      chomp($d2tape);
      if($d2tape eq "(null)") {
        $d2tape = "-------------";
      }
      else {
        $d2tape = "$d2tape  ";	#2 extra spaces needed here
        $tapesindrives++;
      }
    }
    if(/^tapeid in drive 3/) {
      $pos = index($_, "3 = ");
      $d3tape = substr($_, $pos+4);
      chomp($d3tape);
      if($d3tape eq "(null)") {
        $d3tape = "-------------";
      }
      else {
        $d3tape = "$d3tape  ";	#2 extra spaces needed here
        $tapesindrives++;
      }
    }
    if(/^tapeid in slot/) {
      $pos = index($_, " = ");
      $stape = substr($_, $pos+3);
      chomp($stape);
      if(index($stape, "null") != -1) {
        if(($pos = index($stape, "drive #")) != -1) {
          $indrv = substr($stape, $pos+7);
          chomp($indrv);
          $x = "\$stape = \$d$indrv"."tape";
          eval($x);
          push(@emptyslottapes, $stape);
        }
        $stape = "-------------";
        if($slnum < $MAX_SLOTS) {       #don't count tapes in EE slots
          $freeslots++;
        }
      }
      else {
        if($slnum < $MAX_SLOTS) {	#don't count tapes in EE slots
          $Hofreplace{$stape} = 1;	#tape eligible to be replaced
        }
      }
      $slnum++;
      push(@slottapes, $stape);
    }
  }
  $freeslots = $freeslots - $tapesindrives; # #of slots not assigned
  #print "#of slots with no assignment = $freeslots\n"; #!!TEMP
  #init drive slots button text
  for($i = 0; $i < $MAX_DRIVES; $i++) {
    $x = "\$b$i"."1_drv$i->configure(-background=>'grey', -text=>\$d$i"."tape)";
    eval($x);
    #init queue text
    $x = "\$b$i"."3->configure(-text => '------------')";
    eval($x);
  }
  foreach $i (1 .. $MAX_SLOTS) {
    #$tapeid = shift(@slottapes);
    $tapeid = $slottapes[$i-1];
    if($tapeid eq "-------------") {
      $tapeidinfo = shift(@emptyslottapes);
    }
    else {
      $tapeidinfo = $tapeid;
    }
    $y = "\$slotbt$i";
    $x = "\$slotbt$i->configure(-text => \$tapeid, 
		-command => \[\\&Tape_info, \$tapeidinfo\])";
#    $x = "\$slotbt$i = \$f0->Button(
#        -text => \$tapeid,
#        -background => 'grey',
#        -relief => 'sunken',
#        -command => \[\\&Tape_info, \$tapeid\],
#        )";
     eval($x);
#    $txt = "      ".$i;
#    my $l = $f0->Label(-text => $txt, -anchor => 'w', -justify => 'left');
#    Tk::grid( $l, -row => $row, -column => $column, 
#		-sticky => 'nw', -pady => 1);
#    Tk::grid( eval($y), -row => $row, -column => ($column+1),
#		-sticky => 'w', -pady => 1);
#    $f0->gridRowconfigure($row++,-weight => 0);
#    $f0->gridColumnconfigure($column,-weight => 1, -minsize => 10);
#    $f0->gridColumnconfigure($column+1,-weight => 8, -minsize => 10);
    if($row == $rows_per_col) { $row = 0; $column += 2; }
  }
}

sub show_notape_in_slots {
  $row = 0; $column = 0; $rows_per_col = 13;
  foreach $i (1 .. $MAX_SLOTS) {
    $tapeid = "-------------";
    $y = "\$slotbt$i";
    $x = "\$slotbt$i = \$f0->Button(
        -text => \$tapeid,
        -background => 'grey',
        -relief => 'sunken',
        -command => \\&Exit_sub,
        )";
     eval($x);
    $txt = "      ".$i;
    my $l = $f0->Label(-text => $txt, -anchor => 'w', -justify => 'left');
    Tk::grid( $l, -row => $row, -column => $column, 
		-sticky => 'nw', -pady => 2);
    Tk::grid( eval($y), -row => $row, -column => ($column + 1),
		-sticky => 'w', -pady => 2);
    $f0->gridRowconfigure($row++,-weight => 0);
    $f0->gridColumnconfigure($column,-weight => 1, -minsize => 10);
    $f0->gridColumnconfigure($column+1,-weight => 8, -minsize => 10);
    if($row == $rows_per_col) { $row = 0; $column += 2; }
  }
}

sub show_notape_in_slots_impexp {
  my $row = 0; $column = 0;
  foreach $i (($MAX_SLOTS + 1) .. ($MAX_SLOTS + $NUM_IMP_EXP_SLOTS)) {
    $tapeid = "-------------";
    $y = "\$slotbtx$i";
    $x = "\$slotbtx$i = \$f00->Button(
        -text => \$tapeid,
        -background => 'grey',
        -relief => 'sunken',
        -command => \\&Exit_sub,
        )";
     eval($x);
    $txt = "      ".$i;
    my $l = $f00->Label(-text => $txt, -anchor => 'w', -justify => 'left');
    Tk::grid( $l, -row => $row, -column => $column, 
		-sticky => 'nw', -pady => 2);
    Tk::grid( eval($y), -row => $row, -column => ($column + 1),
		-sticky => 'w', -pady => 2);
    $f00->gridRowconfigure($row++,-weight => 0);
    $f0->gridColumnconfigure($column,-weight => 1, -minsize => 10);
  }

  #put in tapeid's:
  foreach $i (($MAX_SLOTS + 1) .. ($MAX_SLOTS + $NUM_IMP_EXP_SLOTS)) {
    $tapeid = $slottapes[$i-1];
    if($tapeid eq "-------------") {
      $tapeidinfo = shift(@emptyslottapes);
    }
    else {
      $tapeidinfo = $tapeid;
    }
    $y = "\$slotbtx$i";
    $x = "\$slotbtx$i->configure(-text => \$tapeid,
                -command => \[\\&Tape_info, \$tapeidinfo\])";
     eval($x);
  }
}
#######################################################################

#Called from the Imp/Exp button on the top level page.
sub ImpExp_sub {
  if(Exists($ImpExpf)) {
    $ImpExpf->destroy();
  }
  $ImpExpf = $mw->Toplevel();
  #$ImpExpf->geometry("590x400+25+500");
  $ImpExpf->geometry("590x440");
  $ImpExpf->title("Import/Export Ops for $hostdb");
  $ImpExpf->Button(
        -text => 'Close',
        -background => 'grey',
        -command => sub {$ImpExpf->destroy();},
        )->pack();

  if(!$interactive) {
    $msg = "\nSorry, you are not the interactive user. You cannot do Imp/Exp.";
    $ImpExpf->Label(-text => $msg, -font => 'arial 12 bold')->pack(@pl);
    return;
  }
  #Old LRU method no longer used. Now use group_table effective_date.
  #@torder = keys %Hofreplace;  #tapeid in LRU order

  #NEW for t50: replace Hofneed with Hofclosed
#  @needorder =  keys %Hofneed; #needed tapeid in order requested
#  $numneed = $#needorder+1;
#  if($numneed == 0) {
#    $ImpExpf->Label(-text => "No tapes needed\n", -font => 'arial 12 bold')->pack(@pl);
#    return;
#  }
  @closeorder =  keys %Hofclosed; #closed tapeid in order 
  $numneed = $#closeorder+1;
  if($numneed == 0) {
    $ImpExpf->Label(-text => "No closed tapes\n", -font => 'arial 12 bold')->pack(@pl);
    return;
  }
  if($drivebusy) {
    $msg = "\nSorry, you can not do Imp/Exp while a drive is busy.";
    $ImpExpf->Label(-text => $msg, -font => 'arial 12 bold')->pack(@pl);
    return;
  }
  if($numneed > $NUM_IMP_EXP_SLOTS) { 
    $numneed = $NUM_IMP_EXP_SLOTS;	#only this many slots in the door
  }
  #NOTE: expired tapes is old t120 stuff
  #Return expired tapeid's in @exptape
  #&get_exp_tapes;
  #$numexp = $#exptape+1;
  #if($numexp < $numneed) {
  #  $msg = "Only $numexp tapes have retention time expired. Needed $numneed\n";
  #  $ImpExpf->Label(-text => $msg, -font => 'arial 12 bold')->pack(@pl);
  #  $msg = "We will unload $numexp tapes. Change effective_date in DB to unload more tapes. \n";
  #  $ImpExpf->Label(-text => $msg, -font => 'arial 12 bold')->pack(@pl);
  #  $numneed = $numexp;
  #}
  $msg = "NOTE: We will unload $numneed tape(s). Click below to start unload of expired tapes\n";
  $ImpExpf->Label(-text =>$msg, -font => 'arial 12 bold')->pack(@pl);
  $ImpExpf->Button(
            -text => 'Start Expired Tape Unload',
            -background => 'red',
            -command =>  \&ImpExp_sub_unload,
            )->pack();
}

#Called when the "Start Expired Tape Unload" button (defined in ImpExp_sub) is hit.
sub ImpExp_sub_unload {
  if(Exists($ImpExpf)) {
    $ImpExpf->destroy();
  }
  $ImpExpf = $mw->Toplevel();
  #$ImpExpf->geometry("590x400+25+500");
  $ImpExpf->geometry("590x440+300+100");
  $ImpExpf->title("Import/Export Ops for $hostdb");
  $ImpExpf->Button(
        -text => 'Close',
        -background => 'grey',
        -command => sub {$ImpExpf->destroy();},
        )->pack();

    #touch file for tapearc not to run (NOTAPEARC)
    #Do a ps to see if a tapearc is already running.
    #If so, delete the NOTAPEARC file and give a msg no imp/exp now. 
    #if no tapearc running, continue. rm NOTAPEARC when done.
    `/bin/touch $NOTAPEARC`;
    @arctest = `ps -ef | grep "tapearc -v jsocdc"`;
    if($#arctest > 1) {		#don't count our sh and grep 
      `/bin/rm $NOTAPEARC`;
      $msg = "\nSorry, you can not do Imp/Exp while a tapearc is busy.";
      $ImpExpf->Label(-text => $msg, -font => 'arial 12 bold')->pack(@pl);
      return;
    }
 
    $ImpExpf->Label(-text=> "Unload of Expired Tapes In Progress (I will notify you when done)", 
		 -background=>'orange', -font => 'arial 12 bold')->pack(@pl);
    $ImpExpf->Label(-text => "Exit/Entry Slots in Door:", 
		 -font => 'arial 12 bold')->pack(@pl);
    #@txorder = @torder;	#old LRU stuff
    #@txorder = @exptape;	#old t120 stuff
    @txorder = @closeorder;
    @unloadids = ();
    $IE0 = $ImpExpf->Frame(-borderwidth => 0) ->pack(-side => 'left');
    $IE0->Label(-text => "Tapes to unload:", 
		-font => 'arial 12 bold')->pack(@pl);
    for($i=0; $i < $numneed; $i++) {
      $tpid = shift(@txorder);
      push(@unloadids, $tpid);
      delete($Hofreplace{$tpid});	#remove this tape from the hash
      $IE0->Label(-text => $tpid, 
		-background=>'orange', -font => 'arial 12 bold')->pack(@pl);
    }
    $f00 = $ImpExpf->Frame(-borderwidth => 3, -relief=>'groove')
  		->pack(-side => 'left');
    &show_notape_in_slots_impexp;	#show blank tape slots
#    $f00f = $ImpExpf->Frame(-borderwidth => 0) ->pack(-side => 'left');
#    $f00f->Label(-text => "(NOTE!! Only use this force button\nif tape already unloaded into door)", -font => 'arial 12 bold')->pack(@pl);
#    $f00f->Button(
#            -text => 'Force',
#            -background => 'red',
#            -command =>  \&Imp_Exp_Open_Door,
#            )->pack();
#
    $txt = "";
    while($arg=shift(@unloadids)) {
      $txt = $txt." $arg"; chomp($txt);
    }

      if($pid0 = fork) {
        #This is the parent. The child's pid is in $pid0
        print LOG "          \n";	#!!don't lose first few chars on line??
        print LOG "fork impexp start processing pid=$pid0 for impexp.\n";
      } elsif (defined $pid0) {     # $pid0 is zero here if defined. run impexp
        exec "impexp start $txt";
      }  else {
        #fork error
        $ImpExpf->Label(-text => "Fatal Error: Can't fork", -font => 'arial 12 bold')->pack(@pl);
        print "!!Fatal Error: Can't fork: $!\n";
      }
}

#Called when start moving the tapes from the EE slots to the operational
#slots.
sub ImpExp_sub_t50_reload {
  if(Exists($ImpExpf)) {
    $ImpExpf->destroy();
  }
  $ImpExpf = $mw->Toplevel();
  #$ImpExpf->geometry("590x400+25+500");
  $ImpExpf->geometry("590x440+300+100");
  $ImpExpf->title("Import/Export New Tapes Ops for $hostdb");
  $ImpExpf->Button(
        -text => 'Close',
        -background => 'grey',
        -command => sub {$ImpExpf->destroy();},
        )->pack();

  $ImpExpf->Label(-text=> "The new blank tapes will now be put into the operational slots", 
		 -font => 'arial 12 bold')->pack(@pl);
    $ImpExpf->Label(-text => "Exit/Entry Slots in Door:", 
		 -font => 'arial 12 bold')->pack(@pl);
    #@txorder = @torder;	#old LRU stuff
    #@txorder = @exptape;	#old t120 stuff
    @txorder = @closeorder;
    @unloadids = ();
    $f00 = $ImpExpf->Frame(-borderwidth => 3, -relief=>'groove')
  		->pack(-side => 'left');
    &show_notape_in_slots_impexp;	#show blank tape slots
}

#Called from log_update() when Rb:doorcomplete occurs.
#The Expired tapes have been put into the imp/exp door and we are now ready to
#open the door and remove the old tapes and put in the new required tapes
#and do a bulk load to load the new tapes into the live slots.
sub Imp_Exp_Open_Door {
  if(Exists($ImpExpf)) {
    $ImpExpf->destroy();
  }
  $ImpExpf = $mw->Toplevel();
  #$ImpExpf->geometry("590x400+25+500");
  $ImpExpf->geometry("490x480");
  $ImpExpf->title("Import/Export Ops for $hostdb");
  $ImpExpf->Button(
        -text => 'Close',
        -background => 'grey',
        -command => sub {$ImpExpf->destroy();},
        )->pack();
  #reset the command sub on the Imp/Exp button on the main page to come here
  $b0->configure(-text => $b0text, -background => 'yellow',
		-command =>  \&Imp_Exp_Open_Door,); 
  $ImpExpf->Label(-text => "NOTE: Expired tapes have been unloaded.", 
		-font => 'arial 12 bold')->pack(@pl);
  $ImpExpf->Label(-text => "Now complete each step in the order given:", 
		-font => 'arial 12 bold')->pack(@pl);
  $ImpExpf->Label(-text => "Go to the t50 console and hit: Menu - Import/Export", 
		-background=>'orange', -font => 'arial 12 bold')->pack(@pl);
  $ImpExpf->Label(-text => "Under Entry/Exit hit: >>Export/Exchange", 
		-background=>'orange', -font => 'arial 12 bold')->pack(@pl);
  $ImpExpf->Label(-text=>"The door will open and now remove the magazine.", 
		-background=>'orange', -font => 'arial 12 bold')->pack(@pl);
  @xneedorder = @closeorder;
  $numneed = $#closeorder+1;
  $EEcnt_new = 0;
  if($numneed > $NUM_IMP_EXP_SLOTS) { 
    $EEcnt_new = $numneed - $NUM_IMP_EXP_SLOTS;
    $numneed = $NUM_IMP_EXP_SLOTS;	#only this many slots in the door
  }
  for($i=0; $i < $numneed; $i++) {
    $tid = shift(@xneedorder);
    delete($Hofclosed{$tid});	#remove this tape as needed from the hash
  }
  $ImpExpf->Label(-text=>"Remove the expired tapes from the magazine", 
		-background=>'orange', -font => 'arial 12 bold')->pack(@pl);
  $ImpExpf->Label(-text=>"and insert the same number of blank tapes.", 
		-background=>'orange', -font => 'arial 12 bold')->pack(@pl);
  $ImpExpf->Label(-text=>"Insert the magazine back into the door.", 
		-background=>'orange', -font => 'arial 12 bold')->pack(@pl);
  $ImpExpf->Label(-text=>"Hit: Stop Exporting. The door will close.", 
		-background=>'orange', -font => 'arial 12 bold')->pack(@pl);
  $msg = "Now hit the New Tape Load Done button below:\n";
  $ImpExpf->Label(-text => $msg, 
		-background=>'orange', -font => 'arial 12 bold')->pack(@pl);
  $msg = "(NOTE: when hit below, there will be a delay for a new inventory)\n";
  $ImpExpf->Label(-text => $msg, 
		-font => 'arial 12 bold')->pack(@pl);
  $ImpExpf->Button(
        -text => 'New Tape Load Done',
        -background => 'red',
        -command => \&Bulk_Load_Done,
        )->pack();
}

#Called from Imp_Exp_Open_Door() button "New Tape Load Done". The operator has
#indicated that the needed tapes have been loaded into the live slots and
#were ready to take a new inventory and resume normal operations.
sub Bulk_Load_Done {
  @needorder = ();
  $EEcnt = $EEcnt_new;
  $b0text = "Imp/Exp\n$EEcnt";
  if($EEcnt == 0) { $ecolor = 'grey'; }
  else { $ecolor = 'yellow'; }
  $b0->configure(-text => $b0text, -background => $ecolor,
		-command =>  \&ImpExp_sub,); 
  $txt = "";
  while($arg=shift(@unloadids)) {
    $txt = $txt." $arg"; chomp($txt);
  }
  if($pid0 = fork) {
    #This is the parent. The child's pid is in $pid0
    print LOG "          \n";	#!!don't lose first few chars on line??
    print LOG "fork impexp stop processing pid=$pid0 for impexp.\n";
  } elsif (defined $pid0) {     # $pid0 is zero here if defined. run impexp
    exec "impexp stop $txt";
  }  else {
    #fork error
    print "!!Error: Can't fork: $!\n";
  }
  sleep 5;			#allow impexp to run
  if(Exists($ImpExpf)) {
    $ImpExpf->destroy();
  }
  &show_tape_in_slots;
}

#Get tapes that are past the effective_date for their group, as defined in the
#sum_group table in ascending effective_date order.
#Return the tapeid's in @exptape.
sub get_exp_tapes{
  @exptape = ();
  $sqlcmd = "select * from sum_group order by effective_date";
  #print "sqlcmd is: $sqlcmd\n\n"; #!!TEMP
  $sth = $dbh->prepare($sqlcmd);
  if ( !defined $sth ) {
    print "Cannot prepare statement: $DBI::errstr\n";
    system "/bin/rm $runtag";
    exit;
  }
  # Execute the statement at the database level
  $sth->execute;
  $date = &get_effdate;
  while(@group_table = $sth->fetchrow()) { #get row from the DB
    if($group_table[2] lt $date) {	#this has expired
      $grp = $group_table[0];
      #print "group=$grp, retain=$group_table[1], eff=$group_table[2]\n";#!!TEMP
      $sqlcmd = "select tapeid from sum_tape where group_id=$grp";
      #print "sqlcmd is: $sqlcmd\n\n"; #!!TEMP
      $sth2 = $dbh->prepare($sqlcmd);
      if ( !defined $sth2 ) {
        print "Cannot prepare statement: $DBI::errstr\n";
        system "/bin/rm $runtag";
        exit;
      }
      # Execute the statement at the database level
      $sth2->execute;
      while(@efftape = $sth2->fetchrow()) { #get row from the DB
        print "efftape = @efftape[0]\n"; #!!TEMP
        push(@exptape, @efftape[0]);
      }
    }
  }
}

#Return effective date of now as yyyymmddhhmm
sub get_effdate {
  local($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst,$date,$sec2,$min2,$hour2,$mday2);
  ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
  $min2 = sprintf("%02d", $min);
  $hour2 = sprintf("%02d", $hour);
  $mday2 = sprintf("%02d", $mday);
  $mon2 = sprintf("%02d", $mon+1);
  $year4 = sprintf("%04d", $year+1900);
  $date = "$year4"."$mon2"."$mday2"."$hour2"."$min2";
  return($date);
}

#Return date in form for a label e.g. 1998.01.07_14:42:00
sub labeldate {
  local($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst,$date,$sec2,$min2,$hour2,$mday2);
  ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
  $sec2 = sprintf("%02d", $sec);
  $min2 = sprintf("%02d", $min);
  $hour2 = sprintf("%02d", $hour);
  $mday2 = sprintf("%02d", $mday);
  $mon2 = sprintf("%02d", $mon+1);
  $year4 = sprintf("%04d", $year+1900);
  $date = $year4.".".$mon2.".".$mday2._.$hour2.":".$min2.":".$sec2;
  return($date);
}

#Return time in form for a label e.g. 14:42:00
sub labeltime {
  my $d = &labeldate;
  my $pos = index($d, '_');
  my $t = substr($d, $pos+1);
  return($t);
}

sub Tape_info {
  my($tapeid) = @_;
  chop($tapeid); chop($tapeid); #elim 2 extra spaces
  if(Exists($statf)) {
    $statf->destroy();
  }
  $statf = $mw->Toplevel();
  $statf->geometry("400x200-10-500");
  $statf->title("tape info");
  $txt = "Query of SUM_TAPE_TABLE";
  $statf->Label(-text => "$txt", -font => 'arial 18 bold')->pack();
  $statf->Button(
        -text => 'Close',
        -background => 'grey',
        -command => sub {$statf->destroy();},
        )->pack();
  $textlog = $statf->Scrolled("Text")->pack();
  $sqlcmd = "select TAPEID,NXTWRTFN,SPARE,GROUP_ID,AVAIL_BLOCKS,CLOSED,TO_CHAR(LAST_WRITE, 'dd/MON/yyyy_hh24:mi:ss') from sum_tape where tapeid = \'$tapeid\'";
  #$sqlcmd = "select TAPEID,NXTWRTFN,SPARE,GROUP_ID,AVAIL_BLOCKS,CLOSED,LAST_WRITE from sum_tape where tapeid = \'$tapeid\'";
  #print "sqlcmd is: $sqlcmd\n\n"; #!!TEMP
  $sth = $dbh->prepare($sqlcmd);
  if ( !defined $sth ) {
    print "Cannot prepare statement: $DBI::errstr\n";
    system "/bin/rm $runtag";
    exit;
  }
  # Execute the statement at the database level
  $sth->execute;
  $found = 0;
  while(@data_tape = $sth->fetchrow()) { #get row from the DB
    $found = 1;
    $textlog->insert('end', "Tapeid = $data_tape[0]\n");
    $textlog->insert('end', "Next_Write_File_Number = $data_tape[1]\n");
    $textlog->insert('end', "Spare = $data_tape[2]\n");
    $textlog->insert('end', "Group_Id = $data_tape[3]\n");
    $x = commify($data_tape[4]);
    $textlog->insert('end', "Avail_Blocks = $x\n");
    $textlog->insert('end', "Closed = $data_tape[5]\n");
    $textlog->insert('end', "Last_Write = $data_tape[6]\n");
  }
  if(!$found) {
    $textlog->insert('end', "tapeid = $tapeid not found\n");
  }
  $textlog->see('end');
  $sth->finish;
}

sub Mt_stat {
  my ($drnum) = @_;
  if(Exists($statf)) {
    $statf->destroy();
    close(LOGSTAT);
  }
  $statf = $mw->Toplevel();
  $statf->geometry("400x200-10-500");
  $statf->title("mt");
  $cmd = "mt -f /dev/nst$drnum status";
  $statf->Label(-text => "$cmd", -font => 'arial 18 bold')->pack();
  $statf->Button(
        -text => 'Close',
        -background => 'grey',
        -command => sub {$statf->destroy();},
        )->pack();
  $textlog = $statf->Scrolled("Text")->pack();
  $statlog = "/tmp/Mt_stat.$user.log";
  `$cmd 1> $statlog 2>&1`;
#  $cmd = "mt -f /dev/nst$drnum tell";
#  `$cmd 1>> $statlog 2>&1`;
  if(!open(LOGSTAT, $statlog)) { 
    print "Can't open $statlog: $!\n";
    system "/bin/rm $runtag";
    exit;
  }
  while(<LOGSTAT>) {
    if(/^^File number=/) {
      if(!/^File number=-1/) {	# a tell cmd will hang if drive empty 
        $cmd = "mt -f /dev/nst$drnum tell";
        `$cmd 1>> $statlog 2>&1`;
      }
    }
    $textlog->insert('end', $_);
  }
  $textlog->see('end');
  close(LOGSTAT);
}

sub Exit_sub {
  $dbh->disconnect();
  if($pid0) {			#kill off our child
    `kill $pid0`;
  }
  system "/bin/rm $runtag";
  exit;
}

sub Clean_sub {
  if(Exists($cleanf)) {
    $cleanf->destroy();
  }
  $cleanf = $mw->Toplevel();
  #$statf->geometry("400x200-10-500");
  $cleanf->geometry("300x150");
  $cleanf->title("tape clean");
  $txt = "Cleaning tape in slot $CLEANSLOT\nOk to proceed?";
  $cleanf->Label(-text => "$txt", -font => 'arial 16')->pack();
  if(!$interactive) {
    $txt = "\nError: you must be the\ninteractive user to clean";
    $cleanf->Label(-text => "$txt", -font => 'arial 16')->pack();
    $cleanf->Button(
        -text => 'Close',
        -background => 'grey',
        -command => sub {$cleanf->destroy();},
        )->pack();
  }
  else {
    $cleanf->Button(
        -text => 'OK',
        -background => 'grey',
        -command => \&Clean_ok_sub,
        )->pack(-pady => 10);
    $cleanf->Button(
        -text => 'Cancel',
        -background => 'grey',
        -command => sub {$cleanf->destroy();},
        )->pack();
  }
}

sub Clean_ok_sub {
  if(Exists($cleanf)) {
    $cleanf->destroy();
  }
  $cleanf = $mw->Toplevel();
  $cleanf->geometry("300x150");
  $cleanf->title("tape clean ok");
  if($drivebusy) {
    $txt = "\nError: you cannot do cleaning\nwhile the drive is busy";
    $cleanf->Label(-text => "$txt", -font => 'arial 16')->pack();
    $cleanf->Button(
        -text => 'Close',
        -background => 'grey',
        -command => sub {$cleanf->destroy();},
        )->pack();
    return;
  }
  $drivebusy = 1;		#make sure reset when CleaningDone
  $txt = "Clean drive 0 in progress...";
  $cleanf->Label(-text => "$txt", -font => 'arial 16', -background => 'lightsalmon')->pack(-pady=>20);
  $cleanf->Button(
        -text => 'Close',
        -background => 'grey',
        -command => sub {$cleanf->destroy();},
        )->pack();
  $txt = "$CLEANSLOT $CLEANDRIVE";
    if($pid0 = fork) {
      #This is the parent. The child's pid is in $pid0
      print LOG "          \n";	#!!don't lose first few chars on line??
      print LOG "fork impexp start processing pid=$pid0 for impexp clean.\n";
    } elsif (defined $pid0) {     # $pid0 is zero here if defined. run impexp
      exec "impexp clean $txt";
    }  else {
      #fork error
      $cleanf->Label(-text => "Fatal Error: Can't fork", -font => 'arial 12 bold')->pack(@pl);
      print "!!Fatal Error: Can't fork: $!\n";
      return;
    }
}

sub commify {
    my $text = reverse $_[0];
    $text =~ s/(\d\d\d)(?=\d)(?!\d*\.)/$1,/g;
    return scalar reverse $text;
}


