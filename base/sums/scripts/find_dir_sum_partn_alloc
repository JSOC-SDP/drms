eval 'exec /home/jsoc/bin/$JSOC_MACHINE/perl -S $0 "$@"'
    if 0;

#/home/production/cvs/jsoc/scripts/sum/find_dir_sum_partn_alloc
#
#Usage: find_dir_sum_partn_alloc /SUMn
#
#NOTICE: Runs on the database for the $DB defined below.
#
#For the given /SUMn partition, tries to find an entry in sum_partn_alloc that 
#has an online_loc like /SUMn/Duid/ for each Duid it sees. 
#Print out all /SUMn/Duid that don't have a partn_alloc entry. 
#These are eligible for delete. But you must check the last entries to
#make sure that they are not just newly opened and don't have a 
#sum_partn_alloc entry yet. This won't occure if you run this script when
#the sum_svc is not running.
#
use DBI;

$| = 1;			#flush output as we go
$DB = jsoc_sums;
$HOSTDB = "hmidb";      #host where DB runs
#$ENV{'PGPORT'} = "5434";
if(!($PGPORT = $ENV{'SUMPGPORT'})) {
  print "You must have ENV SUMPGPORT set to the port number, e.g. 5430\n";
  exit;
}

if($#ARGV != 0) {
  print "Usage: $0 /SUMn\n";
  exit(1);
}
print "Working...\n";
$SUM = $ARGV[0];
$UID = $<;		#get real user id
$hostdb = $HOSTDB;      #host where Postgres runs
$user = $ENV{'USER'};
$cntquery = 0;
$outls = "/tmp/find_dir_sum_partn_alloc_ls_$UID.log";
$sqltmp = "/tmp/find_dir_sum_partn_alloc_sql_$UID.log";
if(-e $outls) {		#this user already running
  print "Already found a $outls\n";
  print "Only one instance of find_dir_sum_partn_alloc allowed for a user\n";
  print "If not so do: /bin/rm $outls\n";
  exit(1);
}

#First connect to database
  $dbh = DBI->connect("dbi:Pg:dbname=$DB;host=$hostdb;port=$PGPORT", "$user", "$password");
  if ( !defined $dbh ) {
    die "Cannot do \$dbh->connect: $DBI::errstr\n";
  }

$cmd = "/bin/ls $SUM";
if(system "$cmd 1> $outls 2>&1") {
  print "Failed: $cmd\n";
  system "/bin/rm $outls";
  $dbh->disconnect();
  exit(1);
}

open(OUTLS, $outls) || die "Can't open $outls: $!\n";
while(<OUTLS>) {
  if(/^D/) {
    chop($_);
    $dir = "$SUM/$_";
    if($dir eq '/SUM0/D000') { next; } #skip special dir for DB jim
    $origD = $_;
    $found = 0;
    @subdirs = `/bin/ls $dir`;
    while($_ = shift(@subdirs)) {	#will be all dirs if D subdir
      chomp($_);
      if(-d "$dir/$_") {	#if D subdir then this has the ds_index
        if(/^D/) {		#and next char must be a number
          $z = substr($_, 1, 1);
          if($z =~ /^[0-9]/) {
            $dsindex = substr($_, 1);
            push(@hitlist, $dsindex);
            $found = 1;
          }
        }
      }
    }
    if(!$found) {	#no D subdir use the current dir for ds_index
      $dsindex = substr($origD, 1);
      push(@hitlist, $dsindex);
    }

    #print "\n";			#!!TEMP test stuff
    #while($x = shift(@hitlist)) {
    #  print "$x\n";
    #}
    #next;

  while($dsindex = shift(@hitlist)) {
      $sqlcmd = "select ds_index from sum_partn_alloc where ds_index=$dsindex";
      $sth = $dbh->prepare($sqlcmd);
      if ( !defined $sth ) {
        print "Cannot prepare statement: $DBI::errstr\n";
        system "/bin/rm $outls";
        $dbh->disconnect();
        exit;
      }
      # Execute the statement at the database level
      $sth->execute;
      $cntquery++;
      $found = 0;
      while(@xx = $sth->fetchrow()) { #get row from the DB
        #print "@xx\n"; #!!!TEMP
        $found++;
      }
      if(!$found) { 
        print "No sum_partn_alloc: $dir\n";
        $sqlcmd = "update sum_main set online_status='N' where ds_index=$dsindex";
        $sth = $dbh->prepare($sqlcmd);
        if ( !defined $sth ) {
          print "Cannot prepare statement: $DBI::errstr\n";
          system "/bin/rm $outls";
          $dbh->disconnect();
          exit;
        }
        # Execute the statement at the database level
        $sth->execute;
      }
    }
  }
}
close(OUTLS);
print "Total queries = $cntquery\n";
system "/bin/rm $outls";
$dbh->disconnect();
exit(0);
