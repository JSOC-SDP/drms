#!/usr/bin/perl
#
#/home/production/cvs/JSOC/base/sums/scripts/t950view
#Perl/Tk gui for use with tape_svc for Spectra-Logic T950.
#
#Usage: t950view [-h] [-p] [-i] [-llog_file] [-Hdbhost] [DB]
# -h = help. Show this usage message.
# -p = playback mode (vs. real-time mode)
# -i = interactive mode. you can do imp/exp of tapes. mutually exclusive
#      with -p mdoe. The interactive mode requires a password.
# -lfile = the name of the tape_svc log file. The default log_file is the 
#          latest copy of  /usr/local/logs/SUM/tape_svc_(pid).log
# -Hdbhost = host name where the db is running. default is hmidb
#  DB = database name to connect to. Default is hmidbX.
#
#Reads the log file and updates the display from the directive lines that
#are in the log file. The log file is written by tape_svc, drive[n]_svc,
#and robot[n]_svc. These programs and this gui are therefore strongly
#coupled!
#
use Tk;
use Tie::IxHash;
use DBI;
use Term::ReadKey;
use FindBin qw($RealBin);
use lib "$RealBin/../../../localization";
use drmsparams;

sub usage {
  print "Usage: t950view [-h] [-p] [-i] [-llog_file] [-Hdbhost] [DB]\n";
  print "  -h = help. Show this usage message.\n";
  print "  -p = playback mode (vs. real-time mode)\n";
  print "  -i = interactive mode. you can do imp/exp of tapes. mutually exclusive\n";
  print "       with -p mdoe. The interactive mode requires a password.\n";
  print "  -lfile = the name of the tape_svc log file. The default log_file is the\n";
  print "           latest copy of  /usr/local/logs/SUM/tape_svc_(pid).log\n";
  print "  -Hdbhost = host name where the db is running. default is hmidb\n";
  print "   DB = database name to connect to. Default is $DEFAULTDB.\n";
  exit;
}


%Hofrdq = ();		#hash key is ds_index
%Hofwtq = ();		#hash key is ds_index
%Hofreplace = ();	#key is tapeid. tape replaced in input order
%Hofneed = ();		#key is tapeid. tape imported in input order
%Hofslotused = ();		#key is external slot# in use for cleaning
tie %Hofrdq, "Tie::IxHash"; #lets you take out keys in input order
tie %Hofwtq, "Tie::IxHash"; #lets you take out keys in input order
tie %Hofreplace, "Tie::IxHash"; #lets you take out keys in input order
tie %Hofneed, "Tie::IxHash"; #lets you take out keys in input order
@emptyslottapes = ();

#NOTE: must have our full path name here for any restart signaled by sum_svc
$OURPATH = "/home/production/cvs/JSOC/base/sums/scripts/t950view"; #!!this program

#$TAPEHOST = "d02.Stanford.EDU";	#machine where tape_svc log file is
$TAPEHOST = "k1.stanford.edu";	#machine where tape_svc log file is
$DEFAULTDB = "hmidbX";		#default DB
$HOSTDB = drmsparams::SUMS_DB_HOST;		#host where DB runs
$NOTAPEARC = "/usr/local/logs/soc/NOTAPEARC";
$IMGDIR = "/home/jsoc/gallery"; #dir with the .gif files
$INLOG = 0;			#use default tape_svc log
$LOPENED = 0;			#log file not opened yet
#$login = "dsowner";
$pid0 = 0;

$FIRST_EXP_SLOT = 2201;
$LAST_EXP_SLOT = 2240;
$MAX_SLOTS_PAGE = 200;
#$MAX_SLOTS = 2200;
$MAX_SLOTS = 2190;
$NUM_IMP_EXP_SLOTS = 50;
$MAX_Q_ENTIRES = 5;
$MAX_PAGE_NUM = 10;
$MAX_DRIVES = 12;
$EEcnt = 0;
$current_page = 0;
$ldate = &labeldate();
$user = $ENV{'USER'};

$host = $ENV{'HOST'};
if($host ne $TAPEHOST) {
  print "Error: This must be run on $TAPEHOST\n";
  exit;
}

while ($ARGV[0] =~ /^-/) {
  $_ = shift;
  if (/^-l(.*)/) {
    $INLOG = $1;
  }
  elsif (/^-p(.*)/) {
    $playback = 1;
  }
  elsif (/^-H(.*)/) {
    $HOSTDB = $1;
  }
  elsif (/^-h(.*)/) {
    $helpflg = 1;
  }
  elsif (/^-i(.*)/) {
    $interactive = 1;
  }
  elsif (/^-r(.*)/) {
    $restartmode = 1;
  }
  else {
    &usage;
  }
}
if($#ARGV == 0) {
  $DB = $ARGV[0];
}
else {
  $DB = $DEFAULTDB; 
}
if($helpflg) { &usage; }
if($playback && $interactive) {
  print "Playback and interactive are mutually exclusive.\n";
  &usage;
}
#$ENV{'TNS_ADMIN'} = "/home/soi/CM/src/oracle/setup"; #!!TBD fix
#$ENV{'ORACLE_SID'} = $DB;
#$ENV{'TWO_TASK'} = $DB;
#$user = "jim";
#if($DB eq "jsoc_sums") {
#  $ENV{'PGPORT'} = "5434";      #jsoc_sums db uses non-default PGPORT
#}
if(!($PGPORT = $ENV{'SUMPGPORT'})) {
  print "You must have ENV SUMPGPORT set to the port number, e.g. 5430\n";
  exit;
}

$hostdb = $HOSTDB;      #host where Postgres runs
$UID = $<;              #get real user id
#$HOME = $ENV{'HOME'};

$runtag = "/tmp/t950view_$UID.tag";
if(-e $runtag) {        #this user already running
  print "Already found a $runtag\n";
  print "Only one instance of t950view allowed for a user\n";
  print "If not so do:\n/bin/rm $runtag\n";
  exit(1);
}

@pst950 = `ps -ef | grep sum_svc`;
#@sumsvc = grep(/hmidb/, @pst950);
#if($line = shift(@sumsvc)) {
while($line = shift(@pst950)) {
  ($x, $sumdb) = split(/sum_svc /, $line); 
  if($sumdb) {
    chomp($sumdb);
    if($sumdb =~ /-s/) {
      ($x, $sumdb) = split(/ /, $sumdb); #ignore any sim -s flag
    }
    if($sumdb ne $DB) {
      print "t950view db=$DB does not match running sum_svc=$sumdb\n";
      exit;
    }
    last;
  }    
}
#if($sumdb ne $DB) {
#  print "t950view db=$DB does not match that of the running sum_svc=$sumdb\n";
#  exit;
#}

if($interactive && !$restartmode) {
  if($user ne "production") {
    print "You must be user production to run t950view in interactive mode\n";
    exit;
  }
#  print "Need password to run interactive mode: passwd =";
#  ReadMode('noecho');
#  $passwd = ReadLine(0);
#  chomp($passwd);
#  ReadMode('normal');
#  print "\n";
#  if($passwd ne <password>) {
#    print "Invalid passwd\n";
#    print "!!TEMP Continue for now...\n";
#    #exit(1);
#  }
}
$ext = "$user"."_$ldate";
$log = "/usr/local/logs/SUM/t950view_$ext.log";
open(LOG, ">$log") || die "Can't open $log: $!\n";
select(LOG); $| = 1; select(STDOUT);	#make unbuffered
print LOG "$ldate $log\n\n";
my(@pl) = qw/-side top -anchor nw/;
my(@pl1) = qw/-side top/;
my(@pl2) = qw/-side top -pady 1.0m/;
my(@pl3) = qw/-side left/;
@drivebusy = ();
for($i=0; $i < $MAX_DRIVES; $i++) {
  $drivebusy[$i] = 0;
}

#First connect to database
  #$dbh = DBI->connect( '', "$login", "$passw", 'Oracle' );
  $dbh = DBI->connect("dbi:Pg:dbname=$DB;host=$hostdb;port=$PGPORT", "$user", "");
  if ( !defined $dbh ) {
    die "Cannot do \$dbh->connect: $DBI::errstr\n";
  }

system "touch $runtag";		#offically started running now

####!!!TEMP for testing
#&get_exp_tapes; #!!!TEMP
#print "exptapes = @exptape\n";
#$expnum = $#exptape+1;
#print "num of exptape = $expnum\n";
$date = &get_effdate;
print "effdate = $date\n";

  $mw = MainWindow->new;
  $tframe = $mw->Frame(-borderwidth => 1)->pack(-side => 'top');
  $tframe->Label(-text => "T950 User Interface (tui) for db=$DB on $HOSTDB",
	-font => 'arial 14 bold', -padx => 90)->pack(-side => 'left');
  $tframe->Label(-text => 'tapeid:')
        ->pack(-side => 'left');
  $tframe->Entry(-textvariable => \$idfind, -width => 10, 
	-font=>'courier 8 bold',
        -validate => 'key', -validatecommand => \&Id_ck)
        ->pack(-side=>'left');
  $tframe->Button(-text => "Find", -font=>'courier 8 bold', 
	-command => \&Id_go,)
        ->pack(-side=> 'left');


  $image = $tframe->Photo(-file => "$IMGDIR/arrow04.gif");
  $tframe->Button(-command => \&Previous, -image => $image)
        ->pack(-side=> 'left');
  $bpgtext = "Pg#$current_page";
  $bpg = $tframe->Button(
        -text => $bpgtext,
        -background => 'grey',
        -command =>  \&Page_sub, 
        );
  $bpg->pack(-side=> 'left', -pady => 0, -padx => 0);
  $image = $tframe->Photo(-file => "$IMGDIR/arrow05.gif");
  $tframe->Button(-command => \&Next, -image => $image)
        ->pack(-side=> 'left', -padx => 0);

  $b0text = "Imp/Exp\n$EEcnt";
  $b0 = $tframe->Button(
        -text => $b0text,
        -background => 'grey',
        -command =>  \&ImpExp_sub, 
        );
  $b0->pack(-side=> 'left', -pady => 0, -padx => 20);
  $b1text = "Start\nCleaning";
  $b1 = $tframe->Button(
        -text => $b1text,
        -background => 'lightsalmon',
        -command => \&Clean_sub,
        );
  $b1->pack(-side=> 'left', -padx => 10);
  $b2text = "Export\nclosed tapes";
  $b2 = $tframe->Button(
        -text => $b2text,
        -background => 'lightyellow',
        -command =>  \&Exptlm_sub, 
        );
  $b2->pack(-side=> 'left', -pady => 0, -padx => 20);
  $b = $tframe->Button(
        -text => 'Exit',
        -background => 'red',
        -command => \&Exit_sub,
        );
  $b->pack(-side=> 'left', -padx => 20, -pady => 0);

  #$mw->Photo('image2', -file => 'GRAD_BLUE_LINE.gif');
  #$mw->Label(-image => 'image2')->pack(@pl2);
  #$mw->Label(-text => 'Slot#    Tape_id', -font => 'arial 12 bold')->pack(@pl);
  $f0 = $mw->Frame(-borderwidth => 2, -relief=>'groove')
		->pack(-side => 'left', -ipadx=>20, -ipady=>20);
  #need frame within a frame so can destroy it and still have a frame
  $f0x = $f0->Frame(-borderwidth => 0)
		->pack(-side => 'left');
  if($INLOG) {
    $tapelog = $INLOG;
  }
  else {
    $tapelog = `ls -t /usr/local/logs/SUM/tape_svc*.log | sed -n 1p`;
    chomp $tapelog;
  }
  if(!-e $tapelog) {
    print "ERROR: No such log file $tapelog\n";
    system "/bin/rm $runtag";
    exit;
  }
  &show_notape_in_slots(0);	#show blank tape slots

  $d0tape = "-------------";
  $d1tape = "-------------";
  $d2tape = "-------------";
  $d3tape = "-------------";
  $d4tape = "-------------";
  $d5tape = "-------------";
  $d6tape = "-------------";
  $d7tape = "-------------";
  $d8tape = "-------------";
  $d9tape = "-------------";
  $d10tape = "-------------";
  $d11tape = "-------------";

  my $fop = $mw->Frame(-borderwidth => 0, -relief=>'flat')
                ->pack(-side => 'top', -pady=>5);
  my $lopa = $fop->Label(-text => 'Operation colors: ', -anchor => 'w',
		-background=>'grey')->pack(-side=> 'left');
  my $lopb = $fop->Label(-text => ' robot ', -anchor => 'w',
		-background=>'yellow')->pack(-side=> 'left');
  my $lopc = $fop->Label(-text => 'tape read', -anchor => 'w',
		-background=>'green')->pack(-side=> 'left');
  my $lopd = $fop->Label(-text => 'tape write', -anchor => 'w',
		-background=>'lightblue')->pack(-side=> 'left');
  my $lope = $fop->Label(-text => ' tape find ', -anchor => 'w',
		-background=>'darkorange')->pack(-side=> 'left');
  my $lopf = $fop->Label(-text => 'drive clean', -anchor => 'w',
                -background=>'lightsalmon')->pack(-side=> 'left');

  #drive #0 & 1
  my $f1 = $mw->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'top', -pady=>10);
  my $f11 = $f1->Frame(-borderwidth => 3, -relief=>'groove', 
		-background=>'white')
		->pack(-side => 'left');
  my $f12 = $f1->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $f13 = $f1->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $l11 = $f11->Label(-text => 'Drive 0', -anchor => 'w',
		-background=>'white') ->pack(-side=> 'top');
  $b_drv0 = $f11->Button( -text => $d0tape, -background => 'grey',
		-relief => 'sunken', -command => [\&Mt_stat, 0],)
		->pack(-side=> 'top', -pady => 10);

  my $f1x = $f1->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left', -padx=>40);
  my $f111 = $f1->Frame(-borderwidth => 3, -relief=>'groove', 
		-background=>'white')
		->pack(-side => 'left', -padx => 60);
  my $f121 = $f1->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $f131 = $f1->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $l111 = $f111->Label(-text => 'Drive 1', -anchor => 'w',
		-background=>'white') ->pack(-side=> 'top');
  $b_drv1 = $f111->Button( -text => $d1tape, -background => 'grey',
		-relief => 'sunken', -command => [\&Mt_stat, 1],)
		->pack(-side=> 'top', -pady => 10);

  my $fcmd0 = $mw->Frame(-borderwidth => 0, -relief=>'flat')
                ->pack(-side => 'top', -pady=>0);
  my $lcmd0 = $fcmd0->Label(-text => 'cmd:', -anchor => 'w')
		->pack(-side=> 'left', -pady=>0);
  my $tcmd0 = $fcmd0->Scrolled("Text", -scrollbars=> "e", 
		qw/-width 30 -height 0/) ->pack(-side=>'left', -padx => 10);
  $tcmd0->insert('end', "this will be Drive 0 cmds\n");
  $tcmd0->bindtags(undef);
  my $tcmd1 = $fcmd0->Scrolled("Text", -scrollbars=> "e", 
		qw/-width 30 -height 0/) ->pack(-side=>'left');
  $tcmd1->insert('end', "this will be Drive 1 cmds\n");
  $tcmd1->bindtags(undef);

  #drive #2 & 3
  my $f2 = $mw->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'top', -pady=>10);
  my $f21 = $f2->Frame(-borderwidth => 3, -relief=>'groove', 
		-background=>'white')
		->pack(-side => 'left');
  my $f22 = $f2->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $f23 = $f2->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $l21 = $f21->Label(-text => 'Drive 2', -anchor => 'w',
		-background=>'white') ->pack(-side=> 'top');
  $b_drv2 = $f21->Button( -text => $d2tape, -background => 'grey',
		-relief => 'sunken', -command => [\&Mt_stat, 2],)
		->pack(-side=> 'top', -pady => 10);

  my $f2x = $f2->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left', -padx=>40);
  my $f211 = $f2->Frame(-borderwidth => 3, -relief=>'groove', 
		-background=>'white')
		->pack(-side => 'left', -padx => 60);
  my $f221 = $f2->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $f231 = $f2->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $l211 = $f211->Label(-text => 'Drive 3', -anchor => 'w',
		-background=>'white') ->pack(-side=> 'top');
  $b_drv3 = $f211->Button( -text => $d3tape, -background => 'grey',
		-relief => 'sunken', -command => [\&Mt_stat, 3],)
		->pack(-side=> 'top', -pady => 10);

  my $fcmd2 = $mw->Frame(-borderwidth => 0, -relief=>'flat')
                ->pack(-side => 'top', -pady=>0);
  my $lcmd2 = $fcmd2->Label(-text => 'cmd:', -anchor => 'w')
		->pack(-side=> 'left', -pady=>0);
  my $tcmd2 = $fcmd2->Scrolled("Text", -scrollbars=> "e", 
		qw/-width 30 -height 0/) ->pack(-side=>'left', -padx => 10);
  $tcmd2->insert('end', "this will be Drive 2 cmds\n");
  $tcmd2->bindtags(undef);
  my $tcmd3 = $fcmd2->Scrolled("Text", -scrollbars=> "e", 
		qw/-width 30 -height 0/) ->pack(-side=>'left');
  $tcmd3->insert('end', "this will be Drive 3 cmds\n");
  $tcmd3->bindtags(undef);

  #drive #4 & 5
  my $f3 = $mw->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'top', -pady=>10);
  my $f31 = $f3->Frame(-borderwidth => 3, -relief=>'groove', 
		-background=>'white')
		->pack(-side => 'left');
  my $f32 = $f3->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $f33 = $f3->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $l31 = $f31->Label(-text => 'Drive 4', -anchor => 'w',
		-background=>'white') ->pack(-side=> 'top');
  $b_drv4 = $f31->Button( -text => $d4tape, -background => 'grey',
		-relief => 'sunken', -command => [\&Mt_stat, 4],)
		->pack(-side=> 'top', -pady => 10);

  my $f3x = $f3->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left', -padx=>40);
  my $f311 = $f3->Frame(-borderwidth => 3, -relief=>'groove', 
		-background=>'white')
		->pack(-side => 'left', -padx => 60);
  my $f321 = $f3->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $f331 = $f3->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $l311 = $f311->Label(-text => 'Drive 5', -anchor => 'w',
		-background=>'white') ->pack(-side=> 'top');
  $b_drv5 = $f311->Button( -text => $d5tape, -background => 'grey',
		-relief => 'sunken', -command => [\&Mt_stat, 5],)
		->pack(-side=> 'top', -pady => 10);

  my $fcmd4 = $mw->Frame(-borderwidth => 0, -relief=>'flat')
                ->pack(-side => 'top', -pady=>0);
  my $lcmd4 = $fcmd4->Label(-text => 'cmd:', -anchor => 'w')
		->pack(-side=> 'left', -pady=>0);
  my $tcmd4 = $fcmd4->Scrolled("Text", -scrollbars=> "e", 
		qw/-width 30 -height 0/) ->pack(-side=>'left', -padx => 10);
  $tcmd4->insert('end', "this will be Drive 4 cmds\n");
  $tcmd4->bindtags(undef);
  my $tcmd5 = $fcmd4->Scrolled("Text", -scrollbars=> "e", 
		qw/-width 30 -height 0/) ->pack(-side=>'left');
  $tcmd5->insert('end', "this will be Drive 5 cmds\n");
  $tcmd5->bindtags(undef);

  #drive #6 & 7
  my $f4 = $mw->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'top', -pady=>10);
  my $f41 = $f4->Frame(-borderwidth => 3, -relief=>'groove', 
		-background=>'white')
		->pack(-side => 'left');
  my $f42 = $f4->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $f43 = $f4->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $l41 = $f41->Label(-text => 'Drive 6', -anchor => 'w',
		-background=>'white') ->pack(-side=> 'top');
  $b_drv6 = $f41->Button( -text => $d6tape, -background => 'grey',
		-relief => 'sunken', -command => [\&Mt_stat, 6],)
		->pack(-side=> 'top', -pady => 10);

  my $f4x = $f4->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left', -padx=>40);
  my $f411 = $f4->Frame(-borderwidth => 3, -relief=>'groove', 
		-background=>'white')
		->pack(-side => 'left', -padx => 60);
  my $f421 = $f4->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $f431 = $f4->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $l411 = $f411->Label(-text => 'Drive 7', -anchor => 'w',
		-background=>'white') ->pack(-side=> 'top');
  $b_drv7 = $f411->Button( -text => $d7tape, -background => 'grey',
		-relief => 'sunken', -command => [\&Mt_stat, 7],)
		->pack(-side=> 'top', -pady => 10);

  my $fcmd6 = $mw->Frame(-borderwidth => 0, -relief=>'flat')
                ->pack(-side => 'top', -pady=>0);
  my $lcmd6 = $fcmd6->Label(-text => 'cmd:', -anchor => 'w')
		->pack(-side=> 'left', -pady=>0);
  my $tcmd6 = $fcmd6->Scrolled("Text", -scrollbars=> "e", 
		qw/-width 30 -height 0/) ->pack(-side=>'left', -padx => 10);
  $tcmd6->insert('end', "this will be Drive 6 cmds\n");
  $tcmd6->bindtags(undef);
  my $tcmd7 = $fcmd6->Scrolled("Text", -scrollbars=> "e", 
		qw/-width 30 -height 0/) ->pack(-side=>'left');
  $tcmd7->insert('end', "this will be Drive 7 cmds\n");
  $tcmd7->bindtags(undef);

  #drive #8 & 9
  my $f5 = $mw->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'top', -pady=>10);
  my $f51 = $f5->Frame(-borderwidth => 3, -relief=>'groove', 
		-background=>'white')
		->pack(-side => 'left');
  my $f52 = $f5->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $f53 = $f5->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $l51 = $f51->Label(-text => 'Drive 8', -anchor => 'w',
		-background=>'white') ->pack(-side=> 'top');
  $b_drv8 = $f51->Button( -text => $d8tape, -background => 'grey',
		-relief => 'sunken', -command => [\&Mt_stat, 8],)
		->pack(-side=> 'top', -pady => 10);

  my $f5x = $f5->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left', -padx=>40);
  my $f511 = $f5->Frame(-borderwidth => 3, -relief=>'groove', 
		-background=>'white')
		->pack(-side => 'left', -padx => 60);
  my $f521 = $f5->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $f531 = $f5->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $l511 = $f511->Label(-text => 'Drive 9', -anchor => 'w',
		-background=>'white') ->pack(-side=> 'top');
  $b_drv9 = $f511->Button( -text => $d9tape, -background => 'grey',
		-relief => 'sunken', -command => [\&Mt_stat, 9],)
		->pack(-side=> 'top', -pady => 10);

  my $fcmd8 = $mw->Frame(-borderwidth => 0, -relief=>'flat')
                ->pack(-side => 'top', -pady=>0);
  my $lcmd8 = $fcmd8->Label(-text => 'cmd:', -anchor => 'w')
		->pack(-side=> 'left', -pady=>0);
  my $tcmd8 = $fcmd8->Scrolled("Text", -scrollbars=> "e", 
		qw/-width 30 -height 0/) ->pack(-side=>'left', -padx => 10);
  $tcmd8->insert('end', "this will be Drive 8 cmds\n");
  $tcmd8->bindtags(undef);
  my $tcmd9 = $fcmd8->Scrolled("Text", -scrollbars=> "e", 
		qw/-width 30 -height 0/) ->pack(-side=>'left');
  $tcmd9->insert('end', "this will be Drive 9 cmds\n");
  $tcmd9->bindtags(undef);

  #drive #10 & 11 
  my $f6 = $mw->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'top', -pady=>10);
  my $f61 = $f6->Frame(-borderwidth => 3, -relief=>'groove', 
		-background=>'white')
		->pack(-side => 'left');
  my $f62 = $f6->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $f63 = $f6->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $l61 = $f61->Label(-text => 'Drive 10', -anchor => 'w',
		-background=>'white') ->pack(-side=> 'top');
  $b_drv10 = $f61->Button( -text => $d10tape, -background => 'grey',
		-relief => 'sunken', -command => [\&Mt_stat, 10],)
		->pack(-side=> 'top', -pady => 10);

  my $f6x = $f6->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left', -padx=>40);
  my $f611 = $f6->Frame(-borderwidth => 3, -relief=>'groove', 
		-background=>'white')
		->pack(-side => 'left', -padx => 60);
  my $f621 = $f6->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $f631 = $f6->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'left');
  my $l611 = $f611->Label(-text => 'Drive 11', -anchor => 'w',
		-background=>'white') ->pack(-side=> 'top');
  $b_drv11 = $f611->Button( -text => $d11tape, -background => 'grey',
		-relief => 'sunken', -command => [\&Mt_stat, 11],)
		->pack(-side=> 'top', -pady => 10);

  my $fcmd10 = $mw->Frame(-borderwidth => 0, -relief=>'flat')
                ->pack(-side => 'top', -pady=>0);
  my $lcmd10 = $fcmd10->Label(-text => 'cmd:', -anchor => 'w')
		->pack(-side=> 'left', -pady=>0);
  my $tcmd10 = $fcmd10->Scrolled("Text", -scrollbars=> "e", 
		qw/-width 30 -height 0/) ->pack(-side=>'left', -padx => 10);
  $tcmd10->insert('end', "this will be Drive 10 cmds\n");
  $tcmd10->bindtags(undef);
  my $tcmd11 = $fcmd10->Scrolled("Text", -scrollbars=> "e", 
		qw/-width 30 -height 0/) ->pack(-side=>'left');
  $tcmd11->insert('end', "this will be Drive 11 cmds\n");
  $tcmd11->bindtags(undef);

  #now the robot commands
  my $fr4 = $mw->Frame(-borderwidth => 0, -relief=>'flat')
		->pack(-side => 'bottom', -pady=>10);
  my $lr = $fr4->Label(-text => 'Robot0 cmd:', -anchor => 'w')
		->pack(-side=> 'left', -pady=>0);
  #my $trobot0 = $fr4->Text(qw/-width 60 -height 2/)->pack(-side=>'left');
  my $trobot0 = $fr4->Scrolled("Text", -scrollbars=> "e",
                qw/-width 60 -height 2/, -pady=>10) ->pack(-side=>'left');
  $trobot0->insert('end', "this will be robot0 cmd\n");
  $trobot0->bindtags(undef);

  $mw->bind('all', '<Control-c>' => \&Exit_sub);
  #$mw->bind('all', '<Destroy>' => \&exit);#No, will exit incorrectly
  $mw->afterCancel($log_track);
  if(!$playback) {
    $log_track = $mw->repeat(1000, \&log_update); #update every 1.0 sec
  }
  else {
    $log_track = $mw->repeat(2000, \&log_update); #introduce delay for playb
  }

MainLoop;

###########################################################################

#Called every second to get any new queue, robot, or drive activity.
#If playback mode, wait 5 secs after each active line found.
sub log_update {
  my $new_file = "/usr/local/logs/SUM/sum_restart_$$.touch";
  if((-e $new_file) && !$playback) {    #sum_svc tells us to restart
    `/bin/rm -f $new_file`;
    $LOPENED = 0;
    system "/bin/rm $runtag";
    print "$OURPATH is exiting and restarting...\n";
    if($interactive) {
      $cmd = "kill $$; $OURPATH -i -r -H$hostdb $DB";
    } 
    else {
      $cmd = "kill $$; $OURPATH -H$hostdb $DB";
    }
    system($cmd);
  }
  if(!$LOPENED) {       #ignore this part if already opened
    if(!open(LOGL, $tapelog)) {
      print "Can't open $tapelog: $!\n";
      system "/bin/rm $runtag";
      exit;
    }
    $LOPENED = 1;
    $pass1 = 1;		#must know it's the firest time through the log
  }
  $lastflg = 0;
  seek(LOGL, 0, 1);
  while(<LOGL>) {
    if(/^\*Tp:RdQsort:/) {      #rd Q may have been reordered
      $bix = 0;
      while(1) {
        if($bix < $MAX_Q_ENTIRES) {
          $x = "\$brdq$bix->configure(-text => '-------------')";
          eval($x);
          $bix++;
        }
        else { last; }
      }
      $brdq_ix = 0;
      %Hofrdq = ();             #reinit
    }
    elsif(/^\*Tp:RdQadd:/) {
      ($a, $uidstr, $tapeidstr, $fnumstr, $userstr, $dxstr) = split(/ /, $_);
      ($a, $uid) = split(/=/, $uidstr);
      ($a, $tid) = split(/=/, $tapeidstr);
      ($a, $filenum) = split(/=/, $fnumstr);
      ($a, $user) = split(/=/, $userstr);
      ($a, $dsix) = split(/=/, $dxstr);
      chomp($dsix);
      $newtxt = "$tid $filenum $user $dsix";
      $Hofrdq{$dsix} = $newtxt;		#!!TBD ck for dups of $dsix?
      $x = "\$brdq$brdq_ix->configure(-text => \$newtxt)";
      eval($x);
      $brdq_ix++;
      if($playback) { last; }
    }
    elsif(/^\*Tp:RdQdel:/) {
      ($a, $dsixstr, $drvstr) = split(/ /, $_);
      ($a, $dsix) = split(/=/, $dsixstr);
      ($a, $dnum) = split(/=/, $drvstr);
      chomp($dnum);
      $txt = $Hofrdq{$dsix};
      #if($dnum == 0) {
      #  $b13->configure(-text => $txt);
      #}
      #elsif($dnum == 1) {
      #  $b23->configure(-text => $txt);
      #}
      #elsif($dnum == 2) {
      #  $b33->configure(-text => $txt);
      #}
      #elsif($dnum == 3) {
      #  $b43->configure(-text => $txt);
      #}
      #else {			#it's an error msg 
      #  print "$dnum\n";
      #}
      delete($Hofrdq{$dsix});
      @inorder = keys %Hofrdq;          #any keys in order of insert
      $bix = 0;
      while($ix = shift(@inorder)) {
        $txt = $Hofrdq{$ix};
        $x = "\$brdq$bix->configure(-text => \$txt)";
        eval($x);
        $bix++;
      }
      $brdq_ix = $bix;
      while(1) {
        if($bix < $MAX_Q_ENTIRES) {
          $x = "\$brdq$bix->configure(-text => '-------------')";
          eval($x);
          $bix++;
        }
        else { last; }
      }
      if($playback) { last; }
    }
    elsif(/^\*Tp:Need:/) {
      ($a, $tapeidstr, $b) = split(/ /, $_);
      ($a, $tid) = split(/=/, $tapeidstr);
      if(!$Hofneed{$tid}) {
        $Hofneed{$tid} = 1;	#save tape as needed
        $EEcnt++;
      }
      $b0text = "Imp/Exp\n$EEcnt";
      $b0->configure(-text => $b0text, -background => 'yellow' );
      @needorder = keys %Hofneed;          #any keys in order of insert
      print "needorder is:\n@needorder\n";  #!!TEMP
    }
    elsif(/^\*Tp:WtQadd:/) {
      ($a, $uidstr, $tapeidstr, $fnumstr, $userstr, $dxstr) = split(/ /, $_);
      ($a, $uid) = split(/=/, $uidstr);
      ($a, $tid) = split(/=/, $tapeidstr);
      ($a, $filenum) = split(/=/, $fnumstr);
      ($a, $user) = split(/=/, $userstr);
      ($a, $dsix) = split(/=/, $dxstr);
      chomp($dsix);
      $newtxt = "$tid $filenum $user $dsix";
      $Hofwtq{$dsix} = $newtxt;		#!!TBD ck for dups of $dsix?
      $x = "\$bwtq$bwtq_ix->configure(-text => \$newtxt)";
      eval($x);
      $bwtq_ix++;
      if($playback) { last; }
    }
    elsif(/^\*Tp:WtQdel:/) {
      ($a, $dsixstr, $drvstr) = split(/ /, $_);
      ($a, $dsix) = split(/=/, $dsixstr);
      ($a, $dnum) = split(/=/, $drvstr);
      chomp($dnum);
      $txt = $Hofwtq{$dsix};
      if(index($dnum, "*WRN") == -1) {	#if found don't update drv Q display
        #if($dnum == 0) {
        #  $b13->configure(-text => $txt);
        #}
        #elsif($dnum == 1) {
        #  $b23->configure(-text => $txt);
        #}
        #elsif($dnum == 2) {
        #  $b33->configure(-text => $txt);
        #}
        #elsif($dnum == 3) {
        #  $b43->configure(-text => $txt);
        #}
        #else {			#it's an error msg 
        #  print "$dnum\n";
        #}
      }
      delete($Hofwtq{$dsix});
      @inorder = keys %Hofwtq;          #any keys in order of insert
      $bix = 0;
      while($ix = shift(@inorder)) {
        $txt = $Hofwtq{$ix};
        $x = "\$bwtq$bix->configure(-text => \$txt)";
        eval($x);
        $bix++;
      }
      $bwtq_ix = $bix;
      while(1) {
        if($bix < $MAX_Q_ENTIRES) {
          $x = "\$bwtq$bix->configure(-text => '-------------')";
          eval($x);
          $bix++;
        }
        else { last; }
      }
      if($playback) { last; }
    }
    elsif(/^\*Tp:BulkLoadDone/) {
      if(Exists($ImpExpf)) {		#this is in case tui restarts
        $ImpExpf->destroy();
        @needorder = ();
        $EEcnt = 0;
        $b0text = "Imp/Exp\n$EEcnt";
        $b0->configure(-text => $b0text, -background => 'grey',
		-command =>  \&ImpExp_sub,); 
      }
      if(!$interactive) {
        $EEcnt = 0;
        $b0text = "Imp/Exp\n$EEcnt";
        $b0->configure(-text => $b0text, -background => 'grey',
		-command =>  \&ImpExp_sub,); 
      }
    }
    elsif(/^\*Tp:DrBusy:/) {
      $pos = index($_, "drv="); 
      $d = substr($_, $pos+4);
      $drivebusy[$d] = 1;
    }
    elsif(/^\*Tp:DrNotBusy:/) {
      $pos = index($_, "drv="); 
      $d = substr($_, $pos+4);
      $drivebusy[$d] = 0;
    }
    elsif(/^\*Tp:CleanInProgress/) {
      $pos = index($_, "drv="); 
      $d = substr($_, $pos+4);
      $drivebusy[$d] = 1;
      $x = "\$b_drv$d->configure(-background => 'lightsalmon')";
      eval($x);
    }
    elsif(/^\*Tp:CleaningDone/) {
      $pos = index($_, "drv="); 
      $d = substr($_, $pos+4, 2);
      #print "clean done for drive=$d\n"; #!!!TEMP for test
      $drivebusy[$d] = 0;
      $x = "\$b_drv$d->configure(-background => 'grey')";
      eval($x);
      $pos = index($_, "slot="); 
      $cslot = substr($_, $pos+5);
      #print "clean done for  slot = $cslot\n";
      $Hofslotused{$cslot} = 0;
      if(Exists($cleanf)) {
        $cleanf->destroy();
      }
    }
    elsif(/^\*Rb:door:/) {		#a imp/exp door transfer cmd
      $str = substr($_, 10);
      $trobot0->insert('end', $str);
      $trobot0->see('end');
      ($a,$b,$dev,$com,$sslot,$dslot) = split(/ /, $str);
      if($com eq "unload") {		#this is slot# & drive # cmd
        $x = "\$b_drv$dslot->configure(-background => 'yellow')";
        eval($x);
        $x = "\$slotbtx$sslot->configure(-background => 'yellow')";
        eval($x);
        $unloadmode = 1;
      }
      else {
        $x = "\$slotbt$sslot->configure(-background => 'yellow')";
        eval($x);
        $x = "\$slotbtx$dslot->configure(-background => 'yellow')";
        eval($x);
        $unloadmode = 0;
      }
    }
    elsif((/^\*\*Rb:doorsuccess/) || (/^\*\*Rb:doorfailure/)) {
      if($unloadmode) {
        $x = "\$stape = \$d$dslot"."tape";
        eval($x);
        $x = "\$slotbt$sslot->configure(-background => 'grey',
			-text=>'$stape')";
        eval($x);
        $slottapes[$sslot-1] = $stape;
        $x = "\$b_drv$dslot->configure(-background => 'grey',
			-text=>'-------------')";
        eval($x);
        $x = "\$d$dslot"."tape"."= \"-------------\"";
        eval($x);
      }
      else {
        $x = "\$slotbt$sslot->configure(-background => 'grey',
			-text=>'$slottapes[$dslot-1]')";
        eval($x);
        $y = $slottapes[$sslot-1];
        $slottapes[$sslot-1] = $slottapes[$dslot-1];
        $slottapes[$dslot-1] = $y;
        $x = "\$slotbtx$dslot->configure(-background => 'grey',
			-text=>\$y)";
        eval($x);
      }
    }
    elsif(/^\*\*Rb:doorcomplete/) {
      #the Expired tapes have been unloaded. resume the imp/exp operations
      if($interactive) { &Imp_Exp_Open_Door; }
    }
    elsif(/^\*Rb:cmd:/) {		#a tape robot cmd 
      $str = substr($_, 9);
      chomp($str);
      $trobot0->insert('end', $str);
      $trobot0->see('end');
      ($a,$b,$dev,$com,$snum,$rbdnum) = split(/ /, $str);
      $idpg = int(($snum-1)/$MAX_SLOTS_PAGE);
      $current_page = -1;
      &Display_tape_in_slots($idpg);
      $x = "\$slotbt$snum->configure(-background => 'yellow')";
      eval($x);
      if($com eq "load") {		#loading tape to a drive
        delete($Hofreplace{$slottapes[$snum-1]}); #not eligible for replace
      }
      elsif($com eq "unload") {		#unloading tape from a drive
        $x = eval("\$d".$rbdnum."tape");
        $Hofreplace{$x} = 1;		#eligible for replace again
        #now ck if a cleaning tape unloaded at startup time
        if(index($x, "CLN") == 0) {	#a cleaning tape
          $Hofslotused{$snum} = 0;
        }
      }
      elsif($com eq "transfer") {
        $fromslot = $snum; $toslot = $rbdnum;
      }
      if($com ne "transfer") {		#don't light drive if transfer cmd
        if($rbdnum == 0) {
          $b_drv0->configure(-background => 'yellow');
        }
        elsif($rbdnum == 1) {
          $b_drv1->configure(-background => 'yellow');
        }
        elsif($rbdnum == 2) {
          $b_drv2->configure(-background => 'yellow');
        }
        elsif($rbdnum == 3) {
          $b_drv3->configure(-background => 'yellow');
        }
        elsif($rbdnum == 4) {
          $b_drv4->configure(-background => 'yellow');
        }
        elsif($rbdnum == 5) {
          $b_drv5->configure(-background => 'yellow');
        }
        elsif($rbdnum == 6) {
          $b_drv6->configure(-background => 'yellow');
        }
        elsif($rbdnum == 7) {
          $b_drv7->configure(-background => 'yellow');
        }
        elsif($rbdnum == 8) {
          $b_drv8->configure(-background => 'yellow');
        }
        elsif($rbdnum == 9) {
          $b_drv9->configure(-background => 'yellow');
        }
        elsif($rbdnum == 10) {
          $b_drv10->configure(-background => 'yellow');
        }
        elsif($rbdnum == 11) {
          $b_drv11->configure(-background => 'yellow');
        }
      }
      if($playback) { last; }
    }
    elsif(/^\*\*\*Rb:success transfer/) {	#good transfer slot to slot
      $trobot0->insert('end', $_);
      $x = "\$slotbt$fromslot->configure(-background=>'grey',-text=>'-------------')";
      eval($x);
      if($toslot > $MAX_SLOTS) {	#it's an EE slot 
       delete($Hofreplace{$slottapes[$fromslot-1]}); #not eligible for replace
       #$tapeid = $slottapes[$toslot-1];
       #$thistape is the tapeid from the last transtape command
       $x = "\$slotbtx$i->configure(-text => \$thistape, -background=>'grey')";
       eval($x);
       push(@expfromslot, $fromslot);
      }
      else {
        $Hofreplace{$slottapes[$fromslot-1]} = 1;    #eligible for replace
      }
      $slottapes[$toslot-1] = $slottapes[$fromslot-1];
      $slottapes[$fromslot-1] = "-------------";
    }
    elsif(/^\*\*\*Rb:/) {
      $trobot0->insert('end', $_);
      if($rbdnum == 0) {
        $b_drv0->configure(-background=>'grey', -text=>$slottapes[$snum-1]);
        $x = "\$slotbt$snum->configure(-background=>'grey',-text=>\$d0tape)";
        eval($x);
        $y = $d0tape;
        $d0tape = $slottapes[$snum-1];
        $slottapes[$snum-1] = $y;
      }
      elsif($rbdnum == 1) {
        $b_drv1->configure(-background=>'grey', -text=>$slottapes[$snum-1]);
        $x = "\$slotbt$snum->configure(-background=>'grey',-text=>\$d1tape)";
        eval($x);
        $y = $d1tape;
        $d1tape = $slottapes[$snum-1];
        $slottapes[$snum-1] = $y;
      }
      elsif($rbdnum == 2) {
        $b_drv2->configure(-background=>'grey', -text=>$slottapes[$snum-1]);
        $x = "\$slotbt$snum->configure(-background=>'grey',-text=>\$d2tape)";
        eval($x);
        $y = $d2tape;
        $d2tape = $slottapes[$snum-1];
        $slottapes[$snum-1] = $y;
      }
      elsif($rbdnum == 3) {
        $b_drv3->configure(-background=>'grey', -text=>$slottapes[$snum-1]);
        $x = "\$slotbt$snum->configure(-background=>'grey',-text=>\$d3tape)";
        eval($x);
        $y = $d3tape;
        $d3tape = $slottapes[$snum-1];
        $slottapes[$snum-1] = $y;
      }
      elsif($rbdnum == 4) {
        $b_drv4->configure(-background=>'grey', -text=>$slottapes[$snum-1]);
        $x = "\$slotbt$snum->configure(-background=>'grey',-text=>\$d4tape)";
        eval($x);
        $y = $d4tape;
        $d4tape = $slottapes[$snum-1];
        $slottapes[$snum-1] = $y;
      }
      elsif($rbdnum == 5) {
        $b_drv5->configure(-background=>'grey', -text=>$slottapes[$snum-1]);
        $x = "\$slotbt$snum->configure(-background=>'grey',-text=>\$d5tape)";
        eval($x);
        $y = $d5tape;
        $d5tape = $slottapes[$snum-1];
        $slottapes[$snum-1] = $y;
      }
      elsif($rbdnum == 6) {
        $b_drv6->configure(-background=>'grey', -text=>$slottapes[$snum-1]);
        $x = "\$slotbt$snum->configure(-background=>'grey',-text=>\$d6tape)";
        eval($x);
        $y = $d6tape;
        $d6tape = $slottapes[$snum-1];
        $slottapes[$snum-1] = $y;
      }
      elsif($rbdnum == 7) {
        $b_drv7->configure(-background=>'grey', -text=>$slottapes[$snum-1]);
        $x = "\$slotbt$snum->configure(-background=>'grey',-text=>\$d7tape)";
        eval($x);
        $y = $d7tape;
        $d7tape = $slottapes[$snum-1];
        $slottapes[$snum-1] = $y;
      }
      elsif($rbdnum == 8) {
        $b_drv8->configure(-background=>'grey', -text=>$slottapes[$snum-1]);
        $x = "\$slotbt$snum->configure(-background=>'grey',-text=>\$d8tape)";
        eval($x);
        $y = $d8tape;
        $d8tape = $slottapes[$snum-1];
        $slottapes[$snum-1] = $y;
      }
      elsif($rbdnum == 9) {
        $b_drv9->configure(-background=>'grey', -text=>$slottapes[$snum-1]);
        $x = "\$slotbt$snum->configure(-background=>'grey',-text=>\$d9tape)";
        eval($x);
        $y = $d9tape;
        $d9tape = $slottapes[$snum-1];
        $slottapes[$snum-1] = $y;
      }
      elsif($rbdnum == 10) {
        $b_drv10->configure(-background=>'grey', -text=>$slottapes[$snum-1]);
        $x = "\$slotbt$snum->configure(-background=>'grey',-text=>\$d10tape)";
        eval($x);
        $y = $d10tape;
        $d10tape = $slottapes[$snum-1];
        $slottapes[$snum-1] = $y;
      }
      elsif($rbdnum == 11) {
        $b_drv11->configure(-background=>'grey', -text=>$slottapes[$snum-1]);
        $x = "\$slotbt$snum->configure(-background=>'grey',-text=>\$d11tape)";
        eval($x);
        $y = $d11tape;
        $d11tape = $slottapes[$snum-1];
        $slottapes[$snum-1] = $y;
      }
      #if($playback) { last; }
    }
    elsif(/^\*Inv:/) {			#an inventory cmd
      $str = substr($_, 6, 33);
      $trobot0->insert('end', "$str\n");
      $trobot0->see('end');
      foreach $i (1 .. $MAX_SLOTS_PAGE) {	#turn all slots yellow
        $x = "\$slotbt$i->configure(-background => 'yellow',-text=>'-------------')";
        eval($x);
      }
      #always go away to give time to see the display change
      $lastflg = 1;
      last;
      #if($playback) { last; }
    }
    elsif(/^\*\*\*Inv:/) {
      $trobot0->insert('end', $_);
      foreach $i (1 .. $MAX_SLOTS_PAGE) {	#turn all slots grey
        $x = "\$slotbt$i->configure(-background => 'grey')";
        eval($x);
      }
      $current_page = -1;	#force redraw
      &show_tape_in_slots(0);  	#display where tapes are
      if($playback) { last; }
    }
    elsif(/^\*Dr0:rd:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd0->insert('end', "$str\n");
      $tcmd0->see('end');
      $b_drv0->configure(-background => 'green');
      if($playback) { last; }
    }
    elsif(/\*\*Dr0:rd:/) {
      $tcmd0->insert('end', $_);
      $b_drv0->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr1:rd:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd1->insert('end', "$str\n");
      $tcmd1->see('end');
      $b_drv1->configure(-background => 'green');
      if($playback) { last; }
    }
    elsif(/\*\*Dr1:rd:/) {
      $tcmd1->insert('end', $_);
      $b_drv1->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr2:rd:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd2->insert('end', "$str\n");
      $tcmd2->see('end');
      $b_drv2->configure(-background => 'green');
      if($playback) { last; }
    }
    elsif(/\*\*Dr2:rd:/) {
      $tcmd2->insert('end', $_);
      $b_drv2->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr3:rd:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd3->insert('end', "$str\n");
      $tcmd3->see('end');
      $b_drv3->configure(-background => 'green');
      if($playback) { last; }
    }
    elsif(/\*\*Dr3:rd:/) {
      $tcmd3->insert('end', $_);
      $b_drv3->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr4:rd:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd4->insert('end', "$str\n");
      $tcmd4->see('end');
      $b_drv4->configure(-background => 'green');
      if($playback) { last; }
    }
    elsif(/\*\*Dr4:rd:/) {
      $tcmd4->insert('end', $_);
      $b_drv4->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr5:rd:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd5->insert('end', "$str\n");
      $tcmd5->see('end');
      $b_drv5->configure(-background => 'green');
      if($playback) { last; }
    }
    elsif(/\*\*Dr5:rd:/) {
      $tcmd5->insert('end', $_);
      $b_drv5->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr6:rd:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd6->insert('end', "$str\n");
      $tcmd6->see('end');
      $b_drv6->configure(-background => 'green');
      if($playback) { last; }
    }
    elsif(/\*\*Dr6:rd:/) {
      $tcmd6->insert('end', $_);
      $b_drv6->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr7:rd:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd7->insert('end', "$str\n");
      $tcmd7->see('end');
      $b_drv7->configure(-background => 'green');
      if($playback) { last; }
    }
    elsif(/\*\*Dr7:rd:/) {
      $tcmd7->insert('end', $_);
      $b_drv7->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr8:rd:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd8->insert('end', "$str\n");
      $tcmd8->see('end');
      $b_drv8->configure(-background => 'green');
      if($playback) { last; }
    }
    elsif(/\*\*Dr8:rd:/) {
      $tcmd8->insert('end', $_);
      $b_drv8->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr9:rd:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd9->insert('end', "$str\n");
      $tcmd9->see('end');
      $b_drv9->configure(-background => 'green');
      if($playback) { last; }
    }
    elsif(/\*\*Dr9:rd:/) {
      $tcmd9->insert('end', $_);
      $b_drv9->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr10:rd:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd10->insert('end', "$str\n");
      $tcmd10->see('end');
      $b_drv10->configure(-background => 'green');
      if($playback) { last; }
    }
    elsif(/\*\*Dr10:rd:/) {
      $tcmd10->insert('end', $_);
      $b_drv10->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr11:rd:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd11->insert('end', "$str\n");
      $tcmd11->see('end');
      $b_drv11->configure(-background => 'green');
      if($playback) { last; }
    }
    elsif(/\*\*Dr11:rd:/) {
      $tcmd11->insert('end', $_);
      $b_drv11->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr0:wt:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd0->insert('end', "$str\n");
      $tcmd0->see('end');
      $b_drv0->configure(-background => 'lightblue');
      if($playback) { last; }
    }
    elsif(/^\*\*\*Dr0:wt:/) {
      $tcmd0->insert('end', $_);
      $b_drv0->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr1:wt:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd1->insert('end', "$str\n");
      $tcmd1->see('end');
      $b_drv1->configure(-background => 'lightblue');
      if($playback) { last; }
    }
    elsif(/^\*\*\*Dr1:wt:/) {
      $tcmd1->insert('end', $_);
      $b_drv1->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr2:wt:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd2->insert('end', "$str\n");
      $tcmd2->see('end');
      $b_drv2->configure(-background => 'lightblue');
      if($playback) { last; }
    }
    elsif(/^\*\*\*Dr2:wt:/) {
      $tcmd2->insert('end', $_);
      $b_drv2->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr3:wt:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd3->insert('end', "$str\n");
      $tcmd3->see('end');
      $b_drv3->configure(-background => 'lightblue');
      if($playback) { last; }
    }
    elsif(/^\*\*\*Dr3:wt:/) {
      $tcmd3->insert('end', $_);
      $b_drv3->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr4:wt:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd4->insert('end', "$str\n");
      $tcmd4->see('end');
      $b_drv4->configure(-background => 'lightblue');
      if($playback) { last; }
    }
    elsif(/^\*\*\*Dr4:wt:/) {
      $tcmd4->insert('end', $_);
      $b_drv4->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr5:wt:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd5->insert('end', "$str\n");
      $tcmd5->see('end');
      $b_drv5->configure(-background => 'lightblue');
      if($playback) { last; }
    }
    elsif(/^\*\*\*Dr5:wt:/) {
      $tcmd5->insert('end', $_);
      $b_drv5->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr6:wt:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd6->insert('end', "$str\n");
      $tcmd6->see('end');
      $b_drv6->configure(-background => 'lightblue');
      if($playback) { last; }
    }
    elsif(/^\*\*\*Dr6:wt:/) {
      $tcmd6->insert('end', $_);
      $b_drv6->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr7:wt:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd7->insert('end', "$str\n");
      $tcmd7->see('end');
      $b_drv7->configure(-background => 'lightblue');
      if($playback) { last; }
    }
    elsif(/^\*\*\*Dr7:wt:/) {
      $tcmd7->insert('end', $_);
      $b_drv7->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr8:wt:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd8->insert('end', "$str\n");
      $tcmd8->see('end');
      $b_drv8->configure(-background => 'lightblue');
      if($playback) { last; }
    }
    elsif(/^\*\*\*Dr8:wt:/) {
      $tcmd8->insert('end', $_);
      $b_drv8->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr9:wt:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd9->insert('end', "$str\n");
      $tcmd9->see('end');
      $b_drv9->configure(-background => 'lightblue');
      if($playback) { last; }
    }
    elsif(/^\*\*\*Dr9:wt:/) {
      $tcmd9->insert('end', $_);
      $b_drv9->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr10:wt:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd10->insert('end', "$str\n");
      $tcmd10->see('end');
      $b_drv10->configure(-background => 'lightblue');
      if($playback) { last; }
    }
    elsif(/^\*\*\*Dr10:wt:/) {
      $tcmd10->insert('end', $_);
      $b_drv10->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*Dr11:wt:/) {
      $str = substr($_, 9);
      $pos = index($str, "1>");
      $str = substr($str, 0, $pos);
      $tcmd11->insert('end', "$str\n");
      $tcmd11->see('end');
      $b_drv11->configure(-background => 'lightblue');
      if($playback) { last; }
    }
    elsif(/^\*\*\*Dr11:wt:/) {
      $tcmd11->insert('end', $_);
      $b_drv11->configure(-background=>'grey');
      if($playback) { last; }
    }
    elsif(/^\*\*\*EXPCLOSEDO called for jmtx/) {
      chomp;
      $pos = rindex($_, ' ');
      $i = substr($_, $pos+1);
      $thistape = substr($_, $pos-8, 8);
      $x = "\$slotbtx$i->configure(-background=>'yellow', -text=>\$thistape)";
      eval($x);
    }
    elsif(/^\*\*\*EXPCLOSEDO called for stop unload/) { #unload is done
      if(!$pass1) { &ExpClosed_Open_Door; }
    }
    elsif(/^\*\*\*EXPCLOSEDO called for reinventory/) { #load is done
      if(!$pass1) { &ExpClosed_ReInv; }
    }
  }
  if(!$lastflg) { $pass1 = 0; }
}

#######################################################################
#Display tapes in slots for the given page#
sub Display_tape_in_slots {
  my ($dpage) = @_;
  $row = 0; $column = 0; $rows_per_col = 40;	#new 5/8/09
  if($current_page != $dpage) {	#remove current buttons from display
    $f0x->destroy();
    $f0x = $f0->Frame(-borderwidth => 0) ->pack(-side => 'left');
  }
  $slstart = ($dpage * $MAX_SLOTS_PAGE) + 1;
  foreach $i ($slstart .. ($slstart+$MAX_SLOTS_PAGE-1)) {
    $tapeid = $slottapes[$i-1];
    #print "i=$i tapeid=$tapeid\n"; #!!!TEMP
    if($tapeid eq "-------------") {
      $tapeidinfo = $emptyslottapes[$i-1];
    }
    else {
      $tapeidinfo = $tapeid;
    }
    $y = "\$slotbt$i";
    $x = "\$slotbt$i = \$f0x->Button(
        -text => \$tapeid,
	-font => 'courier 8 bold',
        -background => 'grey',
        -relief => 'sunken',
        -command => \[\\&Tape_info, \$tapeidinfo\],
        )";
     eval($x);
     $txt = "      ".$i;
     my $l = $f0x->Label(-text => $txt, -font => 'courier 8 bold', -anchor => 'w', -justify => 'left'); 
    Tk::grid( $l, -row => $row, -column => $column, 
		-sticky => 'nw', -pady => 0);
    Tk::grid( eval($y), -row => $row, -column => ($column + 1),
		-sticky => 'w', -pady => 0);
    $f0x->gridRowconfigure($row++,-weight => 0);
    $f0x->gridColumnconfigure($column,-weight => 1, -minsize => 10);
    $f0x->gridColumnconfigure($column+1,-weight => 8, -minsize => 10);
    if($row == $rows_per_col) { $row = 0; $column += 2; }
  }
  $current_page = $dpage;
  $bpg->configure(-text => "Pg#$current_page");
}

#######################################################################
#Open the log file and show the results of the inventory for which
#tapes are in which slots and drives.
#
sub show_tape_in_slots {
  my ($page) = @_;
  #$itmp = 0;  #!!!TEMP for testing w/o cleaning tapes
  $row = $column = $slnum = $freeslots = $tapesindrives = $numclean = 0;
  $rows_per_col = 40;
  @slottapes = ();		#has tape numbers
  @cleanslots = ();		#has internal slot numbers
  while(<LOGL>) {
    if(/^\*\*\*ENDInv:/) { last; }
    if(/^tapeid in drive 0 /) {
      $pos = index($_, "0 = ");
      $d0tape = substr($_, $pos+4);
      chomp($d0tape);
      if($d0tape eq "(null)") {
        $d0tape = "-------------";
      }
      else {
        $d0tape = "$d0tape  ";	#2 extra spaces needed here
        $tapesindrives++;
      }
    }
    elsif(/^tapeid in drive 1 /) {
      $pos = index($_, "1 = ");
      $d1tape = substr($_, $pos+4);
      chomp($d1tape);
      if($d1tape eq "(null)") {
        $d1tape = "-------------";
      }
      else {
        $d1tape = "$d1tape  ";	#2 extra spaces needed here
        $tapesindrives++;
      }
    }
    elsif(/^tapeid in drive 2 /) {
      $pos = index($_, "2 = ");
      $d2tape = substr($_, $pos+4);
      chomp($d2tape);
      if($d2tape eq "(null)") {
        $d2tape = "-------------";
      }
      else {
        $d2tape = "$d2tape  ";	#2 extra spaces needed here
        $tapesindrives++;
      }
    }
    elsif(/^tapeid in drive 3 /) {
      $pos = index($_, "3 = ");
      $d3tape = substr($_, $pos+4);
      chomp($d3tape);
      if($d3tape eq "(null)") {
        $d3tape = "-------------";
      }
      else {
        $d3tape = "$d3tape  ";	#2 extra spaces needed here
        $tapesindrives++;
      }
    }
    elsif(/^tapeid in drive 4 /) {
      $pos = index($_, "4 = ");
      $d4tape = substr($_, $pos+4);
      chomp($d4tape);
      if($d4tape eq "(null)") {
        $d4tape = "-------------";
      }
      else {
        $d4tape = "$d4tape  ";	#2 extra spaces needed here
        $tapesindrives++;
      }
    }
    elsif(/^tapeid in drive 5 /) {
      $pos = index($_, "5 = ");
      $d5tape = substr($_, $pos+4);
      chomp($d5tape);
      if($d5tape eq "(null)") {
        $d5tape = "-------------";
      }
      else {
        $d5tape = "$d5tape  ";	#2 extra spaces needed here
        $tapesindrives++;
      }
    }
    elsif(/^tapeid in drive 6 /) {
      $pos = index($_, "6 = ");
      $d6tape = substr($_, $pos+4);
      chomp($d6tape);
      if($d6tape eq "(null)") {
        $d6tape = "-------------";
      }
      else {
        $d6tape = "$d6tape  ";	#2 extra spaces needed here
        $tapesindrives++;
      }
    }
    elsif(/^tapeid in drive 7 /) {
      $pos = index($_, "7 = ");
      $d7tape = substr($_, $pos+4);
      chomp($d7tape);
      if($d7tape eq "(null)") {
        $d7tape = "-------------";
      }
      else {
        $d7tape = "$d7tape  ";	#2 extra spaces needed here
        $tapesindrives++;
      }
    }
    elsif(/^tapeid in drive 8 /) {
      $pos = index($_, "8 = ");
      $d8tape = substr($_, $pos+4);
      chomp($d8tape);
      if($d8tape eq "(null)") {
        $d8tape = "-------------";
      }
      else {
        $d8tape = "$d8tape  ";	#2 extra spaces needed here
        $tapesindrives++;
      }
    }
    elsif(/^tapeid in drive 9 /) {
      $pos = index($_, "9 = ");
      $d9tape = substr($_, $pos+4);
      chomp($d9tape);
      if($d9tape eq "(null)") {
        $d9tape = "-------------";
      }
      else {
        $d9tape = "$d9tape  ";	#2 extra spaces needed here
        $tapesindrives++;
      }
    }
    elsif(/^tapeid in drive 10 /) {
      $pos = index($_, "10 = ");
      $d10tape = substr($_, $pos+5);
      chomp($d10tape);
      if($d10tape eq "(null)") {
        $d10tape = "-------------";
      }
      else {
        $d10tape = "$d10tape  ";	#2 extra spaces needed here
        $tapesindrives++;
      }
    }
    elsif(/^tapeid in drive 11 /) {
      $pos = index($_, "11 = ");
      $d11tape = substr($_, $pos+5);
      chomp($d11tape);
      if($d11tape eq "(null)") {
        $d11tape = "-------------";
      }
      else {
        $d11tape = "$d11tape  ";	#2 extra spaces needed here
        $tapesindrives++;
      }
    }
    elsif(/^tapeid in slot/) {
      $pos = index($_, " = ");
      $stape = substr($_, $pos+3);
      chomp($stape);
      #if($slnum >= 2197 && $slnum < 2200) { #!!!TEMP test w/o cleaning tapes
      #  $stape = "CLN00"."$itmp";
      #  $itmp++;
      #}
      if(index($stape, "null") != -1) {
        if(($pos = index($stape, "drive #")) != -1) {
          $indrv = substr($stape, $pos+7);
          chomp($indrv);
          $x = "\$stape = \$d$indrv"."tape";
          eval($x);
          $emptyslottapes[$slnum] = $stape;
        }
        $stape = "-------------";
        if($slnum < $MAX_SLOTS) {       #don't count tapes in EE slots
          $freeslots++;
        }
      }
      else {
        if($slnum < $MAX_SLOTS) {	#don't count tapes in EE slots
          $Hofreplace{$stape} = 1;	#tape eligible to be replaced
        }
        $emptyslottapes[$slnum] = $stape;
      }
      push(@slottapes, $stape);
      if(index($stape, "CLN") == 0) {	#a cleaning tape
        push(@cleanslots, $slnum);	#save internal slot#
        $numclean++;
      }
      $slnum++;
    }
  }
  $freeslots = $freeslots - $tapesindrives; # #of slots not assigned
  print "#of slots with no assignment = $freeslots\n"; #!!TEMP
  #init drive slots button text
  $b_drv0->configure(-background=>'grey', -text=>$d0tape);
  $b_drv1->configure(-background=>'grey', -text=>$d1tape);
  $b_drv2->configure(-background=>'grey', -text=>$d2tape);
  $b_drv3->configure(-background=>'grey', -text=>$d3tape);
  $b_drv4->configure(-background=>'grey', -text=>$d4tape);
  $b_drv5->configure(-background=>'grey', -text=>$d5tape);
  $b_drv6->configure(-background=>'grey', -text=>$d6tape);
  $b_drv7->configure(-background=>'grey', -text=>$d7tape);
  $b_drv8->configure(-background=>'grey', -text=>$d8tape);
  $b_drv9->configure(-background=>'grey', -text=>$d9tape);
  $b_drv10->configure(-background=>'grey', -text=>$d10tape);
  $b_drv11->configure(-background=>'grey', -text=>$d11tape);
  #init queue text (N/A for t950)
  #$b13->configure(-text => '-------------');
  #$b23->configure(-text => '-------------');
  #$b33->configure(-text => '-------------');
  #$b43->configure(-text => '-------------');
  &Display_tape_in_slots($page);
}

sub show_notape_in_slots {
  $row = 0; $column = 0; $rows_per_col = 40;
  foreach $i (1 .. $MAX_SLOTS_PAGE) {
    $tapeid = "-------------";
    $y = "\$slotbt$i";
    $x = "\$slotbt$i = \$f0x->Button(
        -text => \$tapeid,
	-font => 'courier 8 bold',
        -background => 'grey',
        -relief => 'sunken',
        -command => \[\\&Tape_info, \$tapeid\],
        )";
     eval($x);
    $txt = "      ".$i;
     my $l = $f0x->Label(-text => $txt, -font => 'courier 8 bold', -anchor => 'w', -justify => 'left'); 
    Tk::grid( $l, -row => $row, -column => $column, 
		-sticky => 'nw', -pady => 0);
    Tk::grid( eval($y), -row => $row, -column => ($column + 1),
		-sticky => 'w', -pady => 0);
    $f0x->gridRowconfigure($row++,-weight => 0);
    $f0x->gridColumnconfigure($column,-weight => 1, -minsize => 10);
    $f0x->gridColumnconfigure($column+1,-weight => 8, -minsize => 10);
    if($row == $rows_per_col) { $row = 0; $column += 2; }
  }
}

sub show_notape_in_slots_impexp {
  my $row = 0; $column = 0;
  foreach $i (($MAX_SLOTS + 1) .. ($MAX_SLOTS + $NUM_IMP_EXP_SLOTS)) {
    $tapeid = "-------------";
    $y = "\$slotbtx$i";
    $x = "\$slotbtx$i = \$f00->Button(
        -text => \$tapeid,
        -background => 'grey',
        -relief => 'sunken',
        -command => \[\\&Tape_info, \$tapeid\],
        )";
     eval($x);
    $txt = "      ".$i;
    my $l = $f00->Label(-text => $txt, -anchor => 'w', -justify => 'left');
    Tk::grid( $l, -row => $row, -column => $column, 
		-sticky => 'nw', -pady => 0);
    Tk::grid( eval($y), -row => $row, -column => ($column + 1),
		-sticky => 'w', -pady => 0);
    $f00->gridRowconfigure($row++,-weight => 0);
    $f0x->gridColumnconfigure($column,-weight => 1, -minsize => 10);
  }

  #put in tapeid's:
  foreach $i (($MAX_SLOTS + 1) .. ($MAX_SLOTS + $NUM_IMP_EXP_SLOTS)) {
    $tapeid = $slottapes[$i-1];
    if($tapeid eq "-------------") {
      $tapeidinfo = $emptyslottapes[$i-1];
    }
    else {
      $tapeidinfo = $tapeid;
    }
    $y = "\$slotbtx$i";
    $x = "\$slotbtx$i->configure(-text => \$tapeid,
                -command => \[\\&Tape_info, \$tapeidinfo\])";
     eval($x);
  }
}
#######################################################################
sub Id_ck {
  return(1);
}

# find slot with first characters matching $idfind
sub Id_go {
  foreach $id_i (1 .. $MAX_SLOTS) {
    #if($idfind eq $slottapes[$id_i-1]) {
    if(($pos = index($slottapes[$id_i-1], $idfind)) == 0) {
      $idpg = int(($id_i-1)/$MAX_SLOTS_PAGE); 
      $current_page = -1;		#force a clean page
      &Display_tape_in_slots($idpg);
      $x = "\$slotbt$id_i->configure(-background => 'orange')";
      eval($x);
      return;
    }
  }
  print "$idfind not found!\n"; #!!!TEMP
}

#Called from teh Page button on the top level page.
sub Page_sub {
  print "Page_sub called for current_page=$current_page\n";
}

sub Previous {
  if($current_page > 0) { 
    $newpage = $current_page - 1;
    $bpg->configure(-text => "Pg#$newpage");
    &Display_tape_in_slots($newpage);
  }
}

sub Next {
  if($current_page <  $MAX_PAGE_NUM) { 
    $newpage = $current_page + 1;
    $bpg->configure(-text => "Pg#$newpage");
    &Display_tape_in_slots($newpage);
  }
}

#Called from the Imp/Exp button on the top level page.
sub ImpExp_sub {
  if(Exists($ImpExpf)) {
    $ImpExpf->destroy();
  }
  $ImpExpf = $mw->Toplevel();
  #$ImpExpf->geometry("590x400+25+500");
  $ImpExpf->geometry("590x340");
  $ImpExpf->title("Import/Export Ops");
  $ImpExpf->Button(
        -text => 'Close',
        -background => 'grey',
        -command => sub {$ImpExpf->destroy();},
        )->pack();

  if(!$interactive) {
    $msg = "\nSorry, you are not the interactive user. You cannot do Imp/Exp.";
    $ImpExpf->Label(-text => $msg, -font => 'arial 12 bold')->pack(@pl);
    return;
  }
  @needorder =  keys %Hofneed; #needed tapeid in order requested
  $numneed = $#needorder+1;
  if($numneed == 0) {
    $ImpExpf->Label(-text => "No tapes needed\n", -font => 'arial 12 bold')->pack(@pl);
    return;
  }
  if($numneed > $NUM_IMP_EXP_SLOTS) { 
    $numneed = $NUM_IMP_EXP_SLOTS;	#only this many slots in the door
  }
  #Return expired tapeid's in @exptape
  &get_exp_tapes;
  $numexp = $#exptape+1;
  if($numexp < $numneed) {
    $msg = "Only $numexp tapes have retention time expired. Needed $numneed\n";
    $ImpExpf->Label(-text => $msg, -font => 'arial 12 bold')->pack(@pl);
    $msg = "We will unload $numexp tapes. Change effective_date in DB to unload more tapes. \n";
    $ImpExpf->Label(-text => $msg, -font => 'arial 12 bold')->pack(@pl);
    $numneed = $numexp;
  }
  $msg = "NOTE: We will unload $numneed tape(s). Click below to start unload of expired tapes\n";
  $ImpExpf->Label(-text =>$msg, -font => 'arial 12 bold')->pack(@pl);
  $ImpExpf->Button(
            -text => 'Start Expired Tape Unload',
            -background => 'red',
            -command =>  \&ImpExp_sub_unload,
            )->pack();
}

#Called when the "Start Expired Tape Unload" button (defined in ImpExp_sub) is hit.
sub ImpExp_sub_unload {
  if(Exists($ImpExpf)) {
    $ImpExpf->destroy();
  }
  $ImpExpf = $mw->Toplevel();
  #$ImpExpf->geometry("590x400+25+500");
  $ImpExpf->geometry("590x340");
  $ImpExpf->title("Import/Export Ops");
  $ImpExpf->Button(
        -text => 'Close',
        -background => 'grey',
        -command => sub {$ImpExpf->destroy();},
        )->pack();

    #touch file for tapearc not to run (NOTAPEARC)
    #Do a ps to see if a tapearc is already running.
    #If so, delete the NOTAPEARC file and give a msg no imp/exp now.
    #if no tapearc running, continue. rm NOTAPEARC when done.
    `/bin/touch $NOTAPEARC`;
#!!!TBD: fix this for tapearcX runs. See if still need this??
    @arctest = `ps -ef | grep "tapearc -v jsocdc"`;
    if($#arctest > 1) {         #don't count our sh and grep
      `/bin/rm $NOTAPEARC`;
      $msg = "\nSorry, you can not do Imp/Exp while a tapearc is busy.";
      $ImpExpf->Label(-text => $msg, -font => 'arial 12 bold')->pack(@pl);
      return;
    }
    if($numexp == 0) {
      $msg = "\nThere are no tapes to export.\nChange effective_date in sum_group in DB to unload more tapes.\n";
      $ImpExpf->Label(-text => $msg, -font => 'arial 12 bold')->pack(@pl);
      return;
    }
    $ImpExpf->Label(-text=> "Unload of Expired Tapes In Progress (I will notify you when done)", 
		 -background=>'orange', -font => 'arial 12 bold')->pack(@pl);
    $ImpExpf->Label(-text => "Exit/Entry Slots in Door:", 
		 -font => 'arial 12 bold')->pack(@pl);
    #@txorder = @torder;
    @txorder = @exptape;
    @unloadids = ();
    $IE0 = $ImpExpf->Frame(-borderwidth => 0) ->pack(-side => 'left');
    $IE0->Label(-text => "Tapes to unload:", 
		-font => 'arial 12 bold')->pack(@pl);
    for($i=0; $i < $numneed; $i++) {
      $tpid = shift(@txorder);
      push(@unloadids, $tpid);
      delete($Hofreplace{$tpid});	#remove this tape from the hash
      $IE0->Label(-text => $tpid, 
		-background=>'orange', -font => 'arial 12 bold')->pack(@pl);
    }
    $f00 = $ImpExpf->Frame(-borderwidth => 3, -relief=>'groove')
  		->pack(-side => 'left');
    &show_notape_in_slots_impexp;	#show blank tape slots
    $f00f = $ImpExpf->Frame(-borderwidth => 0) ->pack(-side => 'left');
    $f00f->Label(-text => "(NOTE!! Only use this force button\nif you previously hit Exp/Exch Done\nprematurely and the unload is already done)", -font => 'arial 12 bold')->pack(@pl);
    $f00f->Button(
            -text => 'Force',
            -background => 'red',
            -command =>  \&Imp_Exp_Open_Door,
            )->pack();

      if($pid0 = fork) {
        #This is the parent. The child's pid is in $pid0
        print LOG "          \n";	#!!don't lose first few chars on line??
        print LOG "fork impexp start processing pid=$pid0 for impexp.\n";
      } elsif (defined $pid0) {     # $pid0 is zero here if defined. run impexp
        exec "impexp start @unloadids";
      }  else {
        #fork error
        $ImpExpf->Label(-text => "Fatal Error: Can't fork", -font => 'arial 12 bold')->pack(@pl);
        print "!!Fatal Error: Can't fork: $!\n";
      }
}

#Called when see in the tape_svc log file:
#***EXPCLOSEDO called for stop
#This will instruct the user what to do next and to hit the 
#ExpClosed Done button when finished.
sub ExpClosed_Open_Door {
  if(Exists($Expfc)) {
    $Expfc->destroy();
  }
  $Expfc = $mw->Toplevel();
  $Expfc->geometry("590x480");
  $Expfc->title("Export Closed Ops");
  $Expfc->Button(
        -text => 'Close',
        -background => 'grey',
        -command => sub {$Expfc->destroy();},
        )->pack();
  #reset the command sub on the Imp/Exp button on the main page to come here
  #$b0->configure(-text => $b0text, -background => 'yellow',
  #		-command =>  \&Imp_Exp_Open_Door,); 
  $Expfc->Label(-text => "NOTE: Closed tapes have been unloaded.", 
		-font => 'arial 12 bold')->pack(@pl);
  $Expfc->Label(-text => "Now complete each step in the order given:", 
		-font => 'arial 12 bold')->pack(@pl);
  $Expfc->Label(-text => "Go to the t950 console and hit 'Import/Export'", 
		-font => 'arial 12 bold')->pack(@pl);
  $Expfc->Label(-text => "Hit the bottom 'Export/Exchange' button", 
		-font => 'arial 12 bold')->pack(@pl);
  $Expfc->Label(-text=>"The door will open - \nremove the terapack in the door and insert one with blank tapes.", 
		-font => 'arial 12 bold')->pack(@pl);
  $Expfc->Label(-text=>"When these tapes are in the EE slots, hit 'Continue'",
		-font => 'arial 12 bold')->pack(@pl);
  $msg = "Continue until no more terapacks come out the door";
  $Expfc->Label(-text => $msg, 
		-font => 'arial 12 bold')->pack(@pl);
  $msg = "When all terapacks are done, hit the 'ExpClosed Done' button below";
  $Expfc->Label(-text => $msg, 
		-font => 'arial 12 bold')->pack(@pl);
  $msg = "(NOTE: when hit below, there will be a delay for \nthe move of all tapes, and a new inventory)\n";
  $Expfc->Label(-text => $msg, 
		-font => 'arial 12 bold')->pack(@pl);
  $Expfc->Button(
        -text => 'ExpClosed Done',
        -background => 'red',
        -command => \&ExpClosed_Done,
        )->pack();
}

sub ExpClosed_Done {
  if(Exists($Expfc)) {
    $Expfc->destroy();
  }
  @txorder = @expfromslot;
  $xxcnt = $#expfromslot + 1;
  &ExpHMItlm_load_sub(1);
  return;
}

#Called from log_update() when Rb:doorcomplete occurs.
#The Expired tapes have been put into the imp/exp door and we are now ready to
#open the door and remove the old tapes and put in the new required tapes
#and do a bulk load to load the new tapes into the live slots.
sub Imp_Exp_Open_Door {
  if(Exists($ImpExpf)) {
    $ImpExpf->destroy();
  }
  $ImpExpf = $mw->Toplevel();
  #$ImpExpf->geometry("590x400+25+500");
  $ImpExpf->geometry("590x480");
  $ImpExpf->title("Import/Export Ops");
  $ImpExpf->Button(
        -text => 'Close',
        -background => 'grey',
        -command => sub {$ImpExpf->destroy();},
        )->pack();
  #reset the command sub on the Imp/Exp button on the main page to come here
  $b0->configure(-text => $b0text, -background => 'yellow',
		-command =>  \&Imp_Exp_Open_Door,); 
  $ImpExpf->Label(-text => "NOTE: Expired tapes have been unloaded.", 
		-font => 'arial 12 bold')->pack(@pl);
  $ImpExpf->Label(-text => "Now complete each step in the order given:", 
		-font => 'arial 12 bold')->pack(@pl);
  $ImpExpf->Label(-text => "Go to the t950 console and hit 'Import/Export'", 
		-font => 'arial 12 bold')->pack(@pl);
  $ImpExpf->Label(-text => "Hit the bottom 'Export/Exchange' button", 
		-font => 'arial 12 bold')->pack(@pl);
  $ImpExpf->Label(-text=>"The door will open - remove any tapes in the door and insert the needed tapes.", 
		-font => 'arial 12 bold')->pack(@pl);
  $ImpExpf->Label(-text => "Need tapes:", 
  		-font => 'arial 12 bold')->pack(@pl);
  @xneedorder = @needorder;
  $numneed = $#needorder+1;
  $EEcnt_new = 0;
  if($numneed > $NUM_IMP_EXP_SLOTS) { 
    $EEcnt_new = $numneed - $NUM_IMP_EXP_SLOTS;
    $numneed = $NUM_IMP_EXP_SLOTS;	#only this many slots in the door
  }
  for($i=0; $i < $numneed; $i++) {
    $tid = shift(@xneedorder);
    $ImpExpf->Label(-text => $tid, 
  		-background=>'orange', -font => 'arial 12 bold')->pack(@pl);
    delete($Hofneed{$tid});	#remove this tape as needed from the hash
  }
 #$ImpExpf->Label(-text=>"When these tapes are in the EE slots, hit 'Continue'",
  $ImpExpf->Label(-text=>"When these tapes are in the EE slots, hit 'Stop Export'",
		-font => 'arial 12 bold')->pack(@pl);
  $msg = "When Export/Exchange is finished, hit 'Inventory'";
  $ImpExpf->Label(-text => $msg, 
		-font => 'arial 12 bold')->pack(@pl);
  $msg = "Select the tapes in the EE slots to be moved into the live slots";
  $ImpExpf->Label(-text => $msg, 
		-font => 'arial 12 bold')->pack(@pl);
  $msg = "Hit 'Add Move'";
  $ImpExpf->Label(-text => $msg, 
		-font => 'arial 12 bold')->pack(@pl);
  $msg = "(Any warning msgs about a slot already assigned to a drive\ncan be ignored. A new Inventory is done)";
  $ImpExpf->Label(-text => $msg, 
		-font => 'arial 12 bold')->pack(@pl);
  $msg = "When all are selected hit 'Start Moves'";
  $ImpExpf->Label(-text => $msg, 
		-font => 'arial 12 bold')->pack(@pl);
  $msg = "When all moves are done, hit the 'Exp/Exch Done' button below";
  $ImpExpf->Label(-text => $msg, 
		-font => 'arial 12 bold')->pack(@pl);
  $msg = "(NOTE: when hit below, there will be a delay for a new inventory)\n";
  $ImpExpf->Label(-text => $msg, 
		-font => 'arial 12 bold')->pack(@pl);
  $ImpExpf->Button(
        -text => 'Exp/Exch Done',
        -background => 'red',
        -command => \&Bulk_Load_Done,
        )->pack();
}

#Called from Imp_Exp_Open_Door() button "Bulk Load Done". The operator has
#indicated that the needed tapes have been loaded into the live slots and
#were ready to take a new inventory and resume normal operations.
sub Bulk_Load_Done {
  @needorder = ();
  $EEcnt = $EEcnt_new;
  $b0text = "Imp/Exp\n$EEcnt";
  $b0->configure(-text => $b0text, -background => 'grey',
		-command =>  \&ImpExp_sub,); 
  if($pid0 = fork) {
    #This is the parent. The child's pid is in $pid0
    print LOG "          \n";	#!!don't lose first few chars on line??
    print LOG "fork impexp stop processing pid=$pid0 for impexp.\n";
  } elsif (defined $pid0) {     # $pid0 is zero here if defined. run impexp
    exec "impexp stop @unloadids";
  }  else {
    #fork error
    print "!!Error: Can't fork: $!\n";
  }
  sleep 6;			#allow impexp to run
  if(Exists($ImpExpf)) {
    $ImpExpf->destroy();
  }
  &show_tape_in_slots(0);
  `/bin/rm -f $NOTAPEARC`;          #allow tapearc to run again
}

#Get closed tapes from sum_tape in ascending effective_date order for
#groups 2,3,4 and 5 (hmi/aia.lev0, hmi/aia.tlm).
#Return the tapeid's in @exptape.
sub get_exp_tapes{
  @exptape = ();
  $sqlcmd = "select tapeid,group_id,last_write from sum_tape where (group_id=2 or group_id=3 or group_id=4 or group_id=5) and closed=2 and last_write > '2010-06-01 01:50:29'  order by last_write";
  #print "sqlcmd is: $sqlcmd\n\n"; #!!TEMP
  $sth = $dbh->prepare($sqlcmd);
  if ( !defined $sth ) {
    print "Cannot prepare statement: $DBI::errstr\n";
    system "/bin/rm $runtag";
    exit;
  }
  # Execute the statement at the database level
  $sth->execute;
  while(@efftape = $sth->fetchrow()) { #get row from the DB
    #print "efftape = @efftape[0]\n"; #!!TEMP
    if(grep(/@efftape[0]/, @slottapes)) {
      push(@exptape, @efftape[0]);
    }
    else {
      if((index($d0tape, @efftape[0]) != -1) || (index($d1tape,  @efftape[0]) != -1) ||  (index($d2tape,  @efftape[0]) != -1) ||  (index($d3tape,  @efftape[0]) != -1) ||  (index($d4tape,  @efftape[0]) != -1) ||  (index($d5tape,  @efftape[0]) != -1) ||  (index($d6tape,  @efftape[0]) != -1) ||  (index($d7tape,  @efftape[0]) != -1) ||  (index($d8tape,  @efftape[0]) != -1) ||  (index($d9tape,  @efftape[0]) != -1) ||  (index($d10tape,  @efftape[0]) != -1) ||  (index($d11tape,  @efftape[0]) != -1)) {
        push(@exptape, @efftape[0]);
      }
    }
  }
}

#Return effective date of now as yyyymmddhhmm
sub get_effdate {
  local($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst,$date,$sec2,$min2,$hour2,$mday2);
  ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
  $min2 = sprintf("%02d", $min);
  $hour2 = sprintf("%02d", $hour);
  $mday2 = sprintf("%02d", $mday);
  $mon2 = sprintf("%02d", $mon+1);
  $year4 = sprintf("%04d", $year+1900);
  $date = "$year4"."$mon2"."$mday2"."$hour2"."$min2";
  return($date);
}

#Return date in form for a label e.g. 1998.01.07_14:42:00
sub labeldate {
  local($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst,$date,$sec2,$min2,$hour2,$mday2);
  ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
  $sec2 = sprintf("%02d", $sec);
  $min2 = sprintf("%02d", $min);
  $hour2 = sprintf("%02d", $hour);
  $mday2 = sprintf("%02d", $mday);
  $mon2 = sprintf("%02d", $mon+1);
  $year4 = sprintf("%04d", $year+1900);
  $date = $year4.".".$mon2.".".$mday2._.$hour2.":".$min2.":".$sec2;
  return($date);
}

#Return time in form for a label e.g. 14:42:00
sub labeltime {
  my $d = &labeldate;
  my $pos = index($d, '_');
  my $t = substr($d, $pos+1);
  return($t);
}

sub Tape_info {
  my($tapeid) = @_;
  chop($tapeid); chop($tapeid); #elim 2 extra spaces
  if(Exists($statf)) {
    $statf->destroy();
  }
  $statf = $mw->Toplevel();
  $statf->geometry("400x200-10-500");
  $statf->title("tape info");
  $txt = "Query of SUM_TAPE_TABLE";
  $statf->Label(-text => "$txt", -font => 'arial 18 bold')->pack();
  $statf->Button(
        -text => 'Close',
        -background => 'grey',
        -command => sub {$statf->destroy();},
        )->pack();
  $textlog = $statf->Scrolled("Text")->pack();
  $sqlcmd = "select TAPEID,NXTWRTFN,SPARE,GROUP_ID,AVAIL_BLOCKS,CLOSED,TO_CHAR(LAST_WRITE, 'dd/MON/yyyy_hh24:mi:ss') from sum_tape where tapeid = \'$tapeid\'";
  #$sqlcmd = "select TAPEID,NXTWRTFN,SPARE,GROUP_ID,AVAIL_BLOCKS,CLOSED,LAST_WRITE from sum_tape where tapeid = \'$tapeid\'";
  #print "sqlcmd is: $sqlcmd\n\n"; #!!TEMP
  $sth = $dbh->prepare($sqlcmd);
  if ( !defined $sth ) {
    print "Cannot prepare statement: $DBI::errstr\n";
    system "/bin/rm $runtag";
    exit;
  }
  # Execute the statement at the database level
  $sth->execute;
  $found = 0;
  while(@data_tape = $sth->fetchrow()) { #get row from the DB
    $found = 1;
    $textlog->insert('end', "Tapeid = $data_tape[0]\n");
    $textlog->insert('end', "Next_Write_File_Number = $data_tape[1]\n");
    $textlog->insert('end', "Spare = $data_tape[2]\n");
    $textlog->insert('end', "Group_Id = $data_tape[3]\n");
    $x = commify($data_tape[4]);
    $textlog->insert('end', "Avail_Blocks = $x\n");
    $textlog->insert('end', "Closed = $data_tape[5]\n");
    $textlog->insert('end', "Last_Write = $data_tape[6]\n");
  }
  if(!$found) {
    $textlog->insert('end', "tapeid = $tapeid not found\n");
  }
  $textlog->see('end');
  $sth->finish;
}

sub Mt_stat {
  my ($drnum) = @_;
  if(Exists($statf)) {
    $statf->destroy();
    close(LOGSTAT);
  }
  $statf = $mw->Toplevel();
  $statf->geometry("400x200-10-500");
  $statf->title("mt");
  $cmd = "mt -f /dev/sum_nst$drnum status";
  $statf->Label(-text => "$cmd", -font => 'arial 18 bold')->pack();
  $statf->Button(
        -text => 'Close',
        -background => 'grey',
        -command => sub {$statf->destroy();},
        )->pack();
  $textlog = $statf->Scrolled("Text")->pack();
  $statlog = "/tmp/Mt_stat.$user.log";
  `$cmd 1> $statlog 2>&1`;
#  $cmd = "mt -f /dev/sum_nst$drnum tell";
#  `$cmd 1>> $statlog 2>&1`;
  if(!open(LOGSTAT, $statlog)) { 
    print "Can't open $statlog: $!\n";
    system "/bin/rm $runtag";
    exit;
  }
  while(<LOGSTAT>) {
    if(/^^File number=/) {
      if(!/^File number=-1/) {	# a tell cmd will hang if drive empty 
        $cmd = "mt -f /dev/sum_nst$drnum tell";
        `$cmd 1>> $statlog 2>&1`;
      }
    }
    $textlog->insert('end', $_);
  }
  $textlog->see('end');
  close(LOGSTAT);
}

#Called from the major gui button "Export closed tapes".
sub Exptlm_sub {
  if(Exists($exptlmf)) {
    $exptlmf->destroy();
  }
  $exptlmf = $mw->Toplevel();
  $exptlmf->geometry("310x900");
  $exptlmf->title("export closed tapes");
  if(!$interactive) {
    $msg = "\nSorry, you are not the interactive user. You cannot do Export.";
    $exptlmf->Label(-text => $msg, -font => 'arial 12 bold')->pack(@pl);
    return;
  }
  @expfromslot = ();
  #hmi.lev0 is group 2
  $sqlcmd = "select tapeid,last_write from sum_tape where group_id=2 and closed=2 order by last_write";		#get oldest first
  $sth = $dbh->prepare($sqlcmd);
  if ( !defined $sth ) {
    print "Cannot prepare statement: $DBI::errstr\n";
    system "/bin/rm $runtag";
    exit;
  }
  $sth->execute;
  $hlev0cnt = 0; @hlev0unloads= (); @xtemp = ();
  $qlog = "/tmp/t950view.$user.2.log";
  if(!open(QLOG, ">$qlog")) {
    print "Can't open $qlog: $!\n";
    system "/bin/rm $runtag";
    exit;
  }
  print "View query result for group 2 in: $qlog\n";
  print QLOG "sqlcmd is: $sqlcmd\n"; #!!TEMP
  while(@hlev0query = $sth->fetchrow()) { #get row from the DB
    @xtemp = @hlev0query;
    $hlev0tape = shift(@hlev0query);
    if(grep(/$hlev0tape/, @slottapes)) {
      #print "hlev0tape = $hlev0tape\n";
      push(@hlev0unloads, $hlev0tape);
      print QLOG "@xtemp\n";
      $hlev0cnt++;
    }
  }
  close(QLOG);
  #aia.lev0 is group 3
  $sqlcmd = "select tapeid,last_write from sum_tape where group_id=3 and closed=2 order by last_write";
  $sth = $dbh->prepare($sqlcmd);
  if ( !defined $sth ) {
    print "Cannot prepare statement: $DBI::errstr\n";
    system "/bin/rm $runtag";
    exit;
  }
  $sth->execute;
  $alev0cnt = 0; @alev0unloads= (); @xtemp = ();
  $qlog = "/tmp/t950view.$user.3.log";
  if(!open(QLOG, ">$qlog")) {
    print "Can't open $qlog: $!\n";
    system "/bin/rm $runtag";
    exit;
  }
  print "View query result for group 3 in: $qlog\n";
  print QLOG "sqlcmd is: $sqlcmd\n"; #!!TEMP
  while(@alev0query = $sth->fetchrow()) { #get row from the DB
    @xtemp = @alev0query;
    $alev0tape = shift(@alev0query);
    if(grep(/$alev0tape/, @slottapes)) {
      push(@alev0unloads, $alev0tape);
      print QLOG "@xtemp\n";
      $alev0cnt++;
    }
  }
  close(QLOG);
  #hmi.tlm is group 4
  $sqlcmd = "select tapeid,last_write from sum_tape where group_id=4 and closed=2 order by last_write";
  $sth = $dbh->prepare($sqlcmd);
  if ( !defined $sth ) {
    print "Cannot prepare statement: $DBI::errstr\n";
    system "/bin/rm $runtag";
    exit;
  }
  $sth->execute;
  $hmicnt = 0; @hmiunloads= (); @xtemp = ();
  $qlog = "/tmp/t950view.$user.4.log";
  if(!open(QLOG, ">$qlog")) {
    print "Can't open $qlog: $!\n";
    system "/bin/rm $runtag";
    exit;
  }
  print "View query result for group 4 in: $qlog\n";
  print QLOG "sqlcmd is: $sqlcmd\n"; #!!TEMP
  while(@hmiquery = $sth->fetchrow()) { #get row from the DB
    @xtemp = @hmiquery;
    $hmitape = shift(@hmiquery);
    if(grep(/$hmitape/, @slottapes)) {
      #print "$hmitape for grp 4 in slottapes\n"; #!!!TEMP
      push(@hmiunloads, $hmitape);
      print QLOG "@xtemp\n";
      $hmicnt++;
    }
  }
  close(QLOG);
  #aia.tlm is group 5
  $sqlcmd = "select tapeid,last_write from sum_tape where group_id=5 and closed=2 order by last_write";
  $sth = $dbh->prepare($sqlcmd);
  if ( !defined $sth ) {
    print "Cannot prepare statement: $DBI::errstr\n";
    system "/bin/rm $runtag";
    exit;
  }
  $sth->execute;
  $aiacnt = 0; @aiaunloads= (); @xtemp = ();
  $qlog = "/tmp/t950view.$user.5.log";
  if(!open(QLOG, ">$qlog")) {
    print "Can't open $qlog: $!\n";
    system "/bin/rm $runtag";
    exit;
  }
  print "View query result for group 5 in: $qlog\n";
  print QLOG "sqlcmd is: $sqlcmd\n"; #!!TEMP
  while(@aiaquery = $sth->fetchrow()) { #get row from the DB
    @xtemp = @aiaquery;
    $aiatape = shift(@aiaquery);
    if(grep(/$aiatape/, @slottapes)) {
      #print "$aiatape\n";
      push(@aiaunloads, $aiatape);
      print QLOG "@xtemp\n";
      $aiacnt++;
    }
  }
  close(QLOG);

  #hmi.lev1 is group 10
  #eventually must query sum_main for owning_series, e.g. hmi.lev1 is both grp 6 and 10
  $sqlcmd = "select tapeid,last_write from sum_tape where group_id=10 and closed=2 order by last_write";
  $sth = $dbh->prepare($sqlcmd);
  if ( !defined $sth ) {
    print "Cannot prepare statement: $DBI::errstr\n";
    system "/bin/rm $runtag";
    exit;
  }
  $sth->execute;
  $h1cnt = 0; @h1unloads= (); @xtemp = ();
  $qlog = "/tmp/t950view.$user.10.log";
  if(!open(QLOG, ">$qlog")) {
    print "Can't open $qlog: $!\n";
    system "/bin/rm $runtag";
    exit;
  }
  print "View query result for group 10 in: $qlog\n";
  print QLOG "sqlcmd is: $sqlcmd\n"; #!!TEMP
  while(@h1query = $sth->fetchrow()) { #get row from the DB
    @xtemp = @h1query;
    $h1tape = shift(@h1query);
    if(grep(/$h1tape/, @slottapes)) {
      #print "$h1tape\n";
      push(@h1unloads, $h1tape);
      print QLOG "@xtemp\n";
      $h1cnt++;
    }
  }
  close(QLOG);

  #hmi > lev1 is group 6 (exclusively after 2011-04-06 09:45:04)
  $sqlcmd = "select tapeid,last_write from sum_tape where group_id=6 and closed=2 and last_write > '2011-04-07' order by last_write";
  #Use this query if you want to get 500+ more old tapes w/mixed groups on them
  #$sqlcmd = "select tapeid,last_write from sum_tape where group_id=6 and closed=2 order by last_write";
  $sth = $dbh->prepare($sqlcmd);
  if ( !defined $sth ) {
    print "Cannot prepare statement: $DBI::errstr\n";
    system "/bin/rm $runtag";
    exit;
  }
  $sth->execute;
  $h1pluscnt = 0; @h1plusunloads= (); @xtemp = ();
  $qlog = "/tmp/t950view.$user.6.log";
  if(!open(QLOG, ">$qlog")) {
    print "Can't open $qlog: $!\n";
    system "/bin/rm $runtag";
    exit;
  }
  print "View query result for group 6 in: $qlog\n";
  print QLOG "sqlcmd is: $sqlcmd\n"; #!!TEMP
  while(@h1plusquery = $sth->fetchrow()) { #get row from the DB
    @xtemp = @h1plusquery;
    $h1plustape = shift(@h1plusquery);
    if(grep(/$h1plustape/, @slottapes)) {
      #print "$h1plustape\n";
      push(@h1plusunloads, $h1plustape);
      print QLOG "@xtemp\n";
      $h1pluscnt++;
    }
  }
  close(QLOG);

  #hmi.rdVtrack is group 310 
  $sqlcmd = "select tapeid,last_write from sum_tape where group_id=310 and closed=2 order by last_write";
  $sth = $dbh->prepare($sqlcmd);
  if ( !defined $sth ) {
    print "Cannot prepare statement: $DBI::errstr\n";
    system "/bin/rm $runtag";
    exit;
  }
  $sth->execute;
  $rdvtrackcnt = 0; @rdvtrackunloads= (); @xtemp = ();
  $qlog = "/tmp/t950view.$user.310.log";
  if(!open(QLOG, ">$qlog")) {
    print "Can't open $qlog: $!\n";
    system "/bin/rm $runtag";
    exit;
  }
  print "View query result for group 310 in: $qlog\n";
  print QLOG "sqlcmd is: $sqlcmd\n"; #!!TEMP
  while(@rdvtrackquery = $sth->fetchrow()) { #get row from the DB
    @xtemp = @rdvtrackquery;
    $rdvtracktape = shift(@rdvtrackquery);
    if(grep(/$rdvtracktape/, @slottapes)) {
      #print "$rdvtracktape\n";
      push(@rdvtrackunloads, $rdvtracktape);
      print QLOG "@xtemp\n";
      $rdvtrackcnt++;
    }
  }
  close(QLOG);

  #hmi.rdVpspec is group 311 
  $sqlcmd = "select tapeid,last_write from sum_tape where group_id=311 and closed=2 order by last_write";
  $sth = $dbh->prepare($sqlcmd);
  if ( !defined $sth ) {
    print "Cannot prepare statement: $DBI::errstr\n";
    system "/bin/rm $runtag";
    exit;
  }
  $sth->execute;
  $rdVpspeccnt = 0; @rdVpspecunloads= (); @xtemp = ();
  $qlog = "/tmp/t950view.$user.311.log";
  if(!open(QLOG, ">$qlog")) {
    print "Can't open $qlog: $!\n";
    system "/bin/rm $runtag";
    exit;
  }
  print "View query result for group 311 in: $qlog\n";
  print QLOG "sqlcmd is: $sqlcmd\n"; #!!TEMP
  while(@rdVpspecquery = $sth->fetchrow()) { #get row from the DB
    @xtemp = @rdVpspecquery;
    $rdVpspectape = shift(@rdVpspecquery);
    if(grep(/$rdVpspectape/, @slottapes)) {
      #print "$rdVpspectape\n";
      push(@rdVpspecunloads, $rdVpspectape);
      print QLOG "@xtemp\n";
      $rdVpspeccnt++;
    }
  }
  close(QLOG);

  #hmi.tdVtimes/tdVtrack is group 320 
  $sqlcmd = "select tapeid,last_write from sum_tape where group_id=320 and closed=2 order by last_write";
  $sth = $dbh->prepare($sqlcmd);
  if ( !defined $sth ) {
    print "Cannot prepare statement: $DBI::errstr\n";
    system "/bin/rm $runtag";
    exit;
  }
  $sth->execute;
  $tdVtrackcnt = 0; @tdVtrackunloads= (); @xtemp = ();
  $qlog = "/tmp/t950view.$user.320.log";
  if(!open(QLOG, ">$qlog")) {
    print "Can't open $qlog: $!\n";
    system "/bin/rm $runtag";
    exit;
  }
  print "View query result for group 320 in: $qlog\n";
  print QLOG "sqlcmd is: $sqlcmd\n"; #!!TEMP
  while(@tdVtrackquery = $sth->fetchrow()) { #get row from the DB
    @xtemp = @tdVtrackquery;
    $tdVtracktape = shift(@tdVtrackquery);
    if(grep(/$tdVtracktape/, @slottapes)) {
      #print "$tdVtracktape\n";
      push(@tdVtrackunloads, $tdVtracktape);
      print QLOG "@xtemp\n";
      $tdVtrackcnt++;
    }
  }
  close(QLOG);

      $txt = "\nNumber of closed tapes\n\nHMI tlm: $hmicnt";
      $exptlmf->Label(-text => "$txt", -font => 'arial 16')->pack();
      $exptlmf->Button(
          -text => 'Export HMI tlm',
          -background => 'lightyellow',
          -command => [\&ExpHMItlm_sub, 4],	#hmi.tlm is group 4
          )->pack(-pady => 0);
      $txt = "\nAIA tlm: $aiacnt";
      $exptlmf->Label(-text => "$txt", -font => 'arial 16')->pack();
      $exptlmf->Button(
          -text => 'Export AIA tlm',
          -background => 'lightyellow',
          -command => [\&ExpHMItlm_sub, 5],	#aia.tlm is group 5
          )->pack(-pady => 0);
      $txt = "\nHMI lev0: $hlev0cnt";
      $exptlmf->Label(-text => "$txt", -font => 'arial 16')->pack();
      $exptlmf->Button(
          -text => 'Export HMI lev0',
          -background => 'lightyellow',
          -command => [\&ExpHMItlm_sub, 2],	#hmi.lev0 is group 2
          )->pack(-pady => 0);
      $txt = "\nAIA lev0: $alev0cnt";
      $exptlmf->Label(-text => "$txt", -font => 'arial 16')->pack();
      $exptlmf->Button(
          -text => 'Export AIA lev0',
          -background => 'lightyellow',
          -command => [\&ExpHMItlm_sub, 3],	#aia.lev0 is group 3
          )->pack(-pady => 0);
      $txt = "\nHMI lev1: $h1cnt";
      $exptlmf->Label(-text => "$txt", -font => 'arial 16')->pack();
      $exptlmf->Button(
          -text => 'Export HMI lev1',
          -background => 'lightyellow',
          -command => [\&ExpHMItlm_sub, 10],	#hmi.lev1 is group 10 
          )->pack(-pady => 0);
      $txt = "\nHMI > lev1: $h1pluscnt";
      $exptlmf->Label(-text => "$txt", -font => 'arial 16')->pack();
      $exptlmf->Button(
          -text => 'Export HMI > lev1',
          -background => 'lightyellow',
          -command => [\&ExpHMItlm_sub, 6],	#hmi > lev1 is group 6
          )->pack(-pady => 0);
      $txt = "\nHMI rdvtrack: $rdvtrackcnt";
      $exptlmf->Label(-text => "$txt", -font => 'arial 16')->pack();
      $exptlmf->Button(
          -text => 'Export HMI rdvtrack',
          -background => 'lightyellow',
          -command => [\&ExpHMItlm_sub, 310],	#hmi rdvtrack is group 310
          )->pack(-pady => 0);
      $txt = "\nHMI rdVpspec: $rdVpspeccnt";
      $exptlmf->Label(-text => "$txt", -font => 'arial 16')->pack();
      $exptlmf->Button(
          -text => 'Export HMI rdVpspec',
          -background => 'lightyellow',
          -command => [\&ExpHMItlm_sub, 311],	#hmi rdVpspec is group 311
          )->pack(-pady => 0);
      $txt = "\nHMI tdVtimes/tdVtrack: $tdVtrackcnt";
      $exptlmf->Label(-text => "$txt", -font => 'arial 16')->pack();
      $exptlmf->Button(
          -text => 'Export HMI tdVtimes/tdVtrack',
          -background => 'lightyellow',
          -command => [\&ExpHMItlm_sub, 320],	#hmi tdVtimes/tdVtrack is group 320
          )->pack(-pady => 0);
      $exptlmf->Button(
          -text => 'Redisplay-in case you retarted t950view',
          -background => 'lightgrey',
          -command => [\&ExpHMItlm_sub, -1],	#use last group #
          )->pack(-pady => 20);
      $exptlmf->Button(
          -text => 'Close',
          -background => 'grey',
          -command => sub {$exptlmf->destroy();},
          )->pack(-pady => 20);
      return; 
}

sub Exit_sub {
  $dbh->disconnect();
  if($pid0) {			#kill off our child
    `kill $pid0`;
  }
  system "/bin/rm $runtag";
  exit;
}

sub Clean_sub {
  if(Exists($cleanf)) {
    $cleanf->destroy();
  }
  $cleanf = $mw->Toplevel();
  #$statf->geometry("400x200-10-500");
  $cleanf->geometry("300x150");
  $cleanf->title("tape clean");
  for($i = 0; $i < $numclean; $i++) {
    $xslot = $cleanslots[$i];
    if(index($slottapes[$xslot], "CLN") == 0) {
      $CLEANSLOT = $xslot + 1;
      if($Hofslotused{$CLEANSLOT}) { 
        next; #already in use 
      }
      last;
    }
  }
  if($i == $numclean) {		#no free cleaning tape
    $txt = "No available cleaning tape\nTry later";
    $cleanf->Label(-text => "$txt", -font => 'arial 16')->pack();
    $cleanf->Button(
        -text => 'Close',
        -background => 'grey',
        -command => sub {$cleanf->destroy();},
        )->pack();
    return;
  }
  $txt = "Cleaning tape in slot $CLEANSLOT\nSelect drive# to clean:";
  $cleanf->Label(-text => "$txt", -font => 'arial 16')->pack();
  if(!$interactive) {
    $txt = "\nError: you must be the\ninteractive user to clean";
    $cleanf->Label(-text => "$txt", -font => 'arial 16')->pack();
    $cleanf->Button(
        -text => 'Close',
        -background => 'grey',
        -command => sub {$cleanf->destroy();},
        )->pack();
  }
  else {
    $drivetoclean = -1;
    $cleanf->Label(-text => 'Drive#:') ->pack(-side => 'left');
    $cleanf->Entry(-textvariable => \$drivetoclean, -width => 6, 
	-font=>'courier 10 bold',
        -validate => 'key', -validatecommand => \&Id_ck)
        ->pack(-side=>'left');
    $cleanf->Button(-text => "Go", -font=>'courier 10 bold', 
	-command => \&Clean_ok_sub,)
        ->pack(-side=> 'left');
  }
}

sub Clean_ok_sub {
  if(Exists($cleanf)) {
    $cleanf->destroy();
  }
  $cleanf = $mw->Toplevel();
  $cleanf->geometry("310x150");
  $cleanf->title("tape clean ok");
  
    if($drivetoclean < 0 || $drivetoclean >= $MAX_DRIVES) {
      $txt = "\nIllegal drive #. Please start over.";
      $cleanf->Label(-text => "$txt", -font => 'arial 16')->pack();
      $cleanf->Button(
          -text => 'Close',
          -background => 'grey',
          -command => sub {$cleanf->destroy();},
          )->pack();
      return;
    }
  $txt = "\nDrive to clean is drive# $drivetoclean";
  $cleanf->Label(-text => "$txt", -font => 'arial 16')->pack();
  $txt = "(Please wait for any previous\ncleaning tape to load before starting)";
  $cleanf->Label(-text => "$txt", -font => 'arial 16')->pack();
  if($drivebusy[$drivetoclean] == 1) {
    $txt = "\nSorry drive is busy. Try again later.";
    $cleanf->Label(-text => "$txt", -font => 'arial 16')->pack();
    $cleanf->Button(
        -text => 'Close',
        -background => 'grey',
        -command => sub {$cleanf->destroy();},
        )->pack();
    return;
  }
      $cleanf->Button(
          -text => 'Start Clean',
          -background => 'lightsalmon',
	  -command => \&Clean_start_sub,
          )->pack();

      $cleanf->Button(
          -text => 'Cancel',
          -background => 'grey',
          -command => sub {$cleanf->destroy();},
          )->pack();
  return;
}

sub Clean_start_sub {
  if(Exists($cleanf)) {
    $cleanf->destroy();
  }
  $cleanf = $mw->Toplevel();
  $cleanf->geometry("300x150");
  $cleanf->title("tape clean start");
  $drivebusy[$drivetoclean] = 1;         #make sure reset when CleaningDone
  $txt = "\nTape clean in progress for drive# $drivetoclean";
  $cleanf->Label(-text => "$txt", -font => 'arial 16', -background => 'lightsalmon')->pack(-pady=>20);
  $cleanf->Button(
        -text => 'Close',
        -background => 'grey',
        -command => sub {$cleanf->destroy();},
        )->pack();
  $txt = "$CLEANSLOT $drivetoclean";
  $Hofslotused{$CLEANSLOT} = 1;
    if($pid0 = fork) {
      #This is the parent. The child's pid is in $pid0
      print LOG "          \n"; #!!don't lose first few chars on line??
      print LOG "fork impexp start processing pid=$pid0 for impexp clean.\n";
    } elsif (defined $pid0) {     # $pid0 is zero here if defined. run impexp
      exec "impexp clean $txt";
    }  else {
      #fork error
      $cleanf->Label(-text => "Fatal Error: Can't fork", -font => 'arial 12 bold')->pack(@pl);
      print "!!Fatal Error: Can't fork: $!\n";
      return;
    }
}

sub commify {
    my $text = reverse $_[0];
    $text =~ s/(\d\d\d)(?=\d)(?!\d*\.)/$1,/g;
    return scalar reverse $text;
}

#Called by the ExpClosed_Done() routine after the operator hits the
#'ExpClosed Done' button.
#@txorder containts the target slot #s.
sub ExpHMItlm_load_sub {
  my ($unload_load) = @_;
  if(Exists($ExpHtlmf)) {
    $ExpHtlmf->destroy();
  }
  $ExpHtlmg = $mw->Toplevel();
  #$ExpHtlmg->geometry("590x800");
  $ExpHtlmg->geometry("580x300+500+40");
  $ExpHtlmg->title("Export import new tapes");
  $ExpHtlmg->Button(
        -text => 'Close',
        -background => 'grey',
        -command => sub {$ExpHtlmg->destroy();},
        )->pack();
    $ExpHtlmg->Label(-text=> "Load of New Tapes In Progress (I will notify you when done)", 
		 -background=>'orange', -font => 'arial 12 bold')->pack(@pl);
    $ExpHtlmg->Label(-text=> "NOTE: EE slots will show old tape#s until next inventory", 
		 -font => 'arial 12 bold')->pack(@pl);
#    $ExpHtlmg->Label(-text => "Export Slot#s:", 
#		 -font => 'arial 12 bold')->pack(@pl);
    @loadids = ();
#    $E0 = $ExpHtlmg->Frame(-borderwidth => 0) ->pack(-side => 'left');
#    $E0->Label(-text => "Tapes to reload:", 
#		-font => 'arial 12 bold')->pack(@pl);
    #do in groups of 10 to max of 40
    #if($xxcnt > 30) { $xxcnt = 30; }
    if($xxcnt > 40) { $xxcnt = 40; }
    $d = int($xxcnt/10);
    $nneed = $d * 10;
    #$nneed = 9; #!!!TEMP for test
    for($i=0; $i < $nneed; $i++) {
      $tpid = shift(@txorder);
      push(@loadids, $tpid);
      #delete($Hofreplace{$tpid});	#remove this tape from the hash !!TBD
      #$E0->Label(-text => $tpid, 
      #	-background=>'orange', -font => 'arial 12 bold')->pack(@pl);
    }
#    $ff00 = $ExpHtlmg->Frame(-borderwidth => 3, -relief=>'groove')
#  		->pack(-side => 'left');
#    &show_notape_in_slots_exp;		#show blank tape slots

      if($pid0 = fork) {
        #This is the parent. The child's pid is in $pid0
        print LOG "          \n";	#!!don't lose first few chars on line??
        print LOG "fork exportclosed start processing pid=$pid0.\n";
      } elsif (defined $pid0) {     # $pid0 is zero here if defined.
          exec "exportclosed load @loadids";
      }  else {
        #fork error
        $ExpHtlmg->Label(-text => "Fatal Error: Can't fork", -font => 'arial 12 bold')->pack(@pl);
        print "!!Fatal Error: Can't fork: $!\n";
      }
}

#All the new tapes have been loaded into the t950 slots.
#Re-inventory (done by expclosedo_1() in tape_svc) and go to normal operations.
sub ExpClosed_ReInv {
  if(Exists($ExpHtlmg)) {
    $ExpHtlmg->destroy();
  }
  sleep(5);
  $current_page = -1;	#force redraw
  //&show_tape_in_slots(0);  	#display where tapes are
  &Display_tape_in_slots(0);
}

#Called from Exptlm_sub which makes an array of the closed tapes
#for each group that can be exported.
#The arg is the group# for unload of closed tapes into the EE slots. 
sub ExpHMItlm_sub {
  my ($grpn) = @_;
  $bypass = 0;
  SWITCH: {
    if($grpn == -1) {
      $grpn = $grpnsave;
      $bypass = 1;
    }
    if($grpn == 2) {
      $xxcnt = $hlev0cnt;
      @txorder = @hlev0unloads;
      last SWITCH;
    }
    if($grpn == 3) {
      $xxcnt = $alev0cnt;
      @txorder = @alev0unloads;
      last SWITCH;
    }
    if($grpn == 4) {		#hmi.tlm
      $xxcnt = $hmicnt;
      @txorder = @hmiunloads;
      last SWITCH;
    }
    if($grpn == 5) {
      $xxcnt = $aiacnt;		#aia.tlm
      @txorder = @aiaunloads;
      last SWITCH;
    }
    if($grpn == 6) {
      $xxcnt = $h1pluscnt;	#hmi > lev1
      @txorder = @h1plusunloads;
      last SWITCH;
    }
    if($grpn == 10) {
      $xxcnt = $h1cnt;		#hmi.lev1
      #@txorder = @h1unloads;
      #reverse order and use most recent tape for hmi.lev1
      @txorder = ();
      while($ul = pop(@h1unloads)) {
        push(@txorder, $ul);
      }
      last SWITCH;
    }
    if($grpn == 310) {
      $xxcnt = $rdvtrackcnt;	#hmi.rdVtrack
      @txorder = @rdvtrackunloads;
      last SWITCH;
    }
    if($grpn == 311) {
      $xxcnt = $rdVpspeccnt;	#hmi.rdVpspec
      @txorder = @rdVpspecunloads;
      last SWITCH;
    }
  }
  $grpnsave = $grpn;
  if(Exists($ExpHtlmf)) {
    $ExpHtlmf->destroy();
  }
  if(Exists($exptlmf)) {
    $exptlmf->destroy();
  }
  $ExpHtlmf = $mw->Toplevel();
  $ExpHtlmf->geometry("590x820");
  $ExpHtlmf->title("Export closed tapes/import new tapes");
  $ExpHtlmf->Button(
        -text => 'Close',
        -background => 'grey',
        -command => sub {$ExpHtlmf->destroy();},
        )->pack();
    $ExpHtlmf->Label(-text=> "Unload of Closed Tapes In Progress (I will notify you when done)", 
		 -background=>'orange', -font => 'arial 12 bold')->pack(@pl);
    $ExpHtlmf->Label(-text => "Export Slot#s:", 
		 -font => 'arial 12 bold')->pack(@pl);
    @unloadids = ();
    $E0 = $ExpHtlmf->Frame(-borderwidth => 0) ->pack(-side => 'left');
    $E0->Label(-text => "Tapes to unload:", 
		-font => 'arial 12 bold')->pack(@pl);
    #do in groups of 10 to max of 40
    #if($xxcnt > 30) { $xxcnt = 30; }
    if($xxcnt > 40) { $xxcnt = 40; }
    $d = int($xxcnt/10);
    $nneed = $d * 10;
    #$nneed = 9; #!!!TEMP for test !!
    for($i=0; $i < $nneed; $i++) {
      $tpid = shift(@txorder);
      push(@unloadids, $tpid);
      delete($Hofreplace{$tpid});	#remove this tape from the hash
      $E0->Label(-text => $tpid, 
	-background=>'orange', -font => 'arial 12 bold')->pack(@pl);
    }
    $ff00 = $ExpHtlmf->Frame(-borderwidth => 3, -relief=>'groove')
  		->pack(-side => 'left');
    &show_notape_in_slots_exp;		#show blank tape slots

    if(!$bypass) {
      if($pid0 = fork) {
        #This is the parent. The child's pid is in $pid0
        print LOG "          \n";	#!!don't lose first few chars on line??
        print LOG "fork exportclosed start processing pid=$pid0.\n";
      } elsif (defined $pid0) {     # $pid0 is zero here if defined.
          exec "exportclosed unload @unloadids";
      }  else {
        #fork error
        $ExpHtlmf->Label(-text => "Fatal Error: Can't fork", -font => 'arial 12 bold')->pack(@pl);
        print "!!Fatal Error: Can't fork: $!\n";
      }
    }
}

sub show_notape_in_slots_exp {
  my $row = 0; $column = 0; $rows_per_col = 20;
  foreach $i ($FIRST_EXP_SLOT .. $LAST_EXP_SLOT) {
    $tapeid = "-------------";
    $y = "\$slotbtx$i";
    $x = "\$slotbtx$i = \$ff00->Button(
        -text => \$tapeid,
        -background => 'grey',
        -relief => 'sunken',
        -command => \[\\&Tape_info, \$tapeid\],
        )";
     eval($x);
     $txt = "      ".$i;
     my $l = $ff00->Label(-text => $txt, -anchor => 'w', -justify => 'left'); 
    Tk::grid( $l, -row => $row, -column => $column, 
		-sticky => 'nw', -pady => 0);
    Tk::grid( eval($y), -row => $row, -column => ($column + 1),
		-sticky => 'w', -pady => 0);
    $ff00->gridRowconfigure($row++,-weight => 0);
    $f0x->gridColumnconfigure($column,-weight => 1, -minsize => 10);
    $f0x->gridColumnconfigure($column+1,-weight => 8, -minsize => 10);
    if($row == $rows_per_col) { $row = 0; $column += 2; }
  }
  #put in tapeid's:
  foreach $i ($FIRST_EXP_SLOT .. $LAST_EXP_SLOT) {
    $tapeid = $slottapes[$i-1];
    if($tapeid eq "-------------") {
      $tapeidinfo = $emptyslottapes[$i-1];
    }
    else {
      $tapeidinfo = $tapeid;
    }
    $y = "\$slotbtx$i";
    $x = "\$slotbtx$i->configure(-text => \$tapeid,
                -command => \[\\&Tape_info, \$tapeidinfo\])";
     eval($x);
  }
}

