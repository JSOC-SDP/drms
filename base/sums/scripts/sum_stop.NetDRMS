#!/usr/bin/perl -w
#sum_stop.NetDRMS
#This is to stop the sum_svc and multiple related servers on a remote drms.
#

use FindBin qw($RealBin);
# use 5.010_000; # See ExtractVal() - if you don't want to upgrade to 5.10, uncomment lines in this routine.

$| = 1;                 #flush output as we go

use constant PID_FILE => "sums.pidfile";

$mailflg = 1;
$forceflg = 0;

if ($#ARGV >= 0)
{
   while ($ARGV[0] =~ /^-/) {
      $_ = shift;
      if (/^-M(.*)/) {
         $mailflg = 0;
      }
      elsif (/^-f(.*)/) {
         $forceflg = 1;
      }
      else {
         print "Illegal switch\n";
         exit;
      }
   }
}

$wdpath = $RealBin;
$ldir = "$wdpath/../../../include/localization.h";
$sdir = "$wdpath/../../drms/apps/serverdefs.h";

if(-e $ldir) {
  $xdir = $ldir;
  $localization = 1;
}
else {
  $xdir = $sdir;
  $localization = 0;
}
@servdefs = `cat $xdir`;
@def = grep(/^#define SUM_NUMSUM/, @servdefs);
$numsum = ExtractVal($def[0]);
if(!defined($numsum) || !$numsum) {
  print "ERROR: Can't get SUM_NUMSUM from $xdir\n";
  exit(1);
}
#print "Number of SUM process sets to spawn = $numsum\n";
@def = grep(/^#define SUM_MAXNUMSUM/, @servdefs);
$maxnumsum = ExtractVal($def[0]);
#print "Max number of SUM process can spawn = $maxnumsum\n";

if($numsum == 0 || !defined($maxnumsum) || $numsum > $maxnumsum) {
  print "**ERROR: in $xdir def for SUM_NUMSUM\n";
  print "Number must be between 1 and $maxnumsum\n";
  exit;
}

@def = grep(/^#define SUMSERVER/, @servdefs);
$sumserver = ExtractVal($def[0]);

$host = `hostname`;
chomp($host);
if(($pos = index($host, '.')) != -1) {
  $host = substr($host, 0, $pos);
}
if($host ne $sumserver) {
  print "This can only be run on $sumserver.\n";
  exit;
}
@def = grep(/^#define SUMS_MANAGER/, @servdefs);
$sumsmanager = ExtractVal($def[0]);

#print "SUMS_MANAGER is $sumsmanager\n";
$user = $ENV{'USER'};
if($user ne $sumsmanager) {
  print "You must be user $sumsmanager to run\n";
  exit;
}

@def = grep(/^#define SUMLOG_BASEDIR/, @servdefs);
$logDir = ExtractVal($def[0]);
print "SUMS log dir is $logDir\n";

$pidFile = $logDir . "/" . &PID_FILE;

$PID = getppid;
$LOGFILE = "/tmp/sum_stop.NetDRMS.$PID";
open(LOG, ">$LOGFILE") || die "Can't open $LOGFILE: $!\n";
($sec,$min,$hour,$mday,$mon,$year) = localtime(time);
$sec2 = sprintf("%02d", $sec);
$min2 = sprintf("%02d", $min);
$hour2 = sprintf("%02d", $hour);
$mday2 = sprintf("%02d", $mday);
$mon2 = sprintf("%02d", $mon+1);
# $year2 = sprintf("%02d", $year);
$date = (1900 + $year).".".$mon2.".$mday2"._.$hour2.":$min2".":$sec2";
print "\nsum_stop.NetDRMS at $date\n\n";
print LOG "sum_stop.NetDRMS at $date\n\n";
    
    # To kill all SUMS processes, all you gotta do is send the SIGUSR1 signal to the sums_procck.py process.
    # The pid of the sums_procck.py process for the current SUMS session is in the SUMS pidfile. One line
    # contains just a number - that number is the pid.
    $err = 0;
    if (-e $pidFile)
    {
        print "NOTE: This will stop sum_svc and related processes. Make sure you want to do this\n";
        print "Enter reason for stop (terminate with single '.' or ^D):\n>> ";
        print LOG "Enter reason for stop (terminate with single '.' or ^D):\n";
        while(<STDIN>) {
            chomp($_);
            if($_ eq ".") { last; }
            else {
                print LOG ">> $_\n";
                print ">> ";
            }
        }

        print "Please identify yourself:\n>> ";
        print LOG "Please identify yourself:\n";
        $ID = <STDIN>;
        chomp($ID);
        if(!$ID) { $ID = "<none>"; }
        print LOG ">> $ID\n";

        if (open(PID_FILE_H, "<$pidFile"))
        {
            while ($line = <PID_FILE_H>)
            {
                if ($line =~ /^\s*(\d+)\s*$/)
                {
                    # found the pid
                    $pid = $1;
                    last;
                }
            }
            close(PID_FILE_H);
        }
        else
        {
            $msg = "Unable to open pid file $pidFile. Exiting without stopping any SUMS processes.\n";
            print STDERR $msg;
            print LOG $msg;
            $err = 1;
        }
    }
    else
    {
        $msg = "pid file $pidFile does not exist. SUMS is not running.\n";
        print STDERR $msg;
        print LOG $msg;
        $err = 1;
    }

    if (!$err)
    {
        # send USR1 signal to sums_procck.py
        kill('USR1', $pid);
        
        # I don't think there is a general way to wait, with a system call, for a process that is not a child. In this case, the process, if
        # it successfully terminates will remove the pid file.
        $count = 0;
        while (-e $pidFile)
        {
            if ($count >= 20)
            {
                $msg = "Timed-out waiting for sums_procck.py (pid $pid) to exit.\n";
                print STDERR $msg;
                print LOG $msg;
                $err = 1;
                last;
            }
            
            $count++;
            sleep(1);
        }

    }

if (!$err)
{
    print "SUM Stop NetDRMS Complete\n";
    print LOG "SUM Stop NetDRMS Complete\n";
}
close(LOG);

sub ExtractVal
{
   my($line) = $_[0];

   # requires Perl version 5.10
   #my($val) = ($line =~ /^#define\s+\S+\s+(?|\"([^\s\."]+)(\..*)?\"|([^\s\.]+)(\..*)?)\s*/)[0];

   # alternate that will work on Perl version 5.8
   #my($val);
   #if ($line =~ /^#define\s+\S+\s+\"([^\s\."]+)(\..*)?\"/)
   #{
   #   $val = $1;
   #}
   #elsif ($line =~ /^#define\s+\S+\s+([^\s\.]+)(\..*)?\s*/)
   #{
   #   $val = $1;
   #}

   # Igor's regex
   my($val) = ($line =~ /^#define\s+\S+\s+"?([^"\s\.]+)(\.(.*))?/);

   return $val;
}
