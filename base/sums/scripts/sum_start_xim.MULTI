#!/usr/bin/perl
#/home/production/cvs/JSOC/base/sums/scripts/sum_start_xim.MULTI
#This is to start the xsum_svc and multiple related servers on xim.
#Call with -M will not send mail notification.
#Call with -f to force a stop if needed.
#
$| = 1;                 #flush output as we go
$ENV{'SUMSERVER'} = "xim";      #make sure we stay in this machine
$DB = "jsoc_sums";	#the "real" db that production uses for sums
#$DB = "jim";	#the "real" db that production uses for sums on xim
$DBDRMS = "jsoc_sums";	#the db use for drms (used by sum_pe_svc)
$GREPPS = "388";	#grep for this in ps -ef
#$GREPPS = "jim";
$HOST = "xim.Stanford.EDU";		#where xsum_svc runs

$user = $ENV{'USER'};
if($user ne "production") {
  print "You must be user production to run\n";
  exit;
}
$host = `hostname`;
chomp($host);
if($host ne $HOST) {
  print "This can only be run on $HOST.\n";
  exit;
}
$mailflg = 1;
$forceflg = 0;
$forcearg = "";
while ($ARGV[0] =~ /^-/) {
  $_ = shift;
  if (/^-M(.*)/) {
    $mailflg = 0;
  }
  elsif(/^-f(.*)/) {
    $forceflg = 1;
    $forcearg = "-f";
  }
  else {
    print "Illegal switch\n";
    exit;
  }
}

#print "  If you are asked for a passphrase then you do not have \n";
#print "  ssh-agent set up properly on $HOST.\n";
#print "  Ctrl-C this script, and do this:\n";
#print "  > ssh-agent | head -2 > /var/tmp/ssh-agent.env
#  > chmod 600 /var/tmp/ssh-agent.env
#  > source /var/tmp/ssh-agent.env
#  > ssh-add
#  (The production password)\n";

$PID = getppid;
$MLOGFILE = "/tmp/sum_start_mail_xim_multi.$PID";
$LOGFILE = "/tmp/sum_start_xim_multi.$PID";
open(LOG, ">$LOGFILE") || die "Can't open $LOGFILE: $!\n";
open(MLOG, ">$MLOGFILE") || die "Can't open $MLOGFILE: $!\n";
($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
$sec2 = sprintf("%02d", $sec);
$min2 = sprintf("%02d", $min);
$hour2 = sprintf("%02d", $hour);
$mday2 = sprintf("%02d", $mday);
$mon2 = sprintf("%02d", $mon+1);
$year2 = sprintf("%02d", $year);
$date = (1900 + $year).".".$mon2.".$mday2"._.$hour2.":$min2".":$sec2";
$dtag = (1900 + $year).".".$mon2.".$mday2".".$hour2"."$min2"."$sec2"; #for log name
$sumlog = "sum_svc_$dtag.log";
print "sum_start_xim.MULTI at $date\n\n";
print LOG "sum_start_xim.MULTI at $date\n\n";
print MLOG "sum_start_xim.MULTI at $date\n";
print MLOG "See $LOGFILE for more details\n";

@ps_prod = `ps -ef | grep $GREPPS`;
#print "The ps -ef for producttion is:\n@ps_prod\n";
print LOG "The ps -ef for product is:\n@ps_prod\n";
while($_ = shift(@ps_prod)) {
  if(/^$GREPPS/) {	#do for all production processes
    if(/sum_start_xim.MULTI/) {	#don't kill ourselves
      next;
    }
    if(/Sdelser $DB/) {
      ($a, $psid, $c) = split(/\s+/, $_);
      $process = "Sdelser";
    }
    elsif(/Sinfo $DB/) {
      ($a, $psid, $c) = split(/\s+/, $_);
      $process = "Sinfo";
    }
    elsif(/Sinfo1 $DB/) {
      ($a, $psid, $c) = split(/\s+/, $_);
      $process = "Sinfo1";
    }
    elsif(/Sinfo2 $DB/) {
      ($a, $psid, $c) = split(/\s+/, $_);
      $process = "Sinfo2";
    }
    elsif(/Sput $DB/) {
      ($a, $psid, $c) = split(/\s+/, $_);
      $process = "Sput";
    }
    elsif(/Sput1 $DB/) {
      ($a, $psid, $c) = split(/\s+/, $_);
      $process = "Sput1";
    }
    elsif(/Sput2 $DB/) {
      ($a, $psid, $c) = split(/\s+/, $_);
      $process = "Sput2";
    }
    elsif(/Sget $DB/) {
      ($a, $psid, $c) = split(/\s+/, $_);
      $process = "Sget";
    }
    elsif(/Sget1 $DB/) {
      ($a, $psid, $c) = split(/\s+/, $_);
      $process = "Sget1";
    }
    elsif(/Sget2 $DB/) {
      ($a, $psid, $c) = split(/\s+/, $_);
      $process = "Sget2";
    }
    elsif(/Salloc $DB/) {
      ($a, $psid, $c) = split(/\s+/, $_);
      $process = "Salloc";
    }
    elsif(/Salloc1 $DB/) {
      ($a, $psid, $c) = split(/\s+/, $_);
      $process = "Salloc1";
    }
    elsif(/Salloc2 $DB/) {
      ($a, $psid, $c) = split(/\s+/, $_);
      $process = "Salloc2";
    }
    elsif(/Sopen $DB/) {
      ($a, $psid, $c) = split(/\s+/, $_);
      $process = "Sopen";
    }
    elsif(/Sopen1 $DB/) {
      ($a, $psid, $c) = split(/\s+/, $_);
      $process = "Sopen1";
    }
    elsif(/Sopen2 $DB/) {
      ($a, $psid, $c) = split(/\s+/, $_);
      $process = "Sopen2";
    }
    elsif(/xsum_svc $DB/ || /xsum_svc -o $DB/) {
      ($a, $psid, $c) = split(/\s+/, $_);
      $process = "xsum_svc";
    }
    #NOTE: the tape_svc and drives are not relevent. They run on d02 now.
    #elsif(/tape_svc $DB/ || /tape_svc -o $DB/) {
    #  ($a, $psid, $c) = split(/\s+/, $_);
    #  $process = "tape_svc";
    #}
    #elsif(/drive0_svc $DB/) {
    #  ($a, $psid, $c) = split(/\s+/, $_);
    #  $process = "drive0_svc";
    #}
    #elsif(/drive1_svc $DB/) {
    #  ($a, $psid, $c) = split(/\s+/, $_);
    #  $process = "drive1_svc";
    #}
    #elsif(/robot0_svc $DB/) {
    #  ($a, $psid, $c) = split(/\s+/, $_);
    #  $process = "robot0_svc";
    #}
    elsif(/sum_rm $DB/) {
      ($a, $psid, $c) = split(/\s+/, $_);
      $process = "sum_rm";
    }
    #elsif(/sum_pe_svc $DBDRMS/) {
    #  ($a, $psid, $c) = split(/\s+/, $_);
    #  $process = "sum_pe_svc";
    #}
    elsif(/ sumck/) {
      if($sumck) {
        ($a, $psid, $c) = split(/\s+/, $_);
        $process = "sumck";
      }
    }
    else {
      next;
    }
    print "** NOTE: \"$process $DB\" still running\n";
    print LOG "** NOTE: \"$process $DB\" still running\n";
      print "Do you want me to do a sum_stop_xim.MULTI followed by a sum_start_xim.MULTI (y or n):\n";
      while(<STDIN>) {
        chop($_);
        if(($_ eq "Y") || ($_ eq "y")) { 
          last;
        }
        else { 
          print "Aborting sum_start_xim.MULTI\n";
          exit;
        }
      }
        if($mailflg) {
          $cmd = "sum_stop_xim.MULTI $forcearg";
        }
        else {
          $cmd = "sum_stop_xim.MULTI -M $forcearg";
        }
        if(system($cmd)) {
          print "Error: failure on sum_stop_xim.MULTI\n";
          exit;
        }
        #make sure nothing left running
        @ps_prod = `ps -ef | grep $GREPPS`;
        while($_ = shift(@ps_prod)) {
          if(/^$GREPPS/) {	#do for all production processes
            if(/Sdelser $DB/) {
              print "Error: Sdelser $DB still running after sum_stop?\n";
              exit;
            }
            elsif(/xsum_svc $DB/ || /xsum_svc -o $DB/) {
              print "Error: xsum_svc $DB still running after sum_stop?\n";
              exit;
            }
            elsif(/Sinfo $DB/) {
              print "Error: Sinfo $DB still running after sum_stop?\n";
              exit;
            }
            elsif(/Sinfo1 $DB/) {
              print "Error: Sinfo1 $DB still running after sum_stop?\n";
              exit;
            }
            elsif(/Sinfo2 $DB/) {
              print "Error: Sinfo2 $DB still running after sum_stop?\n";
              exit;
            }
            elsif(/Sput $DB/) {
              print "Error: Sput $DB still running after sum_stop?\n";
              exit;
            }
            elsif(/Sput1 $DB/) {
              print "Error: Sput1 $DB still running after sum_stop?\n";
              exit;
            }
            elsif(/Sput2 $DB/) {
              print "Error: Sput2 $DB still running after sum_stop?\n";
              exit;
            }
            elsif(/Sget $DB/) {
              print "Error: Sget $DB still running after sum_stop?\n";
              exit;
            }
            elsif(/Sget1 $DB/) {
              print "Error: Sget1 $DB still running after sum_stop?\n";
              exit;
            }
            elsif(/Sget2 $DB/) {
              print "Error: Sget2 $DB still running after sum_stop?\n";
              exit;
            }
            elsif(/Salloc $DB/) {
              print "Error: Salloc $DB still running after sum_stop?\n";
              exit;
            }
            elsif(/Salloc1 $DB/) {
              print "Error: Salloc1 $DB still running after sum_stop?\n";
              exit;
            }
            elsif(/Salloc2 $DB/) {
              print "Error: Salloc2 $DB still running after sum_stop?\n";
              exit;
            }
            elsif(/Sopen $DB/) {
              print "Error: Sopen $DB still running after sum_stop?\n";
              exit;
            }
            elsif(/Sopen1 $DB/) {
              print "Error: Sopen1 $DB still running after sum_stop?\n";
              exit;
            }
            elsif(/Sopen2 $DB/) {
              print "Error: Sopen2 $DB still running after sum_stop?\n";
              exit;
            }
            #tape_svc and drives on d02 now
            elsif(/sum_rm $DB/) {
              print "Error: sum_rm $DB still running after sum_stop?\n";
              exit;
            }
            #elsif(/sum_pe_svc $DBDRMS/) {
            #  print "Error:sum_pe_svc $DBDRMS still running after sum_stop?\n";
            #  exit;
            #}
            else {
              next;
            }
          }
        }
  }
}
#    `ssh d02.stanford.edu /bin/rm -f /usr/local/logs/SUM/RESTART_AFTER_REBOOT`;
#    print "Is this sum_start following a d02 reboot?\n";
#    print "If you answer 'y' all the T950 tapes in drives will be unloaded\n";
#    print "Starting after a reboot? (y or n): ";
#    while(<STDIN>) {
#      chop($_);
#      if(($_ eq "Y") || ($_ eq "y")) {
#        `ssh d02.stanford.edu touch /usr/local/logs/SUM/RESTART_AFTER_REBOOT`;
#      }
#      last;
#    }

        print "** Now starting: xsum_svc $DB\n";
        print LOG "** Now starting: xsum_svc $DB\n";
        #$cmd = "sum_pe_svc $DBDRMS &";
        #if(system($cmd)) {
        #  print "Error: failure on sum_pe_svc $DBDRMS\n";
        #}
        $cmd = "Sdelser $DB $sumlog &";
        if(system($cmd)) {
          print "Error: failure on Sdelser $DB\n";
        }
        $cmd = "Sinfo $DB $sumlog &";
        if(system($cmd)) {
          print "Error: failure on Sinfo $DB\n";
        }
        $cmd = "Sinfo1 $DB $sumlog &";
        if(system($cmd)) {
          print "Error: failure on Sinfo1 $DB\n";
        }
        $cmd = "Sinfo2 $DB $sumlog &";
        if(system($cmd)) {
          print "Error: failure on Sinfo2 $DB\n";
        }
        $cmd = "Sput $DB $sumlog &";
        if(system($cmd)) {
          print "Error: failure on Sput $DB\n";
        }
        $cmd = "Sput1 $DB $sumlog &";
        if(system($cmd)) {
          print "Error: failure on Sput1 $DB\n";
        }
        $cmd = "Sput2 $DB $sumlog &";
        if(system($cmd)) {
          print "Error: failure on Sput2 $DB\n";
        }
        $cmd = "Sget $DB $sumlog &";
        if(system($cmd)) {
          print "Error: failure on Sget $DB\n";
        }
        $cmd = "Sget1 $DB $sumlog &";
        if(system($cmd)) {
          print "Error: failure on Sget1 $DB\n";
        }
        $cmd = "Sget2 $DB $sumlog &";
        if(system($cmd)) {
          print "Error: failure on Sget2 $DB\n";
        }
        $cmd = "Salloc $DB $sumlog&";
        if(system($cmd)) {
          print "Error: failure on Salloc $DB\n";
        }
        $cmd = "Salloc1 $DB $sumlog &";
        if(system($cmd)) {
          print "Error: failure on Salloc1 $DB\n";
        }
        $cmd = "Salloc2 $DB $sumlog &";
        if(system($cmd)) {
          print "Error: failure on Salloc2 $DB\n";
        }
        $cmd = "Sopen $DB $sumlog &";
        if(system($cmd)) {
          print "Error: failure on Sopen $DB\n";
        }
        $cmd = "Sopen1 $DB $sumlog &";
        if(system($cmd)) {
          print "Error: failure on Sopen1 $DB\n";
        }
        $cmd = "Sopen2 $DB $sumlog &";
        if(system($cmd)) {
          print "Error: failure on Sopen2 $DB\n";
        }
        $cmd = "xsum_svc $DB $sumlog &";
        if(system($cmd)) {
          print "Error: failure on xsum_svc $DB\n";
        }

#        $cmd = "ssh d02.stanford.edu sum_forker  $DB $date&";
#        if(system($cmd)) {
#          print "Error: failure on $cmd\n";
#        }

        $cmd = "/home/production/cvs/JSOC/base/sums/scripts/sumck_ximM &";
        if(system($cmd)) {
          print "Error: failure on sumck_ximM\n";
        }
        print "SUM xim MULTI Start Complete\n";
        print LOG "SUM xim MULTI Start Complete\n";
        close(LOG);
        close(MLOG);
        $mail = "Mail -s \"SUM xim MULTI Start Complete\"";
        #$to = "jsoc_users";
        $to = "jim";
        $cmd = "$mail $to < $MLOGFILE";
        if($mailflg) { system $cmd; }
        exit;

