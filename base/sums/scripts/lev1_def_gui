eval 'exec /home/jsoc/bin/$JSOC_MACHINE/perl -S $0 "$@"'
    if 0;
#
#
#/home/production/cvs/JSOC/base/sums/scripts/lev1_def_gui
#Perl/Tk gui for use to make lev1 definitive data
#
#
use Tk;
use DBI;
use POSIX ":sys_wait_h";

$IMGDIR = "/home/production/cvs/JSOC/base/sums/scripts/gallery"; #gif arrows
$QDIR = "/usr/local/logs/lev1_gui"; #days queued to be executed
$DB = jsoc;
$HOSTDB = "hmidb";      #host where DB runs
$PGPORT=5432;
$RED = "orange";	#real color for 'red'
$localhost = `hostname -s`;
chomp($localhost);
#$login = "dsowner";
#$PID = getppid;
@mstr = ("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December");
@mdays = (31,28,31,30,31,30,31,31,30,31,30,31);
@mdaysl = (31,29,31,30,31,30,31,31,30,31,30,31);
@dayofyr_mo = (1,32,60,91,121,152,182,213,244,274,305,335);
@dayofyrl_mo = (1,32,61,92,122,153,183,214,245,275,306,336);
%Hoforddate = ();           #hash key is ord date e.g. 2010.193_UTC
@allowhost = ("cl1n001", "cl1n002", "cl1n003"); #hosts w/dcs[0,1] mounts
$specialtime = 0;
$S1970 = 220924800;		#sec between 1970 and 1977

$CLEANSLOT = 25;		#slot with cleaning tape
$CLEANDRIVE = 0;		#drive # to clean
$MAX_DRIVES = 1;
$MAX_SLOTS = 25;
$NUM_IMP_EXP_SLOTS = 5;
$MAX_Q_ENTIRES = 9;
$EEcnt = 0;
$ReClosecnt = 0;
$lopened = 0;
$playback = 0;
$drivebusy = 0;
$ldate = &labeldate();
$user = $ENV{'USER'};
$logopen = 0;
$REPEAT = 3000;     #millisec for update cycle
$| = 1;                 #flush output as we go

if(!grep(/$localhost/, @allowhost)) {
  print "Can only be run on host with dcs[0,1] mounts: @allowhost\n";
  exit(0);
}

if($user ne "production") {
  print "You must be user production to run\n";
  exit;
}


#connect to database
  $dbh = DBI->connect("dbi:Pg:dbname=$DB;host=$HOSTDB;port=$PGPORT", "$user", "$password");
  if ( !defined $dbh ) {
    die "Cannot do \$dbh->connect: $DBI::errstr\n";
  }

$ext = "$user"."_$ldate";
#$log = "/usr/local/logs/SUM/t50view_$ext.log";
$log = "/tmp/tktest_$ext.log";
open(LOG, ">$log") || die "Can't open $log: $!\n";
select(LOG); $| = 1; select(STDOUT);	#make unbuffered
print LOG "$ldate $log\n\n";
my(@pl) = qw/-side top -anchor nw/;
my(@pl1) = qw/-side top/;
my(@pl2) = qw/-side top -pady 1.0m/;
my(@pl3) = qw/-side left/;

print "$ldate\n";

  $mw = MainWindow->new;
  #$mw->geometry("+10+40");
  $mw->geometry("950x900+100+100");
  #$mw->Photo('image1', -file => 'SDO_Badge.gif');
  #$mw->Label(-image => 'image1')->pack(@pl);
  $tframe = $mw->Frame(-borderwidth => 1)->pack(-side => 'top');
  $tframe->Label(-text => "Definitive Lev1 GUI - UTC Day ($localhost)\n",
	-font => 'arial 18 bold', -padx => 150)->pack(-side => 'left');
  $b = $tframe->Button(
        -text => 'Exit',
        -background => 'red',
        -command => \&Exit_sub,
        );
  $b->pack(-side=> 'top', -pady => 0);

  $xyf = $mw->Frame(-borderwidth => 0)->pack(-fill => 'both', -side => 'top');
  $image = $xyf->Photo(-file => "$IMGDIR/arrow04.gif");
  $xyf->Button(-command => \&Previous, -image => $image)
        ->pack(-side=> 'left', -padx => 10);
  $Labdate = $xyf->Label(-text => "$MONTH  $YEAR",
	-font => 'arial 18 bold', -padx => 300)->pack(-side => 'left');
  $image = $xyf->Photo(-file => "$IMGDIR/arrow05.gif");
  $xyf->Button(-command => \&Next, -image => $image)
        ->pack(-side=> 'right', -padx => 10);

&show_month;
$repeat_id = $mw->repeat($REPEAT, \&all_update); #update periodically secs

MainLoop;

sub show_month() {
  if(Exists($dframe)) {
    $dframe->destroy;
  }
  if($leap) {
    $calday = @dayofyrl_mo[$mon];
  }
  else {
    $calday = @dayofyr_mo[$mon];
  }
  $dframe = $mw->Frame(-borderwidth => 0)->pack(-side => 'top');

$orddayUTC = sprintf("%04d.%03d_UTC", $YEAR,$calday);
#$orddayUTC = "$YEAR.$calday"."_UTC";
$lastday = $calday + $NUMDAYS;
$endordUTC = sprintf("%04d.%03d_UTC", $YEAR,$lastday);
#$endordUTC = "$YEAR.$lastday"."_UTC";
$sql = "select * from hmi.lev1_probe where ord_date >= '$orddayUTC' and ord_date < '$endordUTC'";
print "$sql\n";
$sth = $dbh->prepare($sql);
  if ( !defined $sth ) {
    print "Cannot prepare statement: $DBI::errstr\n";
    $dbh->disconnect();
    exit;
  }
    # Execute the statement at the database level
    $sth->execute;
    # Fetch the rows back from the SELECT statement
    while(@row = $sth->fetchrow()) {
      print "@row\n";
      $recn = shift(@row);
      $sunum = shift(@row);
      $slotnum = shift(@row);
      $sessionid = shift(@row);
      $sessionns = shift(@row);
      $bld_vers = shift(@row);
      $orddate = shift(@row);
      $cdate = shift(@row);
      $rexmit = shift(@row);
      $asd = shift(@row);
      $fds = shift(@row);
      $ff = shift(@row);
      $mp = shift(@row);
      $temp = shift(@row);
      $goflg = shift(@row);
      $executed = shift(@row);
      $executed_part = shift(@row);
      $Hoforddate{$orddate} = "ReXmit: $rexmit\nASD: $asd\nFDS: $fds\nFF: $ff\nMP: $mp\nTemp: $temp\nGoFlg: $goflg";
      if($rexmit && $asd && $fds && $ff && $mp && $temp && $goflg) {
        if($executed) {
          $Hoforddatecolor{$orddate} = "lightgreen";
        }
        elsif($executed_part) {
          $Hoforddatecolor{$orddate} = "lightblue";
        } else {
          $Hoforddatecolor{$orddate} = "yellow";
        }
      } else {
        $Hoforddatecolor{$orddate} = $RED;
      }
    }
    if(defined $sth) {
      $sth->finish;
    }

for($i=1; $i < 8; $i++, $calday++) {
  $thisord = sprintf("%04d.%03d_UTC", $YEAR, $calday);
  if(!$Hoforddate{$thisord}) {
    $thistxt = "ReXmit: 0\nASD: 0\nFDS: 0\nFF: 0\nMP: 0\nTemp: 0\nGoFlg: 0";
    $thiscolor = $RED;
  }
  else {
    $thistxt = $Hoforddate{$thisord};
    $thiscolor = $Hoforddatecolor{$thisord};
  }
  #$x = "\$var$i = \"$i  ($calday)\nReXmit: ok\nASD: ok\nFDS: ok\nFF: ok\nMP: ok\nTemp: ok\nGoFlg: ok\"";
  $x = "\$var$i = \"$i  ($calday)\n$thistxt\"";
  eval($x);
  
  $x = "\$b$i = \$dframe->Button(
	-textvariable => \\\$var$i,
	-justify => 'left',
	-font => 'times 10 bold',
	-height => 8,
	-width => 10,
	-wraplength => 85,
        -background => '$thiscolor',
        -command =>  \[\\&Sub_info, \$i\], 
        )";
  eval($x);
  $x = "\$b$i->pack(-side=> 'left', -pady => 0, -padx => 0)";
  eval($x);
}

  if(Exists($dframe1)) {
    $dframe1->destroy;
  }
  $dframe1 = $mw->Frame(-borderwidth => 0)->pack(-side => 'top');
for($i=8; $i < 15; $i++, $calday++) {
  $thisord = sprintf("%04d.%03d_UTC", $YEAR, $calday);
  if(!$Hoforddate{$thisord}) {
    $thistxt = "ReXmit: 0\nASD: 0\nFDS: 0\nFF: 0\nMP: 0\nTemp: 0\nGoFlg: 0";
    $thiscolor = $RED;
  }
  else {
    $thistxt = $Hoforddate{$thisord};
    $thiscolor = $Hoforddatecolor{$thisord};
  }
  $x = "\$var$i = \"$i  ($calday)\n$thistxt\"";
  eval($x);
  
  $x = "\$b$i = \$dframe1->Button(
	-textvariable => \\\$var$i,
	-justify => 'left',
	-font => 'times 10 bold',
	-height => 8,
	-width => 10,
	-wraplength => 85,
        -background => '$thiscolor',
        -command =>  \[\\&Sub_info, \$i\], 
        )";
  eval($x);
  $x = "\$b$i->pack(-side=> 'left', -pady => 0, -padx => 0)";
  eval($x);
}

  if(Exists($dframe2)) {
    $dframe2->destroy;
  }
  $dframe2 = $mw->Frame(-borderwidth => 0)->pack(-side => 'top');
for($i=15; $i < 22; $i++, $calday++) {
  $thisord = sprintf("%04d.%03d_UTC", $YEAR, $calday);
  if(!$Hoforddate{$thisord}) {
    $thistxt = "ReXmit: 0\nASD: 0\nFDS: 0\nFF: 0\nMP: 0\nTemp: 0\nGoFlg: 0";
    $thiscolor = $RED;
  }
  else {
    $thistxt = $Hoforddate{$thisord};
    $thiscolor = $Hoforddatecolor{$thisord};
  }
  $x = "\$var$i = \"$i  ($calday)\n$thistxt\"";
  eval($x);
  
  $x = "\$b$i = \$dframe2->Button(
	-textvariable => \\\$var$i,
	-justify => 'left',
	-font => 'times 10 bold',
	-height => 8,
	-width => 10,
	-wraplength => 85,
        -background => '$thiscolor',
        -command =>  \[\\&Sub_info, \$i\], 
        )";
  eval($x);
  $x = "\$b$i->pack(-side=> 'left', -pady => 0, -padx => 0)";
  eval($x);
}

  if(Exists($dframe3)) {
    $dframe3->destroy;
  }
  $dframe3 = $mw->Frame(-borderwidth => 0)->pack(-side => 'top');
for($i=22; $i < 29; $i++, $calday++) {
  $thisord = sprintf("%04d.%03d_UTC", $YEAR, $calday);
  if(!$Hoforddate{$thisord}) {
    $thistxt = "ReXmit: 0\nASD: 0\nFDS: 0\nFF: 0\nMP: 0\nTemp: 0\nGoFlg: 0";
    $thiscolor = $RED;
  }
  else {
    $thistxt = $Hoforddate{$thisord};
    $thiscolor = $Hoforddatecolor{$thisord};
  }
  $x = "\$var$i = \"$i  ($calday)\n$thistxt\"";
  eval($x);
  
  $x = "\$b$i = \$dframe3->Button(
	-textvariable => \\\$var$i,
	-justify => 'left',
	-font => 'times 10 bold',
	-height => 8,
	-width => 10,
	-wraplength => 85,
        -background => '$thiscolor',
        -command =>  \[\\&Sub_info, \$i\], 
        )";
  eval($x);
  $x = "\$b$i->pack(-side=> 'left', -pady => 0, -padx => 0)";
  eval($x);
}

  if(Exists($dframe4)) {
    $dframe4->destroy;
  }
  $dframe4 = $mw->Frame(-borderwidth => 0)->pack(-side => 'top');

for($i=29; $i <= $NUMDAYS; $i++, $calday++) {
  $thisord = sprintf("%04d.%03d_UTC", $YEAR, $calday);
  if(!$Hoforddate{$thisord}) {
    $thistxt = "ReXmit: 0\nASD: 0\nFDS: 0\nFF: 0\nMP: 0\nTemp: 0\nGoFlg: 0";
    $thiscolor = $RED;
  }
  else {
    $thistxt = $Hoforddate{$thisord};
    $thiscolor = $Hoforddatecolor{$thisord};
  }
  $x = "\$var$i = \"$i  ($calday)\n$thistxt\"";
  eval($x);
  
  $x = "\$b$i = \$dframe4->Button(
	-textvariable => \\\$var$i,
	-justify => 'left',
	-font => 'times 10 bold',
	-height => 8,
	-width => 10,
	-wraplength => 85,
        -background => '$thiscolor',
        -command =>  \[\\&Sub_info, \$i\], 
        )";
  eval($x);
  $x = "\$b$i->pack(-side=> 'left', -pady => 0, -padx => 0)";
  eval($x);
}
  $empty = "";
  $boxesleft = (35-$NUMDAYS);
if($NUMDAYS != 28) {	#must complete last row
  for($j=0; $j < $boxesleft; $j++) { 
    $x = "\$bl$j = \$dframe4->Button(
          -textvariable => \\\$empty,
          -justify => 'left',
          -font => 'times 10 bold',
          -height => 8,
          -width => 10,
          -wraplength => 85,
          -command =>  \\&Sub_noop,
          )";
    eval($x);
    $x = "\$bl$j->pack(-side=> 'left', -pady => 0, -padx => 0)";
    eval($x);
  }
}
if(Exists($legendframe)) {
  $legendframe->destroy;
}
$legendframe = $mw->Frame(-borderwidth => 0)->pack(-side => 'top');

$legendframe->Label(-text => "Legend:",
        )->pack(-side => 'top');
$legendframe->Label(-text => "Missing Condition",
        -background => $RED,)->pack(-side => 'left');
$legendframe->Label(-text => "Conditions OK, Not Executed",
        -background => 'yellow',)->pack(-side => 'left');
$legendframe->Label(-text => "Executed missing FSN",
        -background => 'lightblue',)->pack(-side => 'left');
$legendframe->Label(-text => "Executed all FSN",
        -background => 'lightgreen',)->pack(-side => 'left');

if(Exists($radf)) {
  $radf->destroy;
}
$exmode = 0;
$radf = $mw->Frame(-borderwidth => 0)->pack(-fill => 'both', -side => 'top');
$rad1 = $radf->Radiobutton(
        -text => 'Execute Mode',
        -variable => \$exmode,
	-value => 1,
        );
$rad1->pack(-side=> 'left', -pady => 10);
$rad2 = $radf->Radiobutton(
        -text => 'Info Mode',
        -variable => \$exmode,
	-value => 0,
        );
$rad2->pack(-side=> 'left', -pady => 10);

$ref = $radf->Button(
        -text => 'Refresh',
        -background => 'lightgrey',
        -command => \&Refresh_sub,
        );
$ref->pack(-side=> 'left', -pady => 10, -padx => 10);
$ref = $radf->Button(
        -text => 'Show Cmd Q',
        -background => 'lightgrey',
        -command => \&CmdQ_sub,
        );
$ref->pack(-side=> 'left', -padx => 5);
}

#Called every $REPEAT milliseconds to update the
#poped up windows.
sub all_update
{
  #print "all_update called\n";
  &Sub_info_update();
}

#Return effective date of now as yyyymmddhhmm
sub get_effdate {
  local($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst,$date,$sec2,$min2,$hour2,$mday2);
  ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
  $min2 = sprintf("%02d", $min);
  $hour2 = sprintf("%02d", $hour);
  $mday2 = sprintf("%02d", $mday);
  $mon2 = sprintf("%02d", $mon+1);
  $year4 = sprintf("%04d", $year+1900);
  $date = "$year4"."$mon2"."$mday2"."$hour2"."$min2";
  return($date);
}

#Return date in form for a label e.g. 1998.01.07_14:42:00
#and set global $YEAR and $MONTH and $mon and $NUMDAYS.
sub labeldate {
  local($sec,$min,$hour,$mday,$year,$wday,$yday,$isdst,$date,$sec2,$min2,$hour2,$mday2);
  if(!$specialtime) {
    ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = gmtime(time);
  } else {
    ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = gmtime($specialtime);
  }
  if($year % 4 == 0 && $year % 100 != 0 || $year % 400 == 0) { #leap year
    $leap = 1;
  }
  else {
    $leap = 0;
  }
  $sec2 = sprintf("%02d", $sec);
  $min2 = sprintf("%02d", $min);
  $hour2 = sprintf("%02d", $hour);
  $mday2 = sprintf("%02d", $mday);
  $mon2 = sprintf("%02d", $mon+1);
  $dayofmo = $mday2;			#set global value
  $year4 = sprintf("%04d", $year+1900);
  $date = $year4.".".$mon2.".".$mday2._.$hour2.":".$min2.":".$sec2."_UTC";
  $YEAR = $year4;
  $MONTH = @mstr[$mon];
  if($leap) { $NUMDAYS = @mdaysl[$mon]; } 
  else { $NUMDAYS = @mdays[$mon]; }
  $todayUTCdayofyr = $yday+1;   #1-366
  $orddayUTC = "$year4.$todayUTCdayofyr"."_UTC";
  #print "orddayUTC = $orddayUTC\n";
  return($date);
}


sub commify {
    my $text = reverse $_[0];
    $text =~ s/(\d\d\d)(?=\d)(?!\d*\.)/$1,/g;
    return scalar reverse $text;
}

sub Previous() {
  $mon -= 1;
  if($mon == -1) {
    $mon=11;
    $YEAR -= 1;
  }
  if($YEAR % 4 == 0 && $YEAR % 100 != 0 || $YEAR % 400 == 0) { #leap year
    $leap = 1;
  }
  else {
    $leap = 0;
  }
  $MONTH = @mstr[$mon];
  if($leap) { $NUMDAYS = @mdaysl[$mon]; } 
  else { $NUMDAYS = @mdays[$mon]; }
  $dlab = "$MONTH $YEAR";
  $Labdate->configure(-text => $dlab);
  &show_month;
}

sub Next() {
  $mon += 1;
  if($mon == 12) {
    $mon=0;
    $YEAR += 1;
  }
  if($YEAR % 4 == 0 && $YEAR % 100 != 0 || $YEAR % 400 == 0) { #leap year
    $leap = 1;
  }
  else {
    $leap = 0;
  }
  $MONTH = @mstr[$mon];
  if($leap) { $NUMDAYS = @mdaysl[$mon]; } 
  else { $NUMDAYS = @mdays[$mon]; }
  $dlab = "$MONTH $YEAR";
  $Labdate->configure(-text => $dlab);
  &show_month;
}

#Called by all_update() every 3 sec 
sub Sub_info_update() {
  if($logactive) {
    while(<LOGSTAT>) {
      $textlog->insert('end', $_);
      if($_ =~ /\*\*END:/) { 
        #print "Found *END in Sub_info_update(). Set done=1\n";
        $done = 1;
        last;
      }
    }
    if($done) {
      $textlog->see('end');
      close(LOGSTAT);
      $logactive = 0;
    }
  }
  else {
      #now get any command in Q and execute this day
      #format is like 2010.251_UTC or 2010.251_UTC::FEX
      #The '::FEX' is used by scripts (typically cron jobs) that
      #want to force a days execution even if the Execute Mode ($exmode)
      #is set to 0.
      @qdays = `ls $QDIR`;
      while($qd = shift(@qdays)) {
        $kid = waitpid(-1, WNOHANG);	#0 if processes still running
        if($kid == 0) { last; }
        chomp($qd);
        if($qd eq "README") { next; }
        ($qd1, $exforce) = split(/::/, $qd);
        print "Next command for = $qd1 exforce=$exforce\n";
        $xsec = `time_convert time=$qd1`;
        #don't need diff between TAI and UTC sec here
        $specialtime = $xsec + $S1970;	#make base 1970 instead of 1977
        $labeld = &labeldate;
        $specialtime = 0;
        print "/bin/rm $QDIR/$qd\n";
        `/bin/rm $QDIR/$qd`;
        print "dayofmo = $dayofmo\n";
        &Sub_info($dayofmo);
        #go away for now
      }
  }
}

#Called when a UTC day button for a month is hit
sub Sub_info() {
  my($a) = @_;
  #print "a = $a\n"; #1-31
  if($leap) {
    $yday = @dayofyrl_mo[$mon];
  } 
  else {
    $yday = @dayofyr_mo[$mon];
  }
  $todayUTCdayofyr = $yday + ($a - 1); #1=366 
  $orddayUTC = "$YEAR.$todayUTCdayofyr"."_UTC";
  print "orddayUTC = $orddayUTC\n";
  $redoname = "$orddayUTC";
  $kid = waitpid(-1, WNOHANG);		#0 if processes still running
  #print "\$kid = $kid\n"; #!!!TEMP
  if($logactive || $kid == 0) { #this window already active. Ask if want to Q cmd
    if(Exists($qwin)) {
      $qwin->destroy();
    }
    $qwin = $mw->Toplevel();
    $qwin->geometry("400x300+800+160");
    $qwin->title("Queue window");
    $qwin->Label(-text => "There is a day executing.\nDo you want to Queue this day:\n$orddayUTC\n for execution?\n",
	-font => 'arial 16')->pack(-side => 'top');
    $qx = $qwin->Button(
        -text => 'Queue',
        -background => 'grey',
        -command => sub {`touch $QDIR/$redoname`; $qwin->destroy(); return; },
        )->pack(-side => 'top');
    $qx = $qwin->Button(
        -text => 'Don\'t Queue',
        -background => 'grey',
        -command => sub {$qwin->destroy(); return; },
        )->pack(-side => 'top', -pady => 10);
    return;
  }
  $logactive = 1;
  if(Exists($findwin)) {
    $findwin->destroy();
  }
  $findwin = $mw->Toplevel();
  $findwin->geometry("600x500+600+600");
  $findwin->title("Execution window");
  $fx = $findwin->Button(
        -text => 'Close',
        -background => 'grey',
        -command => sub {$findwin->destroy(); $logactive=0; return; },
        )->pack();
  $statlog = "/tmp/lev1gui_$ldate.log";
#!!!TBD add case for AIA
  #use -x if execute mode radio button set or forced execution
  if($exmode || ($exforce eq "FEX")) {
    $cmd = "/home/production/cvs/JSOC/base/sums/scripts/lev1_def_gui_called -x hmi $orddayUTC 1> $statlog 2>&1";
    $exforce = 0;		#must reset after each use
  }
  else {
    $cmd = "/home/production/cvs/JSOC/base/sums/scripts/lev1_def_gui_called hmi $orddayUTC 1> $statlog 2>&1";
  }
#
#  $cmd = "/home/production/cvs/JSOC/base/sums/scripts/lev1_def_gui_called aia $orddayUTC 1> $statlog 2>&1";

  $findwin->Label(-text => "build_lev1 command for $orddayUTC\n$cmd\n", -font => 'arial 14')->pack(@pl2);
  $textlog = $findwin->Scrolled("Text")->pack();
  print "$cmd\n";
  if($fpid = fork) {
    #This is the parent. The child's pid is in $fpid
    print stdout "pid is $fpid\n";
    #wait;
  } elsif (defined $fpid) {     # $fpid is zero here if defined
    exec $cmd;                  # run lev1_def_gui_called
    exit;                       # never fall through
  } else {
    #fork error
    print LOG "!!! Can't fork a lev1_def_gui_called: $!\n";
    print "!!! Can't fork a lev1_def_gui_called: $!\n";
    exit;
  }
  sleep(1);	#give fork a chance
  if(!open(LOGSTAT, $statlog)) {
    print "Can't open $statlog: $!\n";
    $logactive = 0;
    exit;
  }
  $done = 0;
#  while(1) {
    while(<LOGSTAT>) {
      $sec0 = time;
      $textlog->insert('end', $_);
      if($_ =~ /\*\*END:/) { 
        $done = 1;
        last;
      }
    }
#    $sec = time;
#    if($sec - $sec0 > 2) {
#      print "Timeout waiting to read the next line.\n";
#      print "This may be normal depending on the load.\n";
#      print "I'm just trying to save some resources. ";
#      last;	#exit while(1)
#    }
#  }
  if($done) {
    $textlog->see('end');
    $logactive = 0;
    $done = 0;
  }
}

sub Refresh_sub {
  &show_month;
}

sub CmdQ_sub {
    if(Exists($cmdqwin)) {
      $cmdqwin->destroy();
    }
    $cmdqwin = $mw->Toplevel();
    $cmdqwin->geometry("300x300+800+400");
    $cmdqwin->title("Cmd Queue window");
    $cmdqwin->Label(-text => "$QDIR",
	-font => 'arial 16')->pack(-side => 'top');
    @cmdls = `ls $QDIR`;
    $cmdqwin->Label(-text => " @cmdls",
	-font => 'arial 16')->pack(-side => 'top');
    $qx = $cmdqwin->Button(
        -text => 'Close',
        -background => 'grey',
        -command => sub {$cmdqwin->destroy(); return; },
        )->pack(-side => 'top');
}

sub Exit_sub {
  #$dbh->disconnect();
  if($pid0) {			#kill off our child
    `kill $pid0`;
  }
  #system "/bin/rm $runtag";
  $dbh->disconnect();
  exit;
}

sub Sub_noop() {
}
