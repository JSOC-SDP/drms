eval 'exec /home/jsoc/bin/$JSOC_MACHINE/perl -S $0 "$@"'
    if 0;
#cvs/JSOC/base/sums/scripts/lev1_def_gui_called_PZT_FSN
#Called by lev1_def_gui to execute build_lev1_mgr for an ord date.
#Also called by lev0a2deflev1_FULL_PZT_FSN.pl which is called by a
#daily cron job lev0a2deflev1_FULL_PZT_FSN_cron.pl.
#Looks in the hmi.lev1_probe dataset to see if pre-conditions for
#execution are set. The hmi.lev1_probe table is set by lev1_definitive_db.pl
#There is also the script cvs/JSOC/proj/lev0/scripts/lev1_definitive.pl
#which does not look at the hmi.lev_probe DB table but figures out the
#pre-conditions for itself. This is for stand alone operations, which 
#probably won't be used at all.
#
#Determine if can now run the definitive lev1 for the given
#ordinal date in UTC (YYYY.DDD_UTC). For example for July 12, 2010
#the day of year is 193 and to determine if the lev1 definitive can
#be run for this day, call:
#     lev1_def_gui_called_PZT_FSN hmi,aia 2010.193_UTC
#
#These requirements must be met (hmi.lev1_probe DB consulted):
#
#1. For the current UTC day# (1-366), there must be a file like so:
#/dds/soc2pipe/hmi,aia/xday/Xmit_All.198
#Optionally, the -o[verride] flag can be given for older data before
#the Xmit_All.ddd was implemented.
#
#2. Do a query for the day of interest like so (note TAI):
#sdo.hk_dayfile[2010.07.14_00:00:00_TAI][129][moc]
#where MERGED=1.
#If this exists, then the sdo.lev0_asd_0004 for this day is complete,
#and ok to use for the definitive lev1.
#
#3. Check sdo.fds_orbit_vectors for a record for the given ord date.
#
#4. Check that the flatfield has a flatfield_version >= 1.
#Check for camera 1&2 for hmi, and for the 23 wave_str for aia.
#
#5. Check that sdo.master_pointing record exists for our date.
#
#6. Check that hmi,aia.temperature_summary_300s exists for our date.
#
#7. Check that the manually set No Go file does not exist:
#/home/jsoc/cvs/Development/JSOC/proj/lev0/data/NoDefLev1[HMI,AIA]
#
#
######################################################################

use DBI;

$XmitFlgDirHMI = "/dds/soc2pipe/hmi";
$XmitFlgDirAIA = "/dds/soc2pipe/aia";
$NoGoFileHMI = "/home/jsoc/cvs/Development/JSOC/proj/lev0/data/NoDefLev1HMI";
$NoGoFileAIA = "/home/jsoc/cvs/Development/JSOC/proj/lev0/data/NoDefLev1AIA";
#$DSFFNAMEHMI = "su_production.hmi_flatfield";
$DSFFNAMEHMI = "hmi.flatfield";
#$DSFFNAMEAIA = "aia_test.flatfield";
$DSFFNAMEAIA = "aia.flatfield";
$DSINAIA = "aia.lev0";
#$DSOUTAIA = "aia.lev1e_nrt";	#!!TEMP
#$DSOUTAIA = "su_production.aia_lev1e_nrt";	#!!TEMP
$DSOUTAIA = "aia.lev1";
$DSINHMI = "hmi.lev0a";
#$DSOUTHMI = "hmi.lev1c_nrt";
$DSOUTHMI = "hmi.lev1";
#$QSUBDIR = "/scr21/production/qsub/tmp";
$LOGDIR = "/usr/local/logs/lev1_def";
$EXECUTE = 0;
$OVERRIDE = 0;
$DB = jsoc;
$HOSTDB = "hmidb";      #host where DB runs
$PGPORT=5432;
$| = 1;

$PID = getppid;
$alog = "/home/jsoc/cvs/Development/JSOC/proj/lev0/data/arg_lev1_empty_$PID.txt";

@allowhost = ("cl1n001", "cl1n002", "cl1n003"); #hosts w/dcs[0,1] mounts
@wavestr = ("131_OPEN", "131_THICK", "131_THIN", "1600", "1700", "171_THICK", "171_THIN", "193_OPEN", "193_THICK", "193_THIN", "211_OPEN", "211_THICK", "211_THIN", "304_OPEN", "304_THICK", "304_THIN", "335_OPEN", "335_THICK", "335_THIN", "4500", "94_OPEN", "94_THICK", "94_THIN");

sub numerically { $a <=> $b; }	#do numerical sort

sub usage {
  print "Determine if the lev1 definitive can be made for a given ordinal date.\n";
  print "Usage: lev1_def_gui_called_PZT_FSN hmi,aia 2010.193_UTC\n";
  exit(0);
}

$host = `hostname -s`; chomp($host);
if(!grep(/$host/, @allowhost)) {
  print "Can only be run on host with dcs[0,1] mounts: @allowhost\n";
  exit(0);
}

while ($ARGV[0] =~ /^-/) {
  $_ = shift;
  if (/^-x(.*)/) {
    $EXECUTE = 1;
  }
  if (/^-o(.*)/) {
    $OVERRIDE = 1;
  }
}

if($#ARGV != 1) {
  &usage;
}
$instru = $ARGV[0];
if($instru ne "hmi" && $instru ne "aia") { &usage; }
if($instru eq "hmi") {
  $hmiaiaflg = 0;
} else {
  $hmiaiaflg = 1;
}
$orddate = $ARGV[1];
$pos1 = index($orddate, '.');
$pos2 = index($orddate, '_');
if($pos1==-1 || $pos2==-1) {
  &usage;
}
$ordpart = substr($orddate, 0, $pos2);
$ordtai = $ordpart."_TAI";
$yr = substr($orddate, 0, $pos1);
	$yrday = substr($orddate, $pos1+1, ($pos2-$pos1)-1);
	$zone = substr($orddate, $pos2+1);
	if($zone ne "UTC") { &usage; }
	$user = $ENV{'USER'};

	$utcdate = &inittoday();	#set $todayUTCdayofyr 1-366 & ret date
	$sec = `time_convert ord=$orddate`;
	chomp($sec);
	$fulldate = `time_convert s=$sec zone=UTC`;
        #Mods 08Mar2011
	#$t_start_sec = $sec - 60;  #subtract a min to match TAI range in FF rec
	$t_start_sec = $sec;
	#$fulldateFF = `time_convert s=$t_start_sec zone=UTC`;
        $fulldateFF = `time_convert time=$ordtai o=cal`;   #hmi FF in TAI start/stop
	#$nextsec = $sec + (86400 - 60); #don't go into next TAI day
	$nextsec = $sec + (86400);
	$nextdate = `time_convert s=$nextsec zone=UTC`;
	$prevsec = $sec - 86400;
	$prevdate = `time_convert s=$prevsec zone=UTC`;
	chomp($fulldate);
	chomp($fulldateFF);
	chomp($prevdate);
	chomp($nextdate);

	print "fulldate=$fulldate, fulldateFF=$fulldateFF, prevdate=$prevdate, nextdate=$nextdate\n"; #!!TEMP

	print "cvs/Development/JSOC/base/sums/scripts/lev1_def_gui_called_PZT_FSN:\n";
	print "Run on $utcdate which is day of year $todayUTCdayofyr\n"; 
	print "for lev1 on ordinal date = $orddate ($fulldate)\n\n";

#Now call to fill in aia/hmi.lev1_probe database table
$cmd = "lev1_definitive_db.pl -o $instru $orddate"; #!!TEMP use -o
print "$cmd\n";
@defdb = `$cmd`;

	#connect to database
	  $dbh = DBI->connect("dbi:Pg:dbname=$DB;host=$HOSTDB;port=$PGPORT", "production", "$password");
	  if ( !defined $dbh ) {
	    die "Cannot do \$dbh->connect: $DBI::errstr\n";
	  }
        if($hmiaiaflg) {
          $sql = "select * from aia.lev1_probe where ord_date = '$orddate'";
        } else {
          $sql = "select * from hmi.lev1_probe where ord_date = '$orddate'";
        }
	print "$sql\n";
	$sth = $dbh->prepare($sql);
	  if ( !defined $sth ) {
	    print "Cannot prepare statement: $DBI::errstr\n";
	    $dbh->disconnect();
	    exit;
	  }
	    # Execute the statement at the database level
	    $sth->execute;
	    # Fetch the rows back from the SELECT statement
	    while(@row = $sth->fetchrow()) {
	      print "@row\n";
	      $recn = shift(@row);
	      $sunum = shift(@row);
	      $slotnum = shift(@row);
	      $sessionid = shift(@row);
	      $sessionns = shift(@row);
	      $bld_vers = shift(@row);
	      $orddate = shift(@row);
	      $cdate = shift(@row);
	      $rexmit = shift(@row);
	      $asd = shift(@row);
	      $fds = shift(@row);
	      $ff = shift(@row);
	      $mp = shift(@row);
	      $temp = shift(@row);
	      $goflg = shift(@row);
	    }
	    if(defined $sth) {
	      $sth->finish;
	    }
        if($hmiaiaflg) {
          $xmitfile = "$XmitFlgDirAIA/xday/Xmit_All.$yrday";
        } else {
          $xmitfile = "$XmitFlgDirHMI/xday/Xmit_All.$yrday"; 
        }
if($rexmit) {
  $OKfile = 1;
  print "*OK for lev1: $xmitfile exists\n";
}
else {
  $OKfile = 0;
  print "**NG for lev1: $xmitfile does not exist\n";
}

if(!$asd) {
  print "**NG sdo.hk_dayfile MERGED not found\n";
  $OKhkdayfile = 0;
}
else {
  print "*OK sdo.hk_dayfile MERGED found\n";
  $OKhkdayfile = 1;
}


#Now determine if a sdo.fds_oribit_vectors record exists for our ord date.
if(!$fds) {
  print "**NG fds_orbit_vector not found\n";
  $OKfdsorbit = 0;
}
else {
  print "*OK fds_orbit_vector found\n";
  $OKfdsorbit = 1;
}

#!!!TBD fix this to use hmi.lev1_probe table (or aia.lev1_probe table)
#!!Maybe not, want this dynamic here?
$OKff = 1;
if(!$hmiaiaflg) {		#ck for hmi flat field
  #Now see if flat field has flatfield_version >= 1 (version ck obsolete)
  for($i=1; $i < 3; $i++) {
    $query = sprintf("%s[? t_start <= \$(%s) and t_stop > \$(%s) and CAMERA=%d ?]", $DSFFNAMEHMI, $fulldateFF, $fulldateFF, $i);

    #print "hmi query= $query\n"; #!!TEMP
    #print "Must put single quote around the above\n";
    $cmd = "show_info key=date,flatfield_version '$query'";
    print "$cmd\n";
    @result = `$cmd`;
    #print "Result of flatfield query for $orddate:\n";
    print "@result";
    $x = shift(@result);
    if($x =~ /date\tflatfield_version/) {
      $x = shift(@result);	#looks like 2010-07-01T17:28:23Z   1
      ($a, $ffver) = split(/\s+/, $x);
      if($ffver >= 0) { 	#NOTE: now >= 0 is ok, just find one
        print "*OK flatfield found for CAMERA=$i\n";
      } else {
        print "**NG flatfield_version not >= 1  for CAMERA=$i\n";
        $OKff = 0;
      }
    }
    else {
      print "**NG flatfield not found for CAMERA=$i\n";
      $OKff = 0;
    }
  }
}
else {				#ck for aia flat field
  while($wave = shift(@wavestr)) {
    $query = sprintf("%s[? t_start <= $sec and t_stop > $sec and WAVE_STR='%s' ?]", $DSFFNAMEAIA, $wave);
    #print "\naia query= $query\n";
    #print "Must put double quote around the above\n";
    $cmd = "show_info key=date,flatfield_version \"$query\"";
    #print "$cmd\n";
    @result = `$cmd`;
    print "@result";
    $x = shift(@result);
    if($x =~ /date\tflatfield_version/) {
      $x = shift(@result);	#looks like 2010-07-01T17:28:23Z   1
      ($a, $ffver) = split(/\s+/, $x);
      if($ffver >= 0) { 	#just find a flatfield_version
        print "*OK flatfield found for WAVE_STR=$wave\n";
      } else {
        print "**NG flatfield_version not >= 1  for WAVE_STR=$wave\n";
        print "**OVERRIDE: temp acceptance of flatfield_version not >= 1\n";
        #$OKff = 0;
      }
    }
    else {
      print "**NG flatfield not found for WAVE_STR=$wave\n";
      $OKff = 0;
    }
  }
}

#Check that sdo.master_pointing record exists for our date
if($mp) {
  print "*OK sdo.master_pointing record found\n";
  $OKmp = 1;
}
else {
  print "**NG sdo.master_pointing record not found\n";
  $OKmp = 0;
}

#ck that hmi/aia.temperature_summary_300s records exist
if($temp) {
  print "*OK temperature_summary_300s 288 records found\n";
  $OKtemp = 1; 
}
else {
  print "**NG temperature_summary_300s incomplete (s/b 288 records):\n";
  print "$cnt\n";
  $OKtemp = 0; 
}

#Check if no go file exists.
if(!$goflg) {
  print "The no-go file exist\n";
  $OKnogofile = 0;
}
else { $OKnogofile = 1; }

if($OKfile && $OKhkdayfile && $OKfdsorbit && $OKnogofile && $OKff && $OKmp && $OKtemp) {
  print "*OK to process definitive lev1 for $orddate\n";
  print "    Building command now (may take a minute)...\n";
  if($hmiaiaflg) {
    #$cmd = "show_info -q key=fsn '$DSINAIA\[? t_obs >= \$($fulldateFF) and  t_obs < \$($nextdate) ?]'";
    $cmd = "show_info -q key=fsn '$DSINAIA\[? t_obs >= \$($fulldate) and  t_obs < \$($nextdate) ?]'";
  }
  else {
    #$cmd = "show_info -q key=fsn '$DSINHMI\[? t_obs >= \$($fulldateFF) and  t_obs < \$($nextdate) ?]'";
    $cmd = "show_info -q key=fsn '$DSINHMI\[? t_obs >= \$($fulldate) and  t_obs < \$($nextdate) ?]'";
  }
  #print "$cmd\n"; #!!TEMP
  @fsn_presort = `$cmd`;
  @fsn = sort numerically @fsn_presort;
  $firstfsn = shift(@fsn);
  $lastfsn = pop(@fsn);
  chomp($firstfsn); chomp($lastfsn);

  #back up 96 fsn for the way cosmic rays are made by module_flatfield_daily
  #See mail: "Re: patching cosmic ray records" Richard Wachter 11/18/10 12:08
  $firstfsncosmic = $firstfsn - 96;	#new 19Nov2010. Change vrbl 2/28/2011
  $lastfsncosmic = $lastfsn - 96;	#new 19Nov2010. Change vrbl 2/28/2011

  if($hmiaiaflg) { 
    $cmd = "time build_lev1_mgr mode=fsn instru=aia dsin=$DSINAIA dsout=$DSOUTAIA bfsn=$firstfsn efsn=$lastfsn numqsub=8 logfile=/usr/local/logs/lev1/build_lev1_mgr_aia.$utcdate.log";
  }
  else { 
    #!!TEMP increase numqsub from default 16 to 32
    $cmd = "time build_lev1_mgr mode=fsn instru=hmi dsin=$DSINHMI dsout=$DSOUTHMI bfsn=$firstfsn efsn=$lastfsn numqsub=4 logfile=/usr/local/logs/lev1/build_lev1_mgr_hmi.$utcdate.log";
  }
  print "$cmd\n";
  if($EXECUTE) {
    `$cmd`;		#make the data for the day
  }
  print "    Verifying command execution (may take a minute)...\n";
  sleep(2);		#give time for commits
  #first get last_lev1_fsn of yesterday 
  $yesterord = `time_convert time='$prevdate' o=ord`;
  chomp($yesterord);
  if($hmiaiaflg) {
    $sql= "select last_lev1_fsn from aia.lev1_probe where ord_date='$yesterord'";
  }
  else {
    $sql= "select last_lev1_fsn from hmi.lev1_probe where ord_date='$yesterord'";
  }
  print "$sql\n";
  $sth = $dbh->prepare($sql);
  if ( !defined $sth ) {
    print "Cannot prepare statement: $DBI::errstr\n";
    $dbh->disconnect();
    exit;
  }
  # Execute the statement at the database level
  $sth->execute;
  # Fetch the rows back from the SELECT statement
  @row = $sth->fetchrow();
  $prevfsn = shift(@row);
  print "Last FSN of yesterday = $prevfsn\n";
  if($prevfsn == 0) {		#no yesterday last fsn
    $startfsn = $firstfsn;
  } 
  else {
    $startfsn = $prevfsn + 1;
  }
  if($hmiaiaflg) {
    $cmd = "show_info -q key=fsn 'aia.lev1[][$firstfsn-$lastfsn]'";
  } else {
    $cmd = "show_info -q key=fsn 'hmi.lev1[][$firstfsn-$lastfsn]'";
  }
  print "$cmd\n";
  @fsns_presort = `$cmd`;
  @fsns = sort numerically @fsns_presort;
  $startflg = 1; $total = 0; $miss = 0;
  if(!@fsns) { 
    $miss=2; $lastlev1seen=$prevfsn; $total="ALL"; $msg="All fsn missing\n";
  }
  if(!open(ARG, ">$alog")) {
    print "Can't open $alog: $!\n";
    exit(1);
  }
  while($fsn=shift(@fsns)) { 
    chomp($fsn);
    if(!$startflg) {
      if($fsn != $oldfsn + 1) {
        if($fsn != $oldfsn) {     #can get dup fsn which are ok
          print "Missing FSN: went from $oldfsn to $fsn\n";
          print ARG "Missing FSN: went from $oldfsn to $fsn\n";
          $msg = "Missing FSN: went from $oldfsn to $fsn\n";
          $gap = ($fsn - $oldfsn) - 1;
          $total = $total + $gap;
          $miss = 1;
        }
      }
    }
    else {
      $startflg = 0;
      if($fsn != $startfsn) {
        $xfsn = $startfsn - 1;
        #print "Missing FSN: went from $firstfsn to $fsn\n";
        print "Missing FSN: went from $xfsn to $fsn\n";
        print ARG "Missing FSN: went from $xfsn to $fsn\n";
        $msg = "Missing FSN: went from $xfsn to $fsn\n";
        $miss = 1;
      }
    }
    $oldfsn = $fsn;
  }
  if(!$startflg) { 		#some fsn were seen
    if($oldfsn != $lastfsn) {	#miss fsn at end
      $gap = $lastfsn - $oldfsn;
      $total = $total + $gap;
      $nextdayfsn = $lastfsn+1; #start fsn of next ord date
      print "Missing FSN: went from $oldfsn to $nextdayfsn\n";
      print ARG "Missing FSN: went from $oldfsn to $nextdayfsn\n";
      $msg = "Missing FSN: went from $oldfsn to $nextdayfsn\n";
      $miss = 1;
      print "oldfsn = $oldfsn\n"; #!!TEMP
    }
    $lastlev1seen = $lastfsn;
  }
  if($miss) {
    print "Total missing FSN = $total\n";
    print ARG "Total missing FSN = $total\n";
    $mail = "Mail -s \"Missing FSN from def lev1 for $orddate\"";
          #$to = "lev0_user";
          $to = "jim";    #!!TEMP
          $cmd = "echo \"$msg\" | $mail $to";
          system $cmd;
    if($miss == 1) {		#partial execution
      if($hmiaiaflg) {
        $sql="update aia.lev1_probe set executed_part=1,executed=0,last_lev1_fsn=$lastlev1seen where ord_date='$orddate'";
      }
      else {
        $sql="update hmi.lev1_probe set executed_part=1,executed=0,last_lev1_fsn=$lastlev1seen where ord_date='$orddate'";
      }
    }
    else {
      if($hmiaiaflg) {
        $sql="update aia.lev1_probe set executed_part=0,executed=0,last_lev1_fsn=$lastlev1seen where ord_date='$orddate'";
      }
      else {
        $sql="update hmi.lev1_probe set executed_part=0,executed=0,last_lev1_fsn=$lastlev1seen where ord_date='$orddate'";
      }
    }
  }
  else {	#set executed bit in hmi.lev1_probe db table
    if($hmiaiaflg) {
      $sql="update aia.lev1_probe set executed=1,executed_part=0,last_lev1_fsn=$lastlev1seen where ord_date='$orddate'";
    }
    else {
      $sql="update hmi.lev1_probe set executed=1,executed_part=0,last_lev1_fsn=$lastlev1seen where ord_date='$orddate'";
    }
  }
    print "$sql\n";
    print ARG "$sql\n";
    if($EXECUTE) {
      $sth = $dbh->prepare($sql);
      if ( !defined $sth ) {
        print "Cannot prepare statement: $DBI::errstr\n";
        $dbh->disconnect();
        exit;
      }
      # Execute the statement at the database level
      $sth->execute;
      if(defined $sth) {
        $sth->finish;
      }
    }
    close(ARG);
    #now call build_lev1_empty to fill in empty records.
    if($hmiaiaflg) {
      $cmd = "build_lev1_empty instru=aia dsout=aia.lev1 argfile=$alog";
    } else {
      $cmd = "build_lev1_empty instru=hmi dsout=hmi.lev1 argfile=$alog";
    }
    print "$cmd\n";
    if($EXECUTE) {
      `$cmd`;
    }
#Now fill in the bfsn and efsn for lev1 for this day and yesterday
if($hmiaiaflg) {
  $fsnfirst = `show_info -q key=fsn aia.lev1\[$orddate/1h\] n=1`;
  chomp($fsnfirst);
  $fsnlast = `show_info -q key=fsn aia.lev1\[$orddate/1d\] n=-1`;
  chomp($fsnlast);
  $yfsnlast = `show_info -q key=fsn aia.lev1\[$yesterord/1d\] n=-1`;
  chomp($yfsnlast);
  $sql="update aia.lev1_probe set bfsn=$fsnfirst,efsn=$fsnlast where ord_date='$orddate'";
    print "$sql\n";
    if($EXECUTE) {
      $sth = $dbh->prepare($sql);
      if ( !defined $sth ) {
        print "Cannot prepare statement: $DBI::errstr\n";
        $dbh->disconnect();
        exit;
      }
      $sth->execute;
      if(defined $sth) {
        $sth->finish;
      }
    }
  $sql="update aia.lev1_probe set efsn=$yfsnlast,executed=1,executed_part=0 where ord_date='$yesterord'";
}
else {
  $fsnfirst = `show_info -q key=fsn hmi.lev1\[$orddate/1h\] n=1`;
  chomp($fsnfirst);
  $fsnlast = `show_info -q key=fsn hmi.lev1\[$orddate/1d\] n=-1`;
  chomp($fsnlast);
  $yfsnlast = `show_info -q key=fsn hmi.lev1\[$yesterord/1d\] n=-1`;
  chomp($yfsnlast);
  $sql="update hmi.lev1_probe set bfsn=$fsnfirst,efsn=$fsnlast where ord_date='$orddate'";
    print "$sql\n";
    if($EXECUTE) {
      $sth = $dbh->prepare($sql);
      if ( !defined $sth ) {
        print "Cannot prepare statement: $DBI::errstr\n";
        $dbh->disconnect();
        exit;
      }
      $sth->execute;
      if(defined $sth) {
        $sth->finish;
      }
    }
  #$sql="update hmi.lev1_probe set efsn=$yfsnlast where ord_date='$yesterord'";
  $sql="update hmi.lev1_probe set efsn=$yfsnlast,executed=1,executed_part=0 where ord_date='$yesterord'";
}
    print "$sql\n";
    if($EXECUTE) {
      $sth = $dbh->prepare($sql);
      if ( !defined $sth ) {
        print "Cannot prepare statement: $DBI::errstr\n";
        $dbh->disconnect();
        exit;
      }
      # Execute the statement at the database level
      $sth->execute;
      if(defined $sth) {
        $sth->finish;
      }
    }
  #Now rerun the show_coverage stuff for yesterday to update for the new fsns
  #Ok to use single log file
  $cmd = "/home/jsoc/cvs/Development/JSOC/base/sums/scripts/lev1_def_gui_called_info -r $instru $yesterord 1> /tmp/rerun_info_from_gui.$instru  2>&1";
  `$cmd`;

#make sure have the pzt flat
#This is now done in /home/jsoc/cvs/Development/JSOC/proj/lev0/scripts/pzt_flat_cron.pl
#which is called in /home/jsoc/cvs/Development/JSOC/proj/lev0/scripts/lev0a2deflev1_FULL_PZT_FSN_cron.pl
#if(!$hmiaiaflg) {		#only for hmi
#  $cmd = "cd /home/production/cvs/JSOC/proj/lev0/apps/pztflat; echo \"pzt_flatfield, $pztdate\" | /usr/local/bin/idl 1> /scr21/production/qsub/flat/pzt.$PID.log 2>&1";
#  #print "ssh n02 $cmd\n";
#  #`ssh n02 $cmd`;
#  print "$cmd\n";
#  `$cmd`;
#}

#Now make the cosmic_rays/rotation flat for the day
#!!TBD: use fsns instead of $orddate  NO! YES!
#Note: did it by date and not fsn and never backfilled the prev day, so
#change back to fsn. 19Jan2011
$moddate = `/home/jsoc/cvs/Development/JSOC/bin/linux_x86_64/time_convert s=$sec`;
$pos = index($moddate, '_');
$mdate = substr($moddate, 0, $pos);

#$cmd = "module_flatfield_daily_cron_48_PZT.pl $instru $orddate";
if(!$hmiaiaflg) {		#only for hmi
  #$cmd = "module_flatfield_daily_cron_48_PZT_FSN.pl $instru $orddate $firstfsn $lastfsn";
  #$cmd = "module_flatfield_daily_cron_48_PZT.pl $instru $orddate"; #full day
  $gdate = &get_date;
  #$statlog = "$LOGDIR/module_flat_48_PZT_$gdate.log";
  #$cmd = "module_flatfield_daily_qsub_48_PZT.pl hmi.lev1 $mdate 1> $statlog 2>&1"; #full day
  $statlog = "$LOGDIR/module_flat_cron_48_PZT_FSN_$gdate.log";
  $cmd = "module_flatfield_daily_cron_48_PZT_FSN.pl $instru $orddate $firstfsncosmic $lastfsncosmic 1> $statlog 2>&1";
  print "$cmd\n";
  if($EXECUTE) {
    @ffrun = `$cmd`;
  }
}

#!!TBD: put in Isabelle's lfwrp limbfit program here for all fsn of this day
#$cmd = "time /home/production/cvs/JSOC/bin/linux_x86_64/lfwrp bfsn=$firstfsn efsn=$lastfsn dsin='hmi.lev1[]' dsout=hmi.limbfit";
#print "$cmd\n";
#`$cmd`;

#    #Now queue up the higher level processing with Phil's workflow:
#    $pos = index($prevdate, '_');
#    $wantlow = substr($prevdate, 0, $pos+1);
#    $wantlow = "$wantlow"."23:54_TAI";
#    $pos = index($fulldate, '_');
#    $wanthigh = substr($fulldate, 0, $pos+1);
#    $wanthigh = "$wanthigh"."23:54_TAI";
#    #print "wantlow = $wantlow  wanthigh = $wanthigh\n";
#    $ENV{'WORKFLOW_ROOT'} = "/home/phil/workflow";
#    $ENV{'WORKFLOW_DATA'} = "/home/phil/workflow";
#    $cmd = "/home/phil/workflow/maketicket.csh gate=hmi.LOS wantlow=$wantlow wanthigh=$wanthigh action=5";
#    print "$cmd\n";
#    if($EXECUTE) {
#      #`$cmd`;
#    }
}
else {
  print "**NG can't process definitive lev1 for $instru $orddate\n";
  $mail = "Mail -s \"Can't process def lev1 for $instru $orddate\"";
        #$to = "lev0_user";
        $to = "jim";    #!!TEMP
        $msg = "TEMP";
        $cmd = "echo \"Def lev1 preconditions not meet\" | $mail $to";
        system $cmd;
}

print "**END: lev1_definitive.pl for $instru $orddate\n";  #used by lev1_def_gui to know end
$dbh->disconnect();

#Initialize $todayUTCdayofyr when first start
sub inittoday {
  local($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst,$date,$sec2,$min2,$hour2,$mday2);
  ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = gmtime(time);
  $todayUTCdayofyr = $yday+1;   #1-366
  $sec2 = sprintf("%02d", $sec);
  $min2 = sprintf("%02d", $min);
  $hour2 = sprintf("%02d", $hour);
  $mday2 = sprintf("%02d", $mday);
  $mon2 = sprintf("%02d", $mon+1);
  $year4 = sprintf("%04d", $year+1900);
  $date = $year4.".".$mon2.".".$mday2._.$hour2.":".$min2.":".$sec2."_UTC";
  $pztdate = $year4.",".$mon2.",".$mday2;
  return($date);
}

sub get_date {
  local($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst,$date,$sec2,$min2,$hour2,$mday2);
  #($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = gmtime(time);
  ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
  $sec2 = sprintf("%02d", $sec);
  $min2 = sprintf("%02d", $min);
  $hour2 = sprintf("%02d", $hour);
  $mday2 = sprintf("%02d", $mday);
  $mon2 = sprintf("%02d", $mon+1);
  $year4 = sprintf("%04d", $year+1900);
  $date = $year4.".".$mon2.".".$mday2._.$hour2.":".$min2.":".$sec2;
  return($date);
}

