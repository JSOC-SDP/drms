/* SUMLIB_MainTapeUpdate.pgc 
 *
 * Updates the sum_main db table when a tape write completes.
 * The following fields are updated for each ds_index for reqcnt:
 * ARCHIVE_STATUS, ARCH_TAPE, ARCH_TAPE_FN, ARCH_TAPE_DATE.
 * Also delete AP/add DP sum_partn_alloc entries.
 * Also inserts the md5cksum into the sum_file table.
 * Return non-0 if any of the updates fail.
 * 
 * Called from taperespwritedo_1() in tape_svc. A call looks like:
 * tape_closed:    KEYTYP_INT      -1
 * tapeid:         KEYTYP_STRING   000014S
 * md5cksum:    KEYTYP_STRING   5ddf4230d9566ca38a7927512244c4ae
 * gtarblock:   KEYTYP_INT      256
 * availblocks: KEYTYP_UINT64   48828000
 * STATUS:      KEYTYP_INT      0
 * group_id:    KEYTYP_INT      99
 * nxtwrtfn:    KEYTYP_INT      2
 * procnum:     KEYTYP_ULONG    1
 * current_client:      KEYTYP_FILEP    6917529027641678096
 * OP:  KEYTYP_STRING   wt
 * reqcnt:      KEYTYP_INT      3
 * username_2:  KEYTYP_STRING   jim
 * ds_index_2:  KEYTYP_UINT64   460
 * safe_id_2:   KEYTYP_INT      0
 * group_id_2:  KEYTYP_INT      99
 * archsub_2:   KEYTYP_INT      128
 * status_2:    KEYTYP_INT      4
 * bytes_2:     KEYTYP_DOUBLE              1.200000e+08
 * sumid_2:     KEYTYP_UINT64   458
 * effective_date_2:    KEYTYP_STRING   2005212
 * wd_2:        KEYTYP_STRING   /SUM1/D460
 * username_1:  KEYTYP_STRING   jim
 * ds_index_1:  KEYTYP_UINT64    464
 * safe_id_1:   KEYTYP_INT      0
 * group_id_1:  KEYTYP_INT      99
 * archsub_1:   KEYTYP_INT      128
 * status_1:    KEYTYP_INT      4
 * bytes_1:     KEYTYP_DOUBLE              1.200000e+08
 * sumid_1:     KEYTYP_UINT64    460
 * effective_date_1:    KEYTYP_STRING   2005212
 * wd_1:        KEYTYP_STRING   /SUM1/D464
 * DEBUGFLG:    KEYTYP_INT      1
 * username_0:  KEYTYP_STRING   jim
 * ds_index_0:  KEYTYP_UINT64    1523
 * safe_id_0:   KEYTYP_INT      0
 * group_id_0:  KEYTYP_INT      99
 * archsub_0:   KEYTYP_INT      128
 * status_0:    KEYTYP_INT      4
 * bytes_0:     KEYTYP_DOUBLE              1.200000e+08
 * sumid_0:     KEYTYP_UINT64    840
 * effective_date_0:    KEYTYP_STRING   2005246
 * wd_0:        KEYTYP_STRING   /SUM5/D1523
 * dnum:        KEYTYP_INT      0
 * snum:        KEYTYP_INT      14
 * cmd1:  KEYTYP_STRING mtx -f /dev/sg7 load 15 0 1> /tmp/mtx_robot.log 2>&1
 */
#include <SUM.h>
#include <sum_rpc.h>
#include <soi_error.h>
#include <printk.h>

int SUMLIB_MainTapeUpdate(KEY *params); 

int SUMLIB_MainTapeUpdate(KEY *params) 
{
  EXEC SQL TYPE myuint64_t IS unsigned long long int;

EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR l_eff_date[20];
  VARCHAR l_wd[80];
  VARCHAR arch_status[5];
  int storage_group;
  int safe_id;
  double bytes;
  myuint64_t ds_index;
  myuint64_t create_sumid;
  VARCHAR arch_tape[20];
  VARCHAR l_md5cksum[48];
  int gtarblock;
  int arch_tape_fn;
  VARCHAR arch_tape_date[32];
  int apstatus;
  int archsub;
  int groupid;
EXEC SQL END DECLARE SECTION;
  
int i, reqcnt, eflg, dosafe, permanent;
char *tapeid;
char nametmp[80];

  eflg = 0;
  reqcnt = getkey_int(params, "reqcnt");
  tapeid = GETKEY_str(params, "tapeid");
  arch_tape_fn = getkey_int(params, "nxtwrtfn");
  gtarblock = getkey_int(params, "gtarblock");
  sprintf(arch_status.arr, "%s", "Y");
  arch_status.len = strlen(arch_status.arr);
  sprintf(arch_tape.arr, "%s", tapeid);
  arch_tape.len = strlen(arch_tape.arr);
  sprintf(l_md5cksum.arr, "%s", GETKEY_str(params, "md5cksum"));
  l_md5cksum.len = strlen(l_md5cksum.arr);

  sprintf(arch_tape_date.arr, "%s", get_datetime());
  arch_tape_date.len = strlen(arch_tape_date.arr);

  for(i=0; i < reqcnt; i++) {
    sprintf(nametmp, "ds_index_%d", i);
    ds_index = getkey_uint64(params, nametmp);

     EXEC SQL WHENEVER SQLERROR GOTO sqlerror;
     EXEC SQL UPDATE SUM_MAIN
	SET ARCHIVE_STATUS = :arch_status,
	ARCH_TAPE = :arch_tape,
	ARCH_TAPE_FN = :arch_tape_fn,
	ARCH_TAPE_DATE = :arch_tape_date
	WHERE DS_INDEX = :ds_index;

    /* now delete AP/add DP sum_partn_alloc entries for reqcnt */
    sprintf(nametmp, "wd_%d", i);
    sprintf(l_wd.arr,"%s", GETKEY_str(params, nametmp));
    l_wd.len = strlen(l_wd.arr);
    sprintf(nametmp, "sumid_%d", i);
    create_sumid = getkey_uint64(params, nametmp);
    sprintf(nametmp, "status_%d", i);
    apstatus = getkey_int(params, nametmp);
    sprintf(nametmp, "archsub_%d", i);
    archsub = getkey_int(params, nametmp);
    sprintf(nametmp, "safe_id_%d", i);
    safe_id = getkey_int(params, nametmp);
    sprintf(nametmp, "group_id_%d", i);
    groupid = getkey_int(params, nametmp);
 //printk("In SUMLIB_MainTapeUpdate() delete from SUM_PARTN_ALLOC:\n");
 //printk("l_wd=%s, create_sumid=%lu, apstatus=%d\n", l_wd.arr,create_sumid,apstatus );
    EXEC SQL DELETE FROM SUM_PARTN_ALLOC
           WHERE WD = :l_wd
           AND SUMID = :create_sumid
           AND STATUS = :apstatus;

    sprintf(nametmp, "effective_date_%d", i);
    sprintf(l_eff_date.arr,"%s", GETKEY_str(params, nametmp));
    l_eff_date.len = strlen(l_eff_date.arr);

    dosafe = (apstatus==DASAP);
    permanent = (archsub==DAAPERM);
    apstatus = dosafe?DAAP:(permanent?DAPERM:DADP);
    storage_group = dosafe?safe_id:groupid;
    sprintf(nametmp, "bytes_%d", i);
    bytes = getkey_double(params, nametmp);

    EXEC SQL INSERT INTO SUM_PARTN_ALLOC (WD, SUMID, STATUS, BYTES, 
		EFFECTIVE_DATE, ARCHIVE_SUBSTATUS, GROUP_ID, SAFE_ID, DS_INDEX)
      VALUES (:l_wd, :create_sumid, :apstatus, :bytes, :l_eff_date, :archsub, :storage_group, :safe_id, :ds_index);

     continue;

sqlerror:
     printk("Error in SUMLIB_MainTapeUpdate() \n");
     printk("% .70s \n", sqlca.sqlerrm.sqlerrmc);
     eflg = 1;
     /*EXEC SQL WHENEVER SQLERROR CONTINUE;*/
     /*EXEC SQL ROLLBACK WORK;*/
  }
  if(eflg) {
    EXEC SQL COMMIT WORK;
    return(1);
  }

  EXEC SQL INSERT INTO SUM_FILE (TAPEID, FILENUM, GTARBLOCK, MD5CKSUM)
	VALUES (:arch_tape, :arch_tape_fn, :gtarblock, :l_md5cksum);

  EXEC SQL COMMIT WORK;
  return(0);
}
