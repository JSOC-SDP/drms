/* SUMLIB_DS_DataRequest.pgc
 * Returns in the results keylist info on the storage units for the 
 * given ds_index values. Also does touch update and DARO status for
 * the given storage units.
 * The keywords in the input KEY * are like so:
 *   uid    = unique id from a SUM_open() call for this session
 *   reqcnt = number of ds_index values being requested
 *   dsix_0 = first ds_index value 
 *   dsix_1 = second ds_index value 
 *   [etc.]
 *   mode:   KEYTYP_INT      8
 *   tdays:  KEYTYP_INT      5
 * Returns 0 on success, else error code.
 * Does the query of all the ds_index values in a single SQL call.
 * This is faster than doing a call for each ds_index.
 */
#include <SUM.h>
#include <sum_rpc.h>
#include <soi_error.h>
#include <printk.h>


static int n_off, n_total;	/* counts since dsds_svc started */
static int c_off, c_total;	/* counts for last 100 ds */

int DS_DataRequest(KEY *params, KEY **results);

int DS_DataRequest(KEY *params, KEY **results)
{
  EXEC SQL TYPE uint64_t IS unsigned long long;

EXEC SQL BEGIN DECLARE SECTION;
  char stmt[8192];
  VARCHAR l_eff_date[20];
  VARCHAR eff_date_str[20];
  char *eff_date;
  uint64_t uid;
  uint64_t ds_index;
  uint64_t ds_index_arr[MAXSUMREQCNT];
  uint64_t ds_index_arr_pos[MAXSUMREQCNT];
  int  touch;
  int  daro = DARO;
  struct {
    VARCHAR online_loc[80];
    VARCHAR online_status[5];
    VARCHAR archive_status[5];
    VARCHAR offsite_ack[5];
    double bytes;
    uint64_t ds_index;
    uint64_t create_sumid;
    VARCHAR  tape_id[20];
    int  tape_file_num;
    VARCHAR tapepos[15];
    VARCHAR l_date[32];
  } mainquery;

  struct {
    short online_loc_ind;
    short online_status_ind;
    short archive_status_ind;
    short offsite_ack_ind;
    short bytes_ind;
    short ds_index_ind;
    short create_sumid_ind;
    short  tape_id_ind;
    short  tape_file_num_ind;
    short tapepos_ind;
    short l_date_ind;
  } mainind;

EXEC SQL END DECLARE SECTION;
char STMT[] = "SELECT ONLINE_LOC, ONLINE_STATUS, ARCHIVE_STATUS, OFFSITE_ACK, BYTES, DS_INDEX, CREATE_SUMID, ARCH_TAPE,ARCH_TAPE_FN,ARCH_TAPE_POS,CREAT_DATE FROM SUM_MAIN WHERE DS_INDEX in (";
   char loc[80];
   char l_tapepos[15];
   char l_tape_id[20];
   char dsix_name[128];
   int i, reqcnt, mode, tdays, posdays, offline, pos, change;

   uid = getkey_uint64(params, "uid");
   mode = getkey_int(params, "mode");
   if(findkey(params, "tdays")) 
     tdays = getkey_int(params, "tdays");
   else 
     tdays = 2;
  /* The mode bit "TOUCH" indicates that if this dataset is 
   * online, it is to have its effective_date for deletion set to today
   * plus "tdays" days. If it is not online, then "TOUCH" is handled 
   * in driven_svc.c if the ds is retrieved from tape.
   * NEW 15Sep2008: negative tdays means set effective_date to the greater
   * of the current effective_date or now + ABS(tdays).
   * Note, a tdays of 0 will set the effective_date to now.
  */
  if(mode & TOUCH) touch = 1;
  else touch = 0;

    reqcnt = getkey_int(params, "reqcnt");
    offline = 0;
    sprintf(stmt, "%s", STMT);
  	 
    /* Make the query statement. Remember that the wd returned may not be
     * in the same order as requested here.
     */
    for(i=0; i < reqcnt ; i++) {
      sprintf(dsix_name, "dsix_%d", i);
      if(!findkey(params, dsix_name)) {
        printk("Bad keylist given to DS_DataRequest()\n");
        return(DS_DATA_REQ);
      }
      ds_index = getkey_uint64(params, dsix_name);
      ds_index_arr[i] = ds_index;         /* save in the proper position */
      ds_index_arr_pos[i] = 0;		  //keep track of any dups
      sprintf(dsix_name, "wd_%d", i);
      setkey_str(results, dsix_name, ""); /* preset blank in case doen't exist*/
      if(i == (reqcnt - 1))
	sprintf(stmt, "%s%lu);", stmt, ds_index);
      else
	sprintf(stmt, "%s%lu,", stmt, ds_index);
     }

     EXEC SQL WHENEVER SQLERROR GOTO sqlerror;
     EXEC SQL PREPARE query FROM :stmt;
     EXEC SQL DECLARE reqcursor CURSOR FOR query;
     EXEC SQL OPEN reqcursor;
  	 
     EXEC SQL WHENEVER NOT FOUND GOTO end_fetch;

     for(i=0; ; i++) {
       EXEC SQL FETCH reqcursor INTO :mainquery :mainind;

       strcpy(loc, mainquery.online_loc.arr);
       strcpy(l_tapepos, mainquery.tapepos.arr);
       strcpy(l_tape_id, mainquery.tape_id.arr);
       ds_index = mainquery.ds_index;
       /* find the position of the ds_index in the orig array */
       for(pos=0; pos < reqcnt; pos++) {
         if(ds_index == ds_index_arr[pos]) break;
       }
       if(ds_index_arr_pos[pos] == 0) { 
         ds_index_arr_pos[pos] = 1;
       }
       else { continue; }	//skip a dup ds_index
     if (strcmp(mainquery.online_status.arr, "N")==0) { /* not on-line */
       if(mode & NORETRIEVE) strcpy(loc, "");	/* give back empty wd */
       else {
	 //!!TEMP print out for debug
         //printk("!!TEMP online_status=%s archive_status=%s XX\n",
	 //	mainquery.online_status.arr, mainquery.archive_status.arr); 
         /* ck for not online & not archived! */
  	 if(strcmp(mainquery.archive_status.arr, "N")==0) {
           strcpy(loc, "");			/* give back empty wd */
         }
         else offline = 1;
       }
     }
     else {                                      /* on-line */		

      /* If "touch" given then make deletable in tdays days. 
       * Update all entries
       * for the ds_index in the partn_alloc table.
      */
      if(touch) {
        /* get the original effective_date and see if ok to change */
        EXEC SQL SELECT DISTINCT EFFECTIVE_DATE INTO :eff_date_str
        FROM SUM_PARTN_ALLOC where DS_INDEX = :ds_index 
	and STATUS != :daro;
        if(tdays < 0) {		//if tdays neg, only make eff_date bigger
          posdays = abs(tdays);
          eff_date = (char *)get_effdate(posdays);
          if(strcmp(eff_date, eff_date_str.arr) > 0) change = 1; 
          else change = 0;
        }
        else {
          eff_date = (char *)get_effdate(tdays);
          change = 1;
        }
        if(change) {
          sprintf(l_eff_date.arr, "%s", eff_date);
          l_eff_date.len = strlen(l_eff_date.arr);
          EXEC SQL WHENEVER SQLERROR CONTINUE;
          EXEC SQL WHENEVER NOT FOUND CONTINUE;
          EXEC SQL UPDATE SUM_PARTN_ALLOC 
               SET EFFECTIVE_DATE = :l_eff_date
               WHERE DS_INDEX = :ds_index 
		and STATUS != :daro;
          EXEC SQL WHENEVER SQLERROR GOTO sqlerror;
          EXEC SQL WHENEVER NOT FOUND GOTO end_fetch;
        }
        free(eff_date);
      } 
    }

      /* add an entry for read-only assignment to db partn_alloc tbl */
      // This was eliminated 22Oct2009. The DRMS has a default of touch 3
      // and so nothing should go offline while a module is running.
      //if(NC_PaUpdate(mainquery.online_loc.arr,uid,mainquery.bytes,DARO,0,0,0,0,ds_index,1,0))
      //{
      //  /* rollback already done */
      //  printk("Error on NC_PaUpdate to add to r/o list\n");
      //  return(DS_PALC_ERR);
      // }
        sprintf(dsix_name, "online_status_%d", pos);
        setkey_str(results, dsix_name, mainquery.online_status.arr);
        sprintf(dsix_name, "archive_status_%d", pos);
    	setkey_str(results, dsix_name, mainquery.archive_status.arr); 
        sprintf(dsix_name, "bytes_%d", pos);
 	setkey_double(results, dsix_name, mainquery.bytes);
        sprintf(dsix_name, "create_sumid_%d", pos);
        setkey_uint64(results, dsix_name, mainquery.create_sumid);
        sprintf(dsix_name, "ds_index_%d", pos);
    	setkey_uint64(results, dsix_name, ds_index); 
        sprintf(dsix_name, "wd_%d", pos);
    	setkey_str(results, dsix_name, loc);
        sprintf(dsix_name, "tapeid_%d", pos);
        setkey_str(results, dsix_name, l_tape_id);
        sprintf(dsix_name, "tapefilenum_%d", pos);
        setkey_int(results, dsix_name, mainquery.tape_file_num);
    }
        end_fetch:
        setkey_int(results, "reqcnt", reqcnt);
        setkey_int(results, "mode", mode);
        setkey_int(results, "tdays", tdays);
        if((offline) && (mode & RETRIEVE)) {
          setkey_int(results, "offline", 1); 
        }
        else { setkey_int(results, "offline", 0); }
    	EXEC SQL COMMIT WORK;
        /*reqreqstat(0, history);*/
	return NO_ERROR;
sqlerror:
         printk("Error in DS_DataRequest\n");
         printk("% .70s \n", sqlca.sqlerrm.sqlerrmc);
         EXEC SQL WHENEVER SQLERROR CONTINUE;
         EXEC SQL ROLLBACK WORK;
         return DS_DATA_QRY;
}


/* This is an old legacy rte that is not used anymore. Keep for reference */
/* Called when a dataset has been found on or offline.
 * Keeps statistics on how many are on/offline. 
 * If offline, the DS_DataRequest() will be called again when the ds
 * is retrieved from tape, so dont inc the total counts if offline.
 *   offflg = the ds is offline if true
 *   log = log file for printf() type output msgs
*/
void reqreqstat(int offflg, int (*log)(char *fmt, ...))
{
  if(offflg) {
    n_off++; c_off++;
  }
  else {
    n_total++; c_total++;
  }
  /* output statistics for every 100 ds requested */
  if(c_total >= 100) {
    (*log)("\nIn total %d ds requested, %d were offline (%2.1fpercent)\n",
                n_total, n_off, ((float)n_off/(float)n_total)*100.0);
    (*log)("In last %d ds requested, %d were offline (%2.1fpercent)\n",
                c_total, c_off, ((float)c_off/(float)c_total)*100.0);
    c_total = c_off = 0;
  }
}
