/* DS_PavailRequest.pc
 * Called to update memory tables with partn available info. 
 * Basically downloading information from the partn_avail table to memory 
 * structures. 
 */
#include <SUM.h>
#include <sum_rpc.h>
#include <soi_error.h>
#include <printk.h>

int cmp_pds_num(const void *a, const void *b);
int DS_PavailRequest();
int DS_PavailRequestEx();  /* extended w/new column pds_set_prime 7/23/2012 */
int DS_PavailRequest2();

PART ptab[MAX_PART]; 		/* used in sum_rm.c */
PART ptabx[MAX_PART]; 		/* used in sum_svc.c */

int DS_PavailRequest()
{
EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR l_name[80];
  double l_total;
  double l_avail;
  int l_pnum;
  char name[80];
  char *namestr;
EXEC SQL END DECLARE SECTION;
int i;

    printk("DS_PavailRequest \n");  
    EXEC SQL WHENEVER SQLERROR GOTO sqlerror;

	EXEC SQL DECLARE pavail CURSOR FOR
		SELECT PARTN_NAME, TOTAL_BYTES, AVAIL_BYTES, PDS_SET_NUM
		FROM SUM_PARTN_AVAIL;

	EXEC SQL OPEN pavail;

    EXEC SQL WHENEVER NOT FOUND GOTO end_fetch; 
	
	for(i=0; i<MAX_PART-1; i++){
		EXEC SQL FETCH pavail INTO :l_name, :l_total, :l_avail, :l_pnum;
		strcpy(name, l_name.arr);
		namestr = (char *) malloc (sizeof(name));
		strcpy(namestr, name);
 
    	/* setting up memory tables here */
		ptab[i].name = namestr;
		ptab[i].bytes_total = l_total;
		ptab[i].bytes_left = l_avail;
		ptab[i].bytes_alloc = 0.0;
		ptab[i].pds_set_num = l_pnum;
	}
	if (i==MAX_PART-1){
		/*printf("more partitions than reqd \n"); */
                EXEC SQL CLOSE pavail;
                EXEC SQL COMMIT WORK;
		return DS_DATA_QRY;
	} 

end_fetch:
        /* sort ptab[] in ascending pds_set_num */
        qsort(ptab, i, sizeof(PART), &cmp_pds_num);
        /* put a terminating entry in the in-memory table */
	ptab[i].name = NULL;	
	ptab[i].pds_set_num = -1;	
	EXEC SQL CLOSE pavail;
    EXEC SQL COMMIT WORK;
    return NO_ERROR;
	
sqlerror:
    printk("Error in DS_PavailRequest\n");
    printk("% .70s \n", sqlca.sqlerrm.sqlerrmc);
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    EXEC SQL ROLLBACK WORK;
    return DS_DATA_QRY;
}

int DS_PavailRequestEx()
{
EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR l_name[80];
  double l_total;
  double l_avail;
  int l_pnum;
  int l_pnumprime;
  char name[80];
  char *namestr;
EXEC SQL END DECLARE SECTION;
int i;

    printk("DS_PavailRequestEx \n");  
    EXEC SQL WHENEVER SQLERROR GOTO sqlerror;

	EXEC SQL DECLARE pavail CURSOR FOR
	SELECT PARTN_NAME, TOTAL_BYTES, AVAIL_BYTES, PDS_SET_NUM, PDS_SET_PRIME
	FROM SUM_PARTN_AVAIL;

	EXEC SQL OPEN pavail;

    EXEC SQL WHENEVER NOT FOUND GOTO end_fetch; 
	
	for(i=0; i<MAX_PART-1; i++){
		EXEC SQL FETCH pavail INTO :l_name, :l_total, :l_avail, :l_pnum, :l_pnumprime;
		strcpy(name, l_name.arr);
		namestr = (char *) malloc (sizeof(name));
		strcpy(namestr, name);
 
    	/* setting up memory tables here */
		ptab[i].name = namestr;
		ptab[i].bytes_total = l_total;
		ptab[i].bytes_left = l_avail;
		ptab[i].bytes_alloc = 0.0;
		ptab[i].pds_set_num = l_pnum;
		ptab[i].pds_set_prime = l_pnumprime;
	}
	if (i==MAX_PART-1){
		/*printf("more partitions than reqd \n"); */
                EXEC SQL CLOSE pavail;
                EXEC SQL COMMIT WORK;
		return DS_DATA_QRY;
	} 

end_fetch:
        /* sort ptab[] in ascending pds_set_num */
        qsort(ptab, i, sizeof(PART), &cmp_pds_num);
        /* put a terminating entry in the in-memory table */
	ptab[i].name = NULL;	
	ptab[i].pds_set_num = -1;	
	EXEC SQL CLOSE pavail;
    EXEC SQL COMMIT WORK;
    return NO_ERROR;
	
sqlerror:
    printk("Error in DS_PavailRequest\n");
    printk("% .70s \n", sqlca.sqlerrm.sqlerrmc);
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    EXEC SQL ROLLBACK WORK;
    return DS_DATA_QRY;
}

/* Like above, but sets up the sum_svc table instead. */
int DS_PavailRequest2()
{
EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR l_name[80];
  double l_total;
  double l_avail;
  int l_pnum;
  char name[80];
  char *namestr;
EXEC SQL END DECLARE SECTION;
int i, setnum, pnum;

extern int part_index[];	/* defined in SUMLIB_PavailGet.pgc */
extern int part_index_init[];	/* defined in SUMLIB_PavailGet.pgc */

    //printk("DS_PavailRequest2 \n");  

    EXEC SQL WHENEVER SQLERROR GOTO sqlerror;

	EXEC SQL DECLARE pavail2 CURSOR FOR
		SELECT PARTN_NAME, TOTAL_BYTES, AVAIL_BYTES, PDS_SET_NUM
		FROM SUM_PARTN_AVAIL;

	EXEC SQL OPEN pavail2;

    EXEC SQL WHENEVER NOT FOUND GOTO end_fetch; 
	
	for(i=0; i<MAX_PART-1; i++){
		EXEC SQL FETCH pavail2 INTO :l_name, :l_total, :l_avail, :l_pnum;
		strcpy(name, l_name.arr);
		namestr = (char *) malloc (sizeof(name));
		strcpy(namestr, name);
 
    	/* setting up memory tables here */
		ptabx[i].name = namestr;
		ptabx[i].bytes_total = l_total;
		ptabx[i].bytes_left = l_avail;
		ptabx[i].bytes_alloc = 0.0;
		ptabx[i].pds_set_num = l_pnum;
	}
	if (i==MAX_PART-1){
		/*printf("more partitions than reqd \n"); */
                EXEC SQL CLOSE pavail2;
                EXEC SQL COMMIT WORK;
		return DS_DATA_QRY;
	} 

end_fetch:
        /* sort ptabx[] in ascending pds_set_num */
        qsort(ptabx, i, sizeof(PART), &cmp_pds_num);
        /* put a terminating entry in the in-memory table */
	ptabx[i].name = NULL;	
	ptabx[i].pds_set_num = -1;	
        pnum = i;
        /* set up part_index[] in NC_PavailGet for where each PDS set 
         * starts. Notice: The qsort above has made the PDS sets  
         * sequential in the ptabx table. */
        setnum = -1;
        for(i=0; i < pnum ; i++) {
          if(ptabx[i].pds_set_num != setnum) {
            //setnum++;         //N.G. assumes no missing pds_set_num
            setnum = ptabx[i].pds_set_num;
            part_index[setnum] = i;
            part_index_init[setnum] = i;
          }
        }
	EXEC SQL CLOSE pavail2;
    EXEC SQL COMMIT WORK;
    return NO_ERROR;
	
sqlerror:
    printk("Error in DS_PavailRequest2\n");
    printk("% .70s \n", sqlca.sqlerrm.sqlerrmc);
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    EXEC SQL ROLLBACK WORK;
    return DS_DATA_QRY;
}

int cmp_pds_num(const void *a, const void *b)
{
  PART *x=(PART *)a, *y=(PART *)b;

  if(x->pds_set_num < y->pds_set_num) return(-1);
  if(x->pds_set_num > y->pds_set_num) return(1);
  if(strcmp(x->name, y->name) < 0) return(-1);
  if(strcmp(x->name, y->name) > 0) return(1);
  return(0);
}
