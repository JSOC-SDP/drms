/* SUMLIB_PavailGet.pgc  
 * This is a function to query the Database Partition Availability table
 * Currently the table is SUM_partn_avail. Get the first partn that is in the
 * given storage set and  has bytes >= bytes requested.
 * Searches for storage round-robin amoungst the /SUM partitions.
 * Returns 0 on success with the wd in "partn_name" in the results keylist.
 */
#include <SUM.h>
#include <sum_rpc.h>
#include <soi_error.h>
#include <printk.h>

/* initial index to ptabx[] and last one used for each /SUM set */
/* First initialized by DS_PavailRequest2() called by SUM_Init() */
/* Set for a possible 1 /SUM partition per set */
int part_index_init[MAX_PART];
int part_index[MAX_PART];

extern PADATA *pahdr_rw;

int SUMLIB_PavailGet(double bytes, int pds_set, uint64_t uid, uint64_t sunum, KEY **results);

int SUMLIB_SumsetGet(int group, int *sumset);

int SUMLIB_PavailGet(double bytes, int pds_set, uint64_t uid, uint64_t sunum, KEY **results) 
{
  EXEC SQL TYPE uint64_t IS unsigned long long;

EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR l_name[80];
  double  l_bytes;
  double  total_bytes;
  int	  l_pnum;
  uint64_t ds_index;
EXEC SQL END DECLARE SECTION;

extern PART ptabx[]; 		/* defined in sum_svc.c */
int fnum, found, i, j;
char *pnames[MAX_PART];
double btotals[MAX_PART];
char mkpart[MAX_STR];
char dirstr[MAX_STR];

EXEC SQL INCLUDE sqlca;
    l_bytes = bytes;
    l_pnum = pds_set;

    EXEC SQL WHENEVER SQLERROR GOTO sqlerror;
    EXEC SQL WHENEVER NOT FOUND GOTO end_fetch;

	EXEC SQL DECLARE availget CURSOR FOR 
		SELECT PARTN_NAME, AVAIL_BYTES 
			FROM SUM_PARTN_AVAIL 
			WHERE AVAIL_BYTES >= :l_bytes
			AND PDS_SET_NUM = :l_pnum; 

	EXEC SQL OPEN availget;
  if(pds_set < 0) return DATA_NOT_FOUND;
  for(fnum=0; ;fnum++ ) {
	EXEC SQL FETCH availget INTO :l_name, :total_bytes;
        pnames[fnum] = (char *)malloc(32);
        strcpy(pnames[fnum], l_name.arr);
        btotals[fnum] = total_bytes;
  }

end_fetch:
        if(fnum == 0) {
          printk("Err SUMLIB_PavailGet-can't get requested storage on SUM set %d %g bytes\n", pds_set, l_bytes);
	  EXEC SQL CLOSE availget;
          EXEC SQL COMMIT;
          return DATA_NOT_FOUND;
        }
        found = 0;
        /* now find a hit that is on or past the last part_index */
        /* a hit has to be here */
        for(i=part_index[pds_set]; ; i++) {
          if(ptabx[i].pds_set_num != pds_set) {
             i = part_index_init[pds_set]; 
             part_index[pds_set] = part_index_init[pds_set];
          }
          for(j=0; j<fnum; j++) {
              if(!strcmp(ptabx[i].name, pnames[j])) {
                found = 1; 
		part_index[pds_set] = i+1; /* start after where left off */
                break;
              }
           }
           if(found) break;
        }
        strcpy(l_name.arr, pnames[j]);
        l_name.len = strlen(l_name.arr);

        for(i=0; i<fnum; i++) free(pnames[i]);

	EXEC SQL CLOSE availget;
        EXEC SQL COMMIT;

    if(sunum == 0) {	//we assign ds_index
      EXEC SQL SELECT NEXTVAL('SUM_DS_INDEX_SEQ') INTO :ds_index;
    }
    else {		//use the given ds_index
      ds_index = sunum;
    }
        setkey_uint64(results, "ds_index", ds_index);
        sprintf(mkpart, "%s/D%ld", l_name.arr, ds_index);
	setkey_str(results, "partn_name", mkpart);
        sprintf(dirstr, "mkdir %s; chmod 02775 %s", mkpart, mkpart);
        if(system(dirstr)) {
          printk("Error in SUMLIB_PavailGet() for cmd: %s\n", dirstr);
          EXEC SQL COMMIT;
          return DS_ALLOC_ERR;
        }

        //printk("Allocate in SUMLIB_PavailGet %g bytes in %s\n", l_bytes, l_name.arr);
        EXEC SQL COMMIT;
	return NO_ERROR;
    
sqlerror:
	EXEC SQL CLOSE availget;
        EXEC SQL COMMIT;
	printk("Error in SUMLIB_PavailGet\n");  
	printk("% .70s \n", sqlca.sqlerrm.sqlerrmc);  
    return DS_PAVAIL_ERR;
}

/* Get the sum_set number for the given group number from the db
 * table sum_arch_group. If none found, sets sumset to 0.
 * Return 1 on success.
*/
int SUMLIB_SumsetGet(int group, int *sumset)
{
EXEC SQL BEGIN DECLARE SECTION;
  int     l_sumset;
  int     l_group;
EXEC SQL END DECLARE SECTION;

  *sumset = 0;		//default is 0
  l_group = group;

    EXEC SQL WHENEVER SQLERROR GOTO sqlerror;
    EXEC SQL WHENEVER NOT FOUND GOTO sqlerror;

  EXEC SQL SELECT sum_set INTO :l_sumset from SUM_ARCH_GROUP where group_id = :l_group;

  *sumset = l_sumset;
  return(1);

sqlerror:
        printk("Error in SUMLIB_SumsetGet for group %d\n", group);
        printk("% .70s \n", sqlca.sqlerrm.sqlerrmc);
    return 0;
}
