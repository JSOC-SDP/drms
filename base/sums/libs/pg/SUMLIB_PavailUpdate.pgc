/* SUMLIB_PavailUpdate.pgc
*/
#include <SUM.h>
#include <sum_rpc.h>
#include <soi_error.h>
#include <printk.h>

int SUMLIB_PavailUpdate(char *name, double bytes);
int SUMLIB_PavailOff(char *name);
int SUMLIB_PavailOn(char *name, int setnum);

int SUMLIB_PavailUpdate(char *name, double bytes)
{
EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR l_name[80];
  long long l_bytes;
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE sqlca;

    sprintf(l_name.arr,"%s", name);
    l_name.len = strlen(l_name.arr);
    l_bytes = (long long)bytes;
    if(strcmp(l_name.arr, "")){
    /*printf("not null wd:: %s\n", l_wd.arr); */
    } else {
    /*printf("null l_wd.arr:: %s\n", l_wd.arr); */
            return DS_PAVAIL_ERR;
    }
    EXEC SQL WHENEVER SQLERROR GOTO sqlerror;

    EXEC SQL WHENEVER NOT FOUND GOTO sqlerror;

    EXEC SQL UPDATE SUM_PARTN_AVAIL 
		SET AVAIL_BYTES = :l_bytes
        WHERE PARTN_NAME = :l_name;
    EXEC SQL COMMIT WORK;
	return NO_ERROR;
    
sqlerror:
	printk("Error in SUMLIB_PavailUpdate\n");  
	printk("% .70s \n", sqlca.sqlerrm.sqlerrmc);  
    //EXEC SQL WHENEVER SQLERROR CONTINUE;
    //EXEC SQL ROLLBACK WORK;
    return DS_PAVAIL_ERR;
}


int SUMLIB_PavailOff(char *name)
{
EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR l_name[80];
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE sqlca;

    sprintf(l_name.arr,"%s", name);
    l_name.len = strlen(l_name.arr);
    if(strcmp(l_name.arr, "")){
    /*printf("not null wd:: %s\n", l_wd.arr); */
    } else {
    /*printf("null l_wd.arr:: %s\n", l_wd.arr); */
            return DS_PAVAIL_ERR;
    }
    EXEC SQL WHENEVER SQLERROR GOTO sqlerror;

    EXEC SQL WHENEVER NOT FOUND GOTO sqlerror;

    EXEC SQL UPDATE SUM_PARTN_AVAIL 
		SET pds_set_num = -1
        WHERE PARTN_NAME = :l_name;
    EXEC SQL COMMIT WORK;
	return NO_ERROR;
    
sqlerror:
	printk("Error in SUMLIB_PavailOff\n");  
	printk("% .70s \n", sqlca.sqlerrm.sqlerrmc);  
    //EXEC SQL WHENEVER SQLERROR CONTINUE;
    //EXEC SQL ROLLBACK WORK;
    return DS_PAVAIL_ERR;
}

int SUMLIB_PavailOn(char *name, int setnum)
{
EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR l_name[80];
  int l_setnum;
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE sqlca;

    sprintf(l_name.arr,"%s", name);
    l_name.len = strlen(l_name.arr);
    if(strcmp(l_name.arr, "")){
    /*printf("not null wd:: %s\n", l_wd.arr); */
    } else {
    /*printf("null l_wd.arr:: %s\n", l_wd.arr); */
            return DS_PAVAIL_ERR;
    }
    l_setnum = setnum;
    EXEC SQL WHENEVER SQLERROR GOTO sqlerror;

    EXEC SQL WHENEVER NOT FOUND GOTO sqlerror;

    EXEC SQL UPDATE SUM_PARTN_AVAIL 
		SET pds_set_num = :l_setnum
        WHERE PARTN_NAME = :l_name;
    EXEC SQL COMMIT WORK;
	return NO_ERROR;
    
sqlerror:
	printk("Error in SUMLIB_PavailOn\n");  
	printk("% .70s \n", sqlca.sqlerrm.sqlerrmc);  
    //EXEC SQL WHENEVER SQLERROR CONTINUE;
    //EXEC SQL ROLLBACK WORK;
    return DS_PAVAIL_ERR;
}
