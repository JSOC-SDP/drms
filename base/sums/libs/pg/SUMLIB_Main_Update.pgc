/* SUMLIB_Main_Update.pgc 
 *
*/
#include <SUM.h>
#include <sum_rpc.h>
#include <printk.h>

/* Updates the sum_main db table when a sum_put() is called. Called from
 * putdo_1() in sum_svc_proc.c. Can be called for multiple SUs.
 * Returns 0 on success.
 * Returns 1 on fatal error.
 * Returns 2 on error with individual wd
 * A input keylist looks like:
 * wd_0:   KEYTYP_STRING   /SUM1/D1703
 * dsix_0: KEYTYP_UINT64    1703
 * wd_1:   KEYTYP_STRING   /SUM0/D1696
 * dsix_1: KEYTYP_UINT64    1696
 * REQCODE:        KEYTYP_INT      7
 * DEBUGFLG:       KEYTYP_INT      1
 * storage_set:    KEYTYP_INT      0
 * group:  KEYTYP_INT      65
 * username:       KEYTYP_STRING   production
 * history_comment: KEYTYP_STRING   this is a dummy history comment that is
 * greater than 80 chars long to check out the code
 * dsname: KEYTYP_STRING   hmi_lev1_fd_V
 * reqcnt: KEYTYP_INT      2
 * tdays:  KEYTYP_INT      5
 * mode:   KEYTYP_INT      1
 * uid:    KEYTYP_UINT64    888
 *
 *Returns the above keylist with these values added:
 * status_0: KEYTYP_INT	1
 * status_1: KEYTYP_INT	0
 * bytes_0: KEYTYP_DOUBLE      1.200000e+08
 * bytes_1: KEYTYP_DOUBLE      1.200000e+08
 */
int SUM_Main_Update(KEY *params, KEY **results) 
{
  EXEC SQL TYPE myuint64_t IS unsigned long long int;

EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR online_status[5];
  VARCHAR arch_status[5];
  VARCHAR offsite_ack[5];
  char history_comment[80];
  int storage_group;
  int storage_set;
  int safe_id;
  double bytes;
  myuint64_t ds_index;
  myuint64_t create_sumid;
  char *username;
  char *ccomment;
  char wd[80];
  char *cwd = wd;
  char *dsname;
  VARCHAR l_date[32];
  int mode;
  int  apstatus;
  int  archsub;
  int touch;
  char *effective_date;
EXEC SQL END DECLARE SECTION;
  char dsnamestr[128], nametmp[80];
  int reqcnt, i, errflg;
  
EXEC SQL INCLUDE sqlca;

   reqcnt = getkey_int(params, "reqcnt");
   create_sumid = getkey_uint64(params, "uid");
   safe_id = 0;			/* !!TBD check use of this */
   errflg = 0;

  for(i=0; i < reqcnt; i++) {
   sprintf(nametmp, "wd_%d", i);
   strcpy(wd, GETKEY_str(params, nametmp));
   if(!strcmp(wd, "")) { 
     sprintf(nametmp, "status_%d", i);
     setkey_int(results, nametmp, 1);
     sprintf(nametmp, "bytes_%d", i);
     setkey_double(results, nametmp, 0.0);
     errflg = 1;
     continue;
   }
   bytes = du_dir(wd);
   sprintf(nametmp, "bytes_%d", i);
   setkey_double(results, nametmp, bytes);
   if(!findkey(params, "history_comment")) { strcpy(history_comment, " "); }
   else {
     ccomment = GETKEY_str(params, "history_comment");
     if(strlen(ccomment) > 79) { 
       strncpy(history_comment, ccomment, 79);
       history_comment[79] = '\0';
     }
     else { strcpy(history_comment, ccomment); }
   }
   ccomment = history_comment;
   sprintf(nametmp, "dsix_%d", i);
   ds_index = getkey_uint64(params, nametmp);

   strcpy(online_status.arr, "Y");
   online_status.len = strlen(online_status.arr);
   strcpy(arch_status.arr, "N");
   arch_status.len = strlen(arch_status.arr);
   strcpy(offsite_ack.arr, "N");
   offsite_ack.len = strlen(offsite_ack.arr);
   dsname = getkey_str(params, "dsname");
   if(!dsname) { strcpy(dsnamestr,  "<none>"); }
   else { 
     strcpy(dsnamestr, dsname);
     free(dsname);
   }
   dsname = dsnamestr;
   storage_group = getkey_int(params, "group");
   storage_set = getkey_int(params, "storage_set");
   username = getkey_str(params, "username");
   mode = getkey_int(params, "mode");
   if (SUMS_TAPE_AVAILABLE) apstatus = DAAP;
   else apstatus = DADP; 
   if(mode & ARCH) {
     archsub = DAADP;
   }
   if(mode & TEMP) {
     archsub = DAAEDDP;
   }
   if(mode & PERM) {
     archsub = DAAPERM;
   }
   if(findkey(params, "tdays")) touch = abs(getkey_int(params, "tdays"));
   else touch = 2;
   effective_date = (char *)get_effdate(touch);
   sprintf(l_date.arr, "%s", get_datetime());
   l_date.len = strlen(l_date.arr);

   EXEC SQL WHENEVER SQLERROR GOTO sqlerror;

   EXEC SQL 
      INSERT INTO SUM_MAIN 
         (ONLINE_LOC, 
          ONLINE_STATUS, 
          ARCHIVE_STATUS, 
          OFFSITE_ACK, 
	  DS_INDEX,
	  CREATE_SUMID,
          HISTORY_COMMENT,
	  OWNING_SERIES,
          STORAGE_GROUP,
          STORAGE_SET,
	  BYTES,
	  CREAT_DATE,
	  ACCESS_DATE,
	  USERNAME
	 ) 
	VALUES
         (:cwd, 
          :online_status,
          :arch_status, 
          :offsite_ack, 
	  :ds_index,
	  :create_sumid,
	  :ccomment, 
	  :dsname,
          :storage_group,
          :storage_set,
	  :bytes,
          :l_date,
          :l_date,
	  :username
	 );

   if(NC_PaUpdate(cwd, create_sumid, bytes, apstatus, archsub, effective_date, 
       storage_group, safe_id, ds_index, 1, 0)) {
     EXEC SQL ROLLBACK WORK;
     free(effective_date);
     free(username);
     return(1);
   }
   free(effective_date);
   free(username);
   sprintf(nametmp, "status_%d", i);
   setkey_int(results, nametmp, 0);
   continue;

sqlerror:
    printk("Error in SUM_Main_Update() \n");
    printk("% .70s \n", sqlca.sqlerrm.sqlerrmc);
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    EXEC SQL ROLLBACK WORK;
    free(effective_date);
    free(username);
    return(1);
 }
   EXEC SQL COMMIT WORK;
   if(errflg) return(2);
   else return(0);
}
