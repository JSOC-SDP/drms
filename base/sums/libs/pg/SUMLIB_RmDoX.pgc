/* SUMLIB_RmDoX.pc
 * Called by sum_rm to find expired dirs and remove them.
 */
#include <SUM.h>
#include <sum_rpc.h>
#include <soi_error.h>
#include <printk.h>

EXEC SQL TYPE uint64_t IS unsigned long long;

int DS_RmDoX(char *name, double bytesdel)
{

EXEC SQL BEGIN DECLARE SECTION;
  char stmt[256];
  VARCHAR l_wd[80];
  VARCHAR l_eff_date[20];
  uint64_t l_sumid;
  uint64_t ds_index;
  int l_archsub;
  double l_bytes;
EXEC SQL END DECLARE SECTION;
  double bytesdeleted, rmbytes;
  int i, j;

  typedef struct palloc_cursor {
    char p_wd[80];
    uint64_t p_sumid;
    double p_bytes;
    char p_effdate[20];
    uint64_t p_ds_index;
    int p_archsub;
  } PALLOC_CURSOR;
  //PALLOC_CURSOR pcursor[1600];
  PALLOC_CURSOR pcursor[60000];

char STMT[] = "SELECT WD, SUMID, BYTES, EFFECTIVE_DATE, DS_INDEX, ARCHIVE_SUBSTATUS FROM SUM_PARTN_ALLOC where STATUS=2 and WD like '%s/%s' order by effective_date limit 60000";

EXEC SQL INCLUDE sqlca;

  printk("DS_RmDoX\n");  
  bytesdeleted = 0.0;
  sprintf(stmt, STMT, name, "%%");
  //printk("!!TEMP: stmt = %s\n", stmt);

  EXEC SQL WHENEVER SQLERROR GOTO sqlerror;
  EXEC SQL PREPARE query FROM :stmt;
  EXEC SQL DECLARE reqcursor CURSOR FOR query;
  EXEC SQL OPEN reqcursor;
  EXEC SQL WHENEVER NOT FOUND GOTO end_fetch; 
	
/* Warn about SUMDC code commented out below */
//printk("WARN: tmp noop of offsite_ack check\n"); /* !!!TEMP */

  for(i=0; ; i++ ){
    EXEC SQL FETCH reqcursor INTO :l_wd, :l_sumid, :l_bytes, :l_eff_date, :ds_index, :l_archsub;
    /* must save results as can't put other sql calls in this loop */
    strcpy(pcursor[i].p_wd, l_wd.arr);
    pcursor[i].p_sumid = l_sumid;
    pcursor[i].p_bytes = l_bytes;
    strcpy(pcursor[i].p_effdate, l_eff_date.arr);
    pcursor[i].p_ds_index = ds_index;
    pcursor[i].p_archsub = l_archsub;
  }

end_fetch:
    EXEC SQL CLOSE reqcursor;
    EXEC SQL WHENEVER NOT FOUND GOTO end_fetch2;

    for(j=0; j < i; j++) {
#ifdef SUMDC
      /* only rm those with Offsite_Ack, and Safe_Tape */

/* !!!TEMP noop out below for testing with DDS */
      ds_index = pcursor[j].p_ds_index;
      EXEC SQL  SELECT DS_INDEX into :ds_index from sum_main
      WHERE DS_INDEX = :ds_index AND
      OFFSITE_ACK = 'Y' AND SAFE_TAPE IS NOT NULL;
/* END of noop */

#endif

      if(DS_RmNowX(pcursor[j].p_wd, pcursor[j].p_sumid, pcursor[j].p_bytes, 
		pcursor[j].p_effdate, 
		pcursor[j].p_ds_index, pcursor[j].p_archsub, &rmbytes)) {
        //EXEC SQL ROLLBACK WORK;
        printk("Error in DS_RmDoX() call to DS_RmNowX() ds_index=%lu\n",
		pcursor[j].p_ds_index);
        //return DS_DATA_QRY;
        continue;
      }
      bytesdeleted += rmbytes;     /* add what we deleted so far */
      if(bytesdeleted >= bytesdel) break; //don't delete any more
end_fetch2:
      continue;
    }
    if(bytesdeleted != 0.0) {
      printk("bytes deleted=%e\n", bytesdeleted);
    }
    EXEC SQL COMMIT;
    return NO_ERROR;
	
sqlerror:
    printk("Error in DS_RmDoX\n");
    printk("% .70s \n", sqlca.sqlerrm.sqlerrmc);
    //EXEC SQL ROLLBACK WORK;
    return DS_DATA_QRY;
}

int DS_RmNowX(char *wd, uint64_t sumid, double bytes, char *effdate,
		uint64_t ds_index, int archsub, double *rmbytes) {
EXEC SQL BEGIN DECLARE SECTION;
  varchar target[80];
  int l_count;
  uint64_t l_ds_index;
  char stmt[16384];
EXEC SQL END DECLARE SECTION;
  FILE *rxfp;
  uint64_t eff_date, today_date;
  char rwd[80], rectxt[128], line[128], seriesname[128];
  char *rootdir, *cptr, *cptr1, *token, *effd;

  EXEC SQL WHENEVER SQLERROR GOTO sqlrmerror;
  EXEC SQL WHENEVER NOT FOUND GOTO sqlrmerror; 

    effd = get_effdate(0);
    today_date = (uint64_t)atol(effd);
    free(effd);
    EXEC SQL SELECT count(*) INTO :l_count from SUM_PARTN_ALLOC
        where DS_INDEX = :l_ds_index and status = 8;
    /* !!!TBD lock the table before determine if it's DARO */
    if(l_count) {
       printk("%s is open DARO\n", wd);
       *rmbytes = 0.0;
       EXEC SQL COMMIT;
       return(0);		/* skip this dir opend for read */
    }
    eff_date = (uint64_t)atol(effdate);

//printk("DS_RmNow() wd=%s eff_date=%lu today_date=%lu\n", wd, eff_date, today_date); //!!!TEMP

    rootdir = strcpy(rwd, wd);
    //contin with del if garbage date > year 30000
    if(eff_date < 3000000000000) { //yyyymmddhhss
      if(eff_date > today_date) {
        *rmbytes = 0.0;
        EXEC SQL COMMIT;
        return(0);
      }
    }
    /* remove del pend entry from sum_partn_alloc tbl */
    if(NC_PaUpdate
        (wd, sumid, bytes,DADP,0,0,0,0,0,0,1))
    {
      printk("Err: NC_PaUpdate(%s,%ld,%e,DADP,0,0,0, ...)to rm from dp list\n", 
		wd,sumid,bytes);
      printk("  ??This is how we got the info in the first place!\n");
    }
    if(!(cptr = strstr(rootdir+1, "/D"))) {
      printk("The wd=%s doesn't have a /.../Dxxx term!\n",rootdir);
      *rmbytes = 0.0;
      EXEC SQL COMMIT;
      return(0);
    }
    if((cptr1 = strstr(cptr+1, "/"))) {
      *cptr1 = (char)NULL;		/* make like /SUM1/D1234 */
    }
    printk("Removing %s\n", wd);
    if(ds_index != 0) {         /* Don't take offline if 0*/
    if(SUM_StatOffline(ds_index)) {
      printk("Err: SUM_StatOffline(%lu, ...)\n", ds_index);
    }
    }
    if(archsub == DAAEDDP || archsub == DADPDELSU) { /* a temporary dataset */
      printk("Removing sum_main for ds_index = %ld\n", ds_index);
      if(DS_SumMainDelete(ds_index)) {
        printk("**Err: DS_SumMainDelete(%ld)\n", ds_index);
      }
    } 
#ifndef SUMDC
    //Note: Records.txt file is not on the datacapture nodes
    if(archsub != DADPDELSU) {
      sprintf(rectxt, "%s/Records.txt", wd);
      if(!(rxfp=fopen(rectxt, "r"))) {
        printk("**Err: DS_RmNowX() can't open %s\n", rectxt);
        //NOTE: get this error for DRMS log directories w/no Records.txt
      }
      else {
        while(fgets(line, 256, rxfp)) {   /* get Records.txt file lines */
          if(!strstr(line, "DELETE_SLOTS_RECORDS")) { //must be 1st line
            break;
          }
          else {		//delete all record #s
            while(fgets(line, 256, rxfp)) {
              if(strstr(line, "series=")) {
                token=(char *)strtok(line, "=\n");
                if(token=(char *)strtok(NULL, "\n")) {
                  strcpy(seriesname, token);
                  sprintf(stmt, "delete from %s where recnum in (", 
					seriesname);
                }
                else {
                  printk("DS_RmNowX() bad Records.txt file\n");
                  fclose(rxfp);
                  goto sqlrmerror;
                }
              }
              else if(strstr(line, "slot")) {
                continue;
              }
              else {		//this is line like: 0       425490
                token=(char *)strtok(line, "\t");
                if(token=(char *)strtok(NULL, "\n")) {
                  sprintf(stmt, "%s%s,", stmt, token);
                }
                else {
                  printk("DS_RmNowX() bad Records.txt wd=%s\n", wd);
                  fclose(rxfp);
                  goto sqlrmerror;
                }
              }
            }
            cptr = rindex(stmt, ',');
            if(cptr) *cptr = '\0';
            sprintf(stmt, "%s);", stmt);
            printk("Records.txt statement is:\n%s\n", stmt);
            sprintf(target.arr,  "%s@%s:%s", DBNAME, SERVER, DRMSPGPORT);
            target.len = strlen(target.arr);
            EXEC SQL WHENEVER SQLERROR GOTO sqljsocerror0; //catch connect err
            //Typically: EXEC SQL CONNECT TO jsoc@hmidb:5432;
            EXEC SQL CONNECT TO :target;
            EXEC SQL WHENEVER SQLERROR GOTO sqljsocerror1;
            EXEC SQL EXECUTE IMMEDIATE :stmt;
            EXEC SQL COMMIT;
            EXEC SQL DISCONNECT;
            EXEC SQL WHENEVER SQLERROR GOTO sqlrmerror;
          }
        }
        fclose(rxfp);
      }
    }
#endif
    if(rmdirs(wd, rootdir)) {
      printk("Cannot rm %s\n", wd);
    }
    *rmbytes = bytes;
    EXEC SQL COMMIT;
    return(0);

sqlrmerror:
    printk("Error in DS_RmNowX\n");
    printk("% .70s \n", sqlca.sqlerrm.sqlerrmc);
    //EXEC SQL ROLLBACK WORK;
    return DS_DATA_QRY;

sqljsocerror0:
    printk("Error in DS_RmNowX() for del from Records.txt\n");
    //printk("Can't connect to jsoc@hmidb:5432\n");
    printk("Can't connect to %s@%s:%s\n", DBNAME, SERVER, DRMSPGPORT);
    printk("% .70s \n", sqlca.sqlerrm.sqlerrmc);
    //Assume error was in the connect so don't disconnect
    //EXEC SQL DISCONNECT;
    //EXEC SQL ROLLBACK WORK;
    fclose(rxfp);
    return DS_DATA_QRY;

sqljsocerror1:
    printk("Error in DS_RmNowX() for del from Records.txt\n");
    //printk("Error was after the connect to jsoc@hmidb:5432\n");
    printk("Error was after the connect to %s@%s:%s\n", DBNAME, SERVER, DRMSPGPORT);
    printk("% .70s \n", sqlca.sqlerrm.sqlerrmc);
    EXEC SQL DISCONNECT;
    //EXEC SQL ROLLBACK WORK;
    fclose(rxfp);
    return DS_DATA_QRY;
}
