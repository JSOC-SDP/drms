/* SUMLIB_PallocRequest.pc
 * Called by SUM_Init to update memory tables with partn alloc info. 
 */
/* !!!!!!!!!!!!!!!!!!NOTE: this is now vestigial in SUMS !!!!!!!!
*/
#include <SUM.h>
#include <sum_rpc.h>
#include <soi_error.h>
#include <printk.h>

int DS_PallocRequest();

int DS_PallocRequest()
{
  EXEC SQL TYPE uint64_t IS unsigned long long;

EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR l_wd[80];
  VARCHAR l_eff_date[20];
  uint64_t l_uid;
  int l_status;
  int group_id;
  int safe_id;
  uint64_t ds_index;
  int l_archsub;
  double l_bytes;
EXEC SQL END DECLARE SECTION;
  char wd[80];
  char eff_date[20];
  char *destptr;

extern PADATA *pahdr_rw;
extern PADATA *pahdr_ro;
extern PADATA *pahdr_dp;
extern PADATA *pahdr_ap;

    printk("DS_PallocRequest \n");  

    EXEC SQL WHENEVER SQLERROR GOTO sqlerror;

    EXEC SQL DECLARE palloc CURSOR FOR
	SELECT WD, SUMID, STATUS, BYTES, EFFECTIVE_DATE, ARCHIVE_SUBSTATUS, 
	GROUP_ID, SAFE_ID, DS_INDEX FROM SUM_PARTN_ALLOC;

	EXEC SQL OPEN palloc;

    EXEC SQL WHENEVER NOT FOUND GOTO end_fetch; 
	
	for( ; ; ){
		EXEC SQL FETCH palloc INTO :l_wd, :l_uid, :l_status, :l_bytes, :l_eff_date, :l_archsub, :group_id, :safe_id, :ds_index;

		destptr = strcpy(wd, l_wd.arr);
		strcpy(eff_date, l_eff_date.arr);
		/* setting up memory tables here */
		switch(l_status) {    /* add the entry to the proper list */
	    case DARW:
		  setpadata(&pahdr_rw, wd, l_uid, l_bytes, l_status, l_archsub, eff_date, group_id, safe_id, ds_index);
		  break;
	    case DADP:
		  setpadata(&pahdr_dp, wd, l_uid, l_bytes, l_status, l_archsub, eff_date, group_id, safe_id, ds_index);
		  break;
	    case DAAP:
		  setpadata(&pahdr_ap, wd, l_uid, l_bytes, l_status, l_archsub, eff_date, group_id, safe_id, ds_index);
                  break;
	    case DASAP:
		  setpadata(&pahdr_ap, wd, l_uid, l_bytes, l_status, l_archsub, eff_date, group_id, safe_id, ds_index);
		  break;
	    case DARO:
		  setpadata(&pahdr_ro, wd, l_uid, l_bytes, l_status, l_archsub, eff_date, group_id, safe_id, ds_index);
		  break;
	    case DAPERM:
		  break;
	    default:
		 printk("Unknown status in sum_partn_alloc database\n");
                 EXEC SQL ROLLBACK WORK;
		 return DS_DATA_QRY;
		 break;
		 }
    }

end_fetch:
	EXEC SQL CLOSE palloc;
    EXEC SQL COMMIT WORK;
    return NO_ERROR;
	
sqlerror:
    printk("Error in DS_PallocRequest\n");
    printk("% .70s \n", sqlca.sqlerrm.sqlerrmc);
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    EXEC SQL ROLLBACK WORK;
    return DS_DATA_QRY;
}
