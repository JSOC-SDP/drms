/* SUMLIB_InfoGet.pgc
*/
/* This returns info from the sum_main table for the given sunum 
 * (i.e. ds_index). Returns non-0 on error.
 */
#include <SUM.h>
#include <sum_rpc.h>
#include <printk.h>

int SUMLIB_InfoGet(uint64_t sunum , KEY **results);

int SUMLIB_InfoGet(uint64_t sunum , KEY **result)
{
  EXEC SQL TYPE uint64_t IS unsigned long long;

EXEC SQL BEGIN DECLARE SECTION;
    VARCHAR online_loc[80];
    VARCHAR online_status[5];
    VARCHAR archive_status[5];
    VARCHAR offsite_ack[5];
    VARCHAR history_comment[80];
    VARCHAR owning_series[80];
    int storage_group;
    double bytes;
    VARCHAR creat_date[32];
    VARCHAR username[10];
    VARCHAR arch_tape[20];
    int arch_tape_fn;
    VARCHAR arch_tape_date[32];
    VARCHAR safe_tape[20];
    int safe_tape_fn;
    VARCHAR safe_tape_date[32];
    uint64_t ds_index;
    int pa_status, pa_substatus;
    VARCHAR effective_date[20];
EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR GOTO sqlerror;
    EXEC SQL WHENEVER NOT FOUND GOTO sqlerror; 

   ds_index = sunum;
 
 EXEC SQL SELECT online_loc, online_status, archive_status, offsite_ack,
 history_comment, owning_series, storage_group, bytes, creat_date, username,
 coalesce(arch_tape,'N/A'), coalesce(arch_tape_fn,0), 
 coalesce(arch_tape_date,'1958-01-01 00:00:00'),
 coalesce(safe_tape,'N/A'), coalesce(safe_tape_fn,0), 
 coalesce(safe_tape_date,'1958-01-01 00:00:00')
 INTO :online_loc, :online_status, :archive_status, :offsite_ack,
 :history_comment, :owning_series, :storage_group, :bytes, :creat_date,
 :username, :arch_tape, :arch_tape_fn, :arch_tape_date, :safe_tape,
 :safe_tape_fn, :safe_tape_date
 FROM SUM_MAIN WHERE DS_INDEX = :ds_index;

    setkey_str(result, "online_loc", online_loc.arr);
    setkey_str(result, "online_status", online_status.arr);
    setkey_str(result, "archive_status", archive_status.arr);
    setkey_str(result, "offsite_ack", offsite_ack.arr);
    setkey_str(result, "history_comment", history_comment.arr);
    setkey_str(result, "owning_series", owning_series.arr);
    setkey_int(result, "storage_group", storage_group);
    setkey_double(result, "bytes", bytes);
    setkey_str(result, "creat_date", creat_date.arr);
    setkey_str(result, "username", username.arr);
    setkey_str(result, "arch_tape", arch_tape.arr);
    setkey_int(result, "arch_tape_fn", arch_tape_fn);
    setkey_str(result, "arch_tape_date", arch_tape_date.arr);
    setkey_str(result, "safe_tape", safe_tape.arr);
    setkey_int(result, "safe_tape_fn", safe_tape_fn);
    setkey_str(result, "safe_tape_date", safe_tape_date.arr);
    setkey_uint64(result, "SUNUM", ds_index);

  //now get values in sum_partn_alloc
    EXEC SQL WHENEVER NOT FOUND GOTO noerror; 
 EXEC SQL SELECT status, archive_substatus, effective_date
 INTO :pa_status, :pa_substatus, :effective_date
 FROM SUM_PARTN_ALLOC WHERE DS_INDEX = :ds_index and STATUS != 8;
    setkey_int(result, "pa_status", pa_status);
    setkey_int(result, "pa_substatus", pa_substatus);
    setkey_str(result, "effective_date", effective_date.arr);
    return(0);

noerror:
    setkey_int(result, "pa_status", -1);
    setkey_int(result, "pa_substatus", -1);
    setkey_str(result, "effective_date", "N/A");
    return(0);

sqlerror:
	printk("Error in SUMLIB_InfoGet\n"); 
	printk("% .70s \n", sqlca.sqlerrm.sqlerrmc); 
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    EXEC SQL ROLLBACK WORK;
    return(1);
}
