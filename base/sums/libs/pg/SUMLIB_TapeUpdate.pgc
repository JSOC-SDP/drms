/* SUMLIB_TapeUpdate.pgc
*/
/* This is to update the sum_tape table with avail_blocks, 
 * next_write_file_number and last_write for the given tape barcode id. 
 * Updated later to pass in the next file# on the tape.
 * Returns 0 on failure, else the current file number (that was just written).
 * NOTE: file numbers are initialized to 1 in the sum_tape db table.
 * Also function to get the next file number to be written to the given tape.
 * NOTE: for the datacapture system the tellblock is always 0 and the 
 * avail_blocks is update from the totalbytes just written.
 */
#include <SUM.h>
#include <tape.h>
#include <sum_rpc.h>
#include <printk.h>

int SUMLIB_TapeUpdate(char *tapeid, int tapenxtfn,  uint64_t tellblock, double totalbytes);
int SUMLIB_TapeFilenumber(char *tapeid);

int SUMLIB_TapeUpdate(char *tapeid, int tapenxtfn, uint64_t tellblock, double totalbytes)
{
  EXEC SQL TYPE myuint64_t IS unsigned long long int;

EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR l_date[32];
  VARCHAR l_tapeid[20];
  myuint64_t  l_availblocks;
  int  l_nxtwrtfn;
  int  l_closed;
EXEC SQL END DECLARE SECTION;
  int filen, numblocks;

    sprintf(l_tapeid.arr, "%s", tapeid);
    l_tapeid.len = strlen(l_tapeid.arr);

    EXEC SQL WHENEVER SQLERROR GOTO sqlerror;

    EXEC SQL WHENEVER NOT FOUND GOTO sqlerror; 

   sprintf(l_date.arr, "%s", get_datetime());
   l_date.len = strlen(l_date.arr);

   EXEC SQL SELECT nxtwrtfn, avail_blocks INTO :l_nxtwrtfn, :l_availblocks 
	        FROM SUM_TAPE WHERE TAPEID = :l_tapeid;

   filen = tapenxtfn - 1;
   //l_nxtwrtfn++;	/* inc to next file # */
   l_nxtwrtfn = tapenxtfn;    //next file# on tape

    if(tellblock == 0) {	/* get availblocks from totalbytes */
      numblocks = (int)(totalbytes/512.0);
      if(numblocks >= l_availblocks) l_availblocks = 0;
      else l_availblocks = l_availblocks - numblocks;
    }
    else {
      if(tellblock >= MAX_AVAIL_BLOCKS) {
        l_availblocks = 0;
      }
      else {
        l_availblocks = MAX_AVAIL_BLOCKS - tellblock; /* blocks left on tape */
      }
    }

	EXEC SQL UPDATE SUM_TAPE
		SET AVAIL_BLOCKS = :l_availblocks,
		NXTWRTFN = :l_nxtwrtfn,
		LAST_WRITE = :l_date
		WHERE TAPEID = :l_tapeid;
        EXEC SQL COMMIT WORK;

    //close tape if no more space or file number reached 1200 (this is a 
    //temporary fix to the problem of a tape not unlocking 12/17/2010
    //if((l_availblocks < TAR_FILE_SZ_BLKS) || (filen >= 1200)) {  
    if((l_availblocks < TAR_FILE_SZ_BLKS)) {  
      //if(filen >= 1200) printk("File number %d >= 1200\n", filen);
      if(SUMLIB_TapeClose(tapeid)) {
        printk("Error in SUMLIB_TapeUpdate\n");
        return(0);
      }
//Now ret a neg filen for both systems 12/15/2010
//#ifdef SUMDC
      /* return neg filen to indicate that tape was closed */
      filen = -filen;
//#endif
    }
    return(filen);

sqlerror:
	printk("Error in SUMLIB_TapeUpdate\n"); 
	printk("% .70s \n", sqlca.sqlerrm.sqlerrmc); 
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    EXEC SQL ROLLBACK WORK;
    return 0;
}


/* Get the next file number to write to the given tapeid from the sum_tape
 * table. Return 0 on error.
*/
int SUMLIB_TapeFilenumber(char *tapeid)
{

EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR l_tapeid[20];
  int  l_nxtwrtfn;
EXEC SQL END DECLARE SECTION;
  int filen;

    sprintf(l_tapeid.arr, "%s", tapeid);
    l_tapeid.len = strlen(l_tapeid.arr);

    EXEC SQL WHENEVER SQLERROR GOTO sqlerror;
    EXEC SQL WHENEVER NOT FOUND GOTO sqlerror; 

   EXEC SQL SELECT nxtwrtfn INTO :l_nxtwrtfn FROM SUM_TAPE 
	        WHERE TAPEID = :l_tapeid;

   filen = l_nxtwrtfn;	/* this is the next file# to write to this tape */
   EXEC SQL COMMIT WORK;
   return(filen);

sqlerror:
	printk("Error in SUMLIB_TapeFilenumber(%s)\n", tapeid); 
	printk("% .70s \n", sqlca.sqlerrm.sqlerrmc); 
    EXEC SQL ROLLBACK WORK;
    return 0;
}
