/* SUMLIB_Ds_Ix_File.pgc
 * Takes a 0 terminated array of ds_index values (all the SU that are 
 * in the same file on the same tape) and determines which
 * ones are offline.
 * If none are offline, returns 0. Else returns 1 with the filedsixoff[]
 * array containing the offline ds_index values with 0 termination.
 * Return -1 on error.
 * NOTE: add 10Sep2008 Set dsmdiflg arg if Owning_Series is ds_mdi.*
 * NOTE: add 02Oct2008 Set dsmdiflg arg if Owning_Series is hmi_ground.lev0
*/

#include <SUM.h>
#include <sum_rpc.h>
#include <soi_error.h>
#include <printk.h>
#include <string.h>

int SUMLIB_Ds_Ix_File(uint64_t filedsix[], uint64_t filedsixoff[], int *dsmdiflg);
int SUMLIB_Ds_Ix_Find(char *tapeid, int filenum, uint64_t filedsix[],
			double filebytes[]);

int SUMLIB_Ds_Ix_File(uint64_t filedsix[],  uint64_t filedsixoff[], int *dsmdiflg)
{
  EXEC SQL TYPE uint64_t IS unsigned long long;

EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR online_status[5];
  VARCHAR own_series[80];
  uint64_t ds_index;
EXEC SQL END DECLARE SECTION;
   int i, j, offline;

    EXEC SQL WHENEVER NOT FOUND GOTO sqlerror; 
    EXEC SQL WHENEVER SQLERROR GOTO sqlerror;

    offline = 0;
    *dsmdiflg = 0;
    for(i=0, j=0; ; i++ ) {
      ds_index = filedsix[i];
      if(!ds_index) break;
      /*printk("SUMLIB_Ds_Ix_File ds_index = %lu\n", ds_index); */
      EXEC SQL SELECT ONLINE_STATUS, OWNING_SERIES
	INTO  :online_status, :own_series
	FROM SUM_MAIN 
	WHERE DS_INDEX = :ds_index;

      if(!strcmp(own_series.arr, "hmi_ground.lev0")) { 
        *dsmdiflg = 1;
      }
      else {
        if(strstr(own_series.arr, "ds_mdi.")) { *dsmdiflg = 1; }
      }
 
      if(strcmp(online_status.arr, "N")==0) {
        offline = 1;
	/*printk("SUMLIB_Ds_Ix_File offline ds_index = %lu\n", ds_index); */
        filedsixoff[j++] = ds_index;
      }
    }
    filedsixoff[j] = 0;
    	EXEC SQL COMMIT WORK;
    if(!offline) return(0);
    return(1);
sqlerror:
         printk("Error in SUMLIB_Ds_Ix_File for ds_index=%lu\n", ds_index);
         printk("% .70s \n", sqlca.sqlerrm.sqlerrmc);
    	 EXEC SQL COMMIT WORK;
         return(-1);
}

/* Find all the ds_index values that are in sum_main for the given tapeid
 * and file number. Return the values in the given array. Also returns
 * a bytes array.
*/
int SUMLIB_Ds_Ix_Find(char *tapeid, int filenum, uint64_t filedsix[], 
			double filebytes[])
{
  EXEC SQL TYPE uint64_t IS unsigned long long;

EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR l_tapeid[20];
  uint64_t ds_index;
  double l_bytes;
  int l_filenum;
EXEC SQL END DECLARE SECTION;
   int i;

    EXEC SQL WHENEVER SQLERROR GOTO sqlerror;

    sprintf(l_tapeid.arr, "%s", tapeid);
    l_tapeid.len = strlen(l_tapeid.arr);
    l_filenum = filenum;

        EXEC SQL DECLARE pfind CURSOR FOR
        SELECT DS_INDEX, BYTES 
        FROM SUM_MAIN
        WHERE ARCH_TAPE = :l_tapeid AND ARCH_TAPE_FN = :l_filenum; 

        EXEC SQL OPEN pfind;
    EXEC SQL WHENEVER NOT FOUND GOTO end_fetch;

    for(i=0 ; ; i++) {
      EXEC SQL FETCH pfind INTO :ds_index, :l_bytes;
      filedsix[i] = ds_index;
      filebytes[i] = l_bytes;
    }
end_fetch:
    EXEC SQL CLOSE pfind;
    filedsix[i] = 0;
    filebytes[i] = 0;
    EXEC SQL COMMIT;
    return(0);

sqlerror:
         printk("Error in SUMLIB_Ds_Ix_Find\n");
         printk("% .70s \n", sqlca.sqlerrm.sqlerrmc);
         EXEC SQL ROLLBACK WORK;
         return(1);
}
