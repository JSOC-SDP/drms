/* SUMLIB_StatOnline.pgc
 * This is a function to update the sum_main table
 * with the online status information as "Y" and new wd given the ds_index
 */
#include <SUM.h>
#include <sum_rpc.h>
#include <soi_error.h>
#include <printk.h>

EXEC SQL INCLUDE sqlca;

int SUM_StatOnline(uint64_t ds_index, char *newwd);

int SUM_StatOnline(uint64_t ds_index, char *newwd)
{
EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR l_newwd[80];
  VARCHAR l_status[5];
  VARCHAR l_date[32];
  long long int l_ds_index;
EXEC SQL END DECLARE SECTION;
  
    l_ds_index = (long long)ds_index;

    sprintf(l_newwd.arr,"%s", newwd);
    l_newwd.len = strlen(l_newwd.arr);
    sprintf(l_status.arr,"%s", "Y");
    l_status.len = strlen(l_status.arr);
    sprintf(l_date.arr, "%s", get_datetime());
    l_date.len = strlen(l_date.arr);

	EXEC SQL WHENEVER SQLERROR GOTO sqlerror;

    EXEC SQL WHENEVER NOT FOUND GOTO sqlerror; 

	EXEC SQL UPDATE SUM_MAIN 
		SET  ONLINE_STATUS = :l_status, 
		ONLINE_LOC =:l_newwd,
		ACCESS_DATE = :l_date
                 WHERE DS_INDEX = :l_ds_index;
	EXEC SQL COMMIT WORK;
    return NO_ERROR;
	
sqlerror:
	printk("Error in SUM_StatOnline\n"); 
	printk("% .70s \n", sqlca.sqlerrm.sqlerrmc); 
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    EXEC SQL ROLLBACK WORK;
    return DS_DATA_UPD;
}


/* This is a function to update the sum_main table
 * with the online status information as "N" given the ds_index
*/
int SUM_StatOffline(uint64_t ds_index);

int SUM_StatOffline(uint64_t ds_index)
{
EXEC SQL BEGIN DECLARE SECTION;
  long long int l_ds_index;
  VARCHAR l_status[5];
EXEC SQL END DECLARE SECTION;
  
    l_ds_index = (long long)ds_index;
    sprintf(l_status.arr,"%s", "N");
    l_status.len = strlen(l_status.arr);

    EXEC SQL WHENEVER SQLERROR GOTO sqlerror;
    EXEC SQL WHENEVER NOT FOUND GOTO sqlerror; 

	EXEC SQL UPDATE SUM_MAIN 
		SET  ONLINE_STATUS = :l_status
                WHERE DS_INDEX = :l_ds_index;
	EXEC SQL COMMIT WORK;
    return NO_ERROR;
	
sqlerror:
	printk("Error in SUM_StatOffline\n"); 
	printk("% .70s \n", sqlca.sqlerrm.sqlerrmc); 
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    EXEC SQL ROLLBACK WORK;
    return DS_DATA_UPD;
}

/* Return the effective_date in the sum_partn_alloc table.
*/
int SUM_GetEffDate(uint64_t ds_index, char *effarray);

int SUM_GetEffDate(uint64_t ds_index, char *effarray)
{
EXEC SQL BEGIN DECLARE SECTION;
  long long int l_ds_index;
  VARCHAR eff_date_str[20];
  int  daro = DARO;
EXEC SQL END DECLARE SECTION;

    l_ds_index = (long long)ds_index;
    EXEC SQL WHENEVER SQLERROR GOTO sqlerror;
    EXEC SQL WHENEVER NOT FOUND GOTO sqlerror; 

    EXEC SQL SELECT DISTINCT EFFECTIVE_DATE INTO :eff_date_str
        FROM SUM_PARTN_ALLOC where DS_INDEX = :l_ds_index
        and STATUS != :daro;
    sprintf(effarray, eff_date_str.arr);
    return(0);

sqlerror:
	printk("Error in SUM_IncEffDate\n"); 
	printk("% .70s \n", sqlca.sqlerrm.sqlerrmc); 
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    EXEC SQL ROLLBACK WORK;
    return(1);
}
