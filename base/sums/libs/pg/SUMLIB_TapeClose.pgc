/* SUMLIB_TapeClose.pgc
 */
#include <SUM.h>
#include <tape.h>
#include <sum_rpc.h>
#include <printk.h>

int SUMLIB_TapeClose(char *tapeid);

int SUMLIB_TapeActive(char *tapeid);

int SUMLIB_TapeState(char *tapeid);

int SUMLIB_TapeCatalog(char *tapeid);

/* Return the tape state in the sum_tape table.
 * Return 0 on error.
*/
int SUMLIB_TapeState(char *tapeid)
{
EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR l_tapeid[20];
  int  l_closed;
EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER NOT FOUND GOTO sqlerror; 
    EXEC SQL WHENEVER SQLERROR GOTO sqlerror;
    sprintf(l_tapeid.arr, "%s", tapeid);
    l_tapeid.len = strlen(l_tapeid.arr);
    EXEC SQL SELECT CLOSED INTO :l_closed FROM SUM_TAPE 
		WHERE TAPEID = :l_tapeid;

    EXEC SQL COMMIT WORK;
    /*printk("Closed status for tapeid %s is %d\n", tapeid, l_closed);*/
    return(l_closed);

sqlerror:
	printk("Error in SUMLIB_TapeState.\n"); 
	printk("% .70s \n", sqlca.sqlerrm.sqlerrmc); 
    EXEC SQL ROLLBACK WORK;
    return(0);
}

/* Called by taperespwritedo_1() in tape_svc  when an error occured on 
 * a write tape operation. The tape is closed and no longer available for
 * writting and the attempted write is a noop. Return 0 on success.
*/
int SUMLIB_TapeClose(char *tapeid)
{
EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR l_tapeid[20];
  int  l_closed;
EXEC SQL END DECLARE SECTION;


    EXEC SQL WHENEVER NOT FOUND GOTO sqlerror; 
    EXEC SQL WHENEVER SQLERROR GOTO sqlerror;
    sprintf(l_tapeid.arr, "%s", tapeid);
    l_tapeid.len = strlen(l_tapeid.arr);
    l_closed = TAPECLOSED;
    EXEC SQL UPDATE SUM_TAPE
		SET CLOSED = :l_closed
		WHERE TAPEID = :l_tapeid;

    EXEC SQL COMMIT WORK;
    printk("*Tp:Close: tapeid=%s\n", tapeid);
    return(0);

sqlerror:
	printk("Error in SUMLIB_TapeClose.\n"); 
	printk("% .70s \n", sqlca.sqlerrm.sqlerrmc); 
    EXEC SQL ROLLBACK WORK;
    return(1);
}


/* Called by taperespwritedo_1() in tape_svc  when an uninitialized tape
 * has been made active by writting its label and 1st data file.
 * Return 0 on success.
*/
int SUMLIB_TapeActive(char *tapeid)
{
EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR l_tapeid[20];
  int  l_closed;
EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER NOT FOUND GOTO sqlerror; 
    EXEC SQL WHENEVER SQLERROR GOTO sqlerror;
    sprintf(l_tapeid.arr, "%s", tapeid);
    l_tapeid.len = strlen(l_tapeid.arr);
    l_closed = TAPEACTIVE;
    EXEC SQL UPDATE SUM_TAPE
		SET CLOSED = :l_closed
		WHERE TAPEID = :l_tapeid;

    EXEC SQL COMMIT WORK;
    printk("Closed status for tapeid %s set to %d\n", tapeid, l_closed);
    return(0);

sqlerror:
	printk("Error in SUMLIB_TapeActive.\n"); 
	printk("% .70s \n", sqlca.sqlerrm.sqlerrmc); 
    EXEC SQL ROLLBACK WORK;
    return(1);
}

/* See if the tapeid is already in the sum_tape table. If it is and it
 * is closed, the caller should output the "*Tp:ReClose:" msg for tui.
 * If it is not closed, then do nothing.
 * If it is not in sum_tape then make a new entry for it.
 * Returns the tape state, or 0 on error (there is no state 0).
*/
int SUMLIB_TapeCatalog(char *tapeid)
{
EXEC SQL BEGIN DECLARE SECTION;
  VARCHAR l_tapeid[20];
  int  l_closed;
  unsigned int ablocks;
EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER NOT FOUND GOTO tapenotfound; 
    EXEC SQL WHENEVER SQLERROR GOTO sqlerror;
    sprintf(l_tapeid.arr, "%s", tapeid);
    l_tapeid.len = strlen(l_tapeid.arr);
    EXEC SQL SELECT CLOSED INTO :l_closed FROM SUM_TAPE 
		WHERE TAPEID = :l_tapeid;

    EXEC SQL COMMIT WORK;
    return(l_closed);

tapenotfound:
    ablocks = MAX_AVAIL_BLOCKS;
    EXEC SQL INSERT INTO SUM_TAPE (tapeid, nxtwrtfn, spare, group_id, avail_blocks, closed, last_write) VALUES (:l_tapeid, 1, -1, -1, :ablocks, -1, NULL);
    EXEC SQL COMMIT WORK;
    printk("*Cataloged new tape %s\n", tapeid);
    return(-1);

sqlerror:
     EXEC SQL ROLLBACK WORK;
     printk("Error in SUMLIB_TapeCatalog.\n"); 
     printk("% .70s \n", sqlca.sqlerrm.sqlerrmc); 
    return(0);
}
