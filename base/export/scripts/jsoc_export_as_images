#!/bin/csh -f
#  set echo
setenv RGBDEF /home/jsoc/cvs/Development/JSOC/proj/workflow/scripts/rgb.txt
setenv JSOC_DBHOST hmidb

set noglob

# Make images and movies from RecordSet spec.
# Intended use is in script to support exportdata.html
# script now assumes the color table, min,max, scaling, etc., are all on the command line.
# only in and outpath are required.

# set defaults
# required params
set in = "NOT_SPECIFIED"
set limit = 0
set reqid = "NA"
set outpath = "NOT_SPECIFIED"
# image params
set imtype = jpg
set mvtype = none
set scaling = "scaling=MINMAX"
set size = "size=1"
set min = ""
set max = ""
set CT = "palette=/home/jsoc/Color_Tables/grey.sao"
# other params needed for index.txt
set method = ""
set expversion = "expversion=1"
set protocol = "jpeg"
set process = ""

# loop through command line to extract image making params
while ($#)
  set parm = ` echo "$1" | sed -e 's/ //g' -e 's/=/\t/'`
  set pname = $parm[1]
  if ($#parm < 2) then
    echo $parm has no value part, param as given is $1
    shift
    continue
  endif
  set pval = "$parm[2]"
  # required
  if ($pname == in) then
    set in = "$pval"
    set seriesname = `echo "$in" | sed -e 's/\[/\t/'`
    if ($#seriesname > 1) set seriesname = $seriesname[1]
  else if ($pname == n) then
     set limit = $pval
  else if ($pname == reqid) then
     set reqid = $pval
  else if ($pname == outpath) then
     set outpath = $pval
  # image
  else if ($pname == scaling) then
      set scaling = "scaling=$pval"
  else if ($pname == size) then
    set size = $pval
    set scale = "scale="$size
  else if ($pname == min) then
    set min = "min=$pval"
  else if ($pname == max) then
      set max = "max=$pval"
  else if ($pname == CT) then
    set CT = $pval
    set CTinfo = `show_info jsoc.Color_Tables'[? CT_name="'$CT'" ?]' n=1 -qPA`
    if ("$CTinfo" == "/") set CTinfo = "NA"
  # index.txt
  else if ($pname == method) then
    set method = "$pval"
  else if ($pname == ffmt) then
    set ffmt = "$pval"
  else if ($pname == cparms) then
    set cparms = "$pval"
  else if ($pname == protocol) then
    set protocol = $pval:al
    if ($protocol == jpg) then
      set imtype = jpg
    else if ($protocol == mpg) then
      set imtype = jpg
      set mvtype = mpg
    else if ($protocol == mp4) then
      set imtype = jpg
      set mvtype = mp4
    else
      echo Illegal protocol $protocol
      exit 1
    endif
  else if ($pname == expversion) then
    set expversion = $pval 
  endif
  shift
end

#make sure all arguments are there
if ("$in" == "NOT_SPECIFIED" || $outpath == "NOT_SPECIFIED") then
  echo Both '"in"' and '"outpath"' must be specified on command line
  exit 1
endif

set nRec = `show_info -cq ds="$in" n=$limit`
if ( $nRec < 1 ) then 
     echo "No records exist"
     exit 2
endif

cd $outpath

# cleanup prior export temps in case outpath is user location vs a new SU
set echo
unset noglob

rm -f images
rm -f rslist 
rm -f *.$imtype
rm -f $seriesname.mp4 $seriesname.mpg
rm -f index.txt 
set noglob
unset echo
 
# Write into the new index.txt

echo "# JSOC " > index.txt
echo "reqid=$reqid" >>index.txt
echo "expversion=$expversion" >>index.txt  
echo "method=$method" >>index.txt  
echo "recordset=$in" >>index.txt
echo "protocol=$protocol" >>index.txt  
echo "dir=$outpath" >>index.txt  
echo "filefmt=$ffmt" >>index.txt  
echo cparms="$cparms" >>index.txt  
# echo "# DATA ">>index.txt

# check to see if its an AIA or HMI data set.
# If so, build nice name for image

# Collect some keyword values from first record.

show_info ds="$in" n=1 -qk key=WAVELNTH,CROTA2 >data.sample

set flags = ""
set crotkey = `grep CROTA2 data.sample`
if ($#crotkey < 1) then
  set flags = ($flags -u)
else
  set $crotkey
  if ($CROTA2:r > -2 && $CROTA2:r < 2) set flags = ($flags -u)
endif

set fontcolor = "white"
set project = $seriesname:r
set project = $project:al
set series = $seriesname:e
if ($project == hmi) then
  set DataName = "SDO/HMI "$series
  set ser = $series:al
  if ($ser =~ 'm_*' || $ser =~ 'v_*' || $ser =~ 'ld_*' || $ser =~ 'lw_*') set flags = ($flags -c)
else if ($project == mdi) then
  set DataName = "SOHO/MDI "$series
else if ($project == aia) then
  set wavekey = `grep WAVELNTH data.sample`
  set $wavekey
  set WaveLength = $WAVELNTH
  set DataName = "SDO/AIA "$WaveLength
else
  set DataName = $seriesname
endif
  
# Get time key
set tkey = none
set primes = (`show_info -j $seriesname | grep PrimeKeys`)
set nprimes = $#primes
set iprime=2
while ($iprime <= $nprimes)
  set prime = $primes[$iprime]:s/,//
  if ($prime == T_REC) then
    set tkey = T_REC
    break
  else if ($prime == T_OBS) then
    set tkey = T_OBS
    break
  endif
  @ iprime = $iprime + 1
end
if ($tkey == none) set tkey = $primes[2]:s/,//

if ($CTinfo != NA) then
set echo
  render_image -v in="$in" n=$limit  $min $max palette=$CTinfo \
   $scaling  outname=$seriesname  outid=time $scale type=$imtype  tkey=$tkey $flags \
   out='| ppmlabel -color '$fontcolor' -size {%0.75:8} -x 15 -y {%98} -text \"'"$DataName"':{ID}\" | pnmtojpeg -quality=95' 
  set render_status = $?
unset echo
else # cases with no color table file, for now these will be AIA with mixed wavelengths
  if ($CT == aia_mixed) then
    set is_mod = 0
    if ($series =~ '*_mod') set is_mod = 1
    set min=100
    set wvl_arr=( 94  131  171   193   211   304  335 1600 1700  4500)
    set min_val=( 10  100  100   100   100   100  100  100  100   100)
    set max_val=(100 2000 2000 10000 10000 10000 1000 1000 2500 10000)
    foreach i (0 1 2 3 4 5 6 7 8 9)
       set wvl = $wvl_arr[$i]
       set max = $max_val[$i]
       set min = $min_val[$i]
       if ($is_mod) then
         in_new = "$seriesname[RequestID=$reqid][ ?WAVELNTH=$wvl ?]"
       else
         in_new = "${in}[? WAVELNTH=$wvl ?]"
       endif
       if ( $wvl == 171 ) then 
         set scaling = "scaling=SQRT"
       else 
         set scaling = "scaling=LOG"
       endif

       render_image in="$in_new" n=$limit min=$min max=$max palette=/home/jsoc/ColorTables/AIA/aia_$wavl.lut  \
         $scaling  outname=$seriesname  outid=time $scale type=$imtype  tkey=$tkey  $flags \
         out='| ppmlabel -color black -size {%0.75:5} -x 15 -y {%98} -text \"'"$DataName"':{ID}\" | pnmtojpeg -quality=95' 
       set render_status = $?
       if ($render_status) break
    end
    }
  else
    echo Do not know how to proceed
    exit 2
  endif
endif

if ($render_status) then
  echo render_image failed.  Parameters were:
  echo "  " in="$in_new"
  echo "  " n=$limit
  echo "  " min=$min
  echo "  " max=$max
  echo "  " palette=$CTinfo OR palette=/home/jsoc/ColorTables/AIA/aia_$wavl.lut
  echo "  " $scaling
  echo "  " outname=$seriesname
  echo "  "  outid=time
  echo "  " $scale
  echo "  " type=$imtype
  echo "  " tkey=$tkey
  echo "  " $flags
  echo "  " out='| ppmlabel -color black -size {%0.75:5} -x 15 -y {%98} -text \"'"$DataName"':{ID}\" | pnmtojpeg -quality=95'
  echo "  " and status=$render_status
  echo " "
  exit 2
endif

unset noglob

#write into index.txt
 
show_info -iq ds="$in" n=$limit > rslist
/bin/ls *.$imtype > images 

echo "keywords= $protocol files">>index.txt 

# set min_fl_sz=10000      #min file size

set total=0
set Nimages = `wc -l <images`
set i=1
while ( $i <= $Nimages )
    set img = `head --lines $i <images | tail -1`
    set Sz = `stat -c "%s" "$img"`
    @ total = $total + $Sz
    @ i = $i + 1
end


# End of image making, proceed to movie making if requested.

if ($mvtype != none) then
  rm -rf tmpImages
  mkdir tmpImages
  set i=1
  while ( $i <= $Nimages )
    set img = `head --lines $i <images | tail -1`
    set I = `printf "%04d" $i`
    if ( -e $img ) then
        ln  $img  tmpImages/$I.$imtype
    else
        echo "no frame for $img" 
    endif
    @ i = $i + 1
  end

  #make movie
  cd tmpImages
  ffmpeg -i %04d.$imtype -qscale 5 -r 20 -b 9600 ../$seriesname.$mvtype
  set ffmpeg_status = $?
  cd ..
  rm -rf tmpImages

  if ($ffmpeg_status) then
    echo ffmpeg failed, args were:  -qscale 5 -r 20 -b 9600 -i %04d.$imtype ../$seriesname.$mvtype
    echo status was $ffmpeg_status
    exit 2
  endif
  set Sz = `stat -c "%s" "$seriesname.$mvtype"`
  @ total = $total + $Sz
endif

# End of movie making

set totK = `echo "scale=3; $total / 1024 " | bc -l`
set totM = `echo "scale=3; $totK / 1024" | bc -l`
if ($totM =~ '.*') set totM = "0"$totM

echo "Size = $totM">>index.txt
# echo "Size = 1">>index.txt
echo "Status = 0 ">>index.txt

if ($mvtype != none) then
  echo "Movie name=$seriesname.$mvtype " >> index.txt
  echo "# DATA ">>index.txt
  printf "movie of the following data\t$seriesname.$mvtype\n" >> index.txt
else
  echo "# DATA ">>index.txt
endif

paste  rslist  images >> index.txt

rm -f rslist images data.sample

