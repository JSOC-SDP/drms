#!/usr/bin/env python

from __future__ import print_function
import sys
import os
import fileinput
import re
import smtplib
from datetime import datetime, timedelta
import psycopg2
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), '../../../include'))
from drmsparams import DRMSParams

# Return values
RV_ERROR_NONE = 0
RV_ERROR = -1
RV_ERROR_PARAMS = -2
RV_ERROR_DBCMD = -3
RV_ERROR_DBCONNECT = -4
RV_ERROR_TIMEOUT = -5
RV_ERROR_CONFIRMATION = -6
RV_ERROR_NOADDRESS = -7
RV_ERROR_MAIL = -8

# Print stdin
# import fileinput
# fobj = open('/home/jsoc/thefile2.txt', 'a')
# for line in fileinput.input():
#    print(line, file=fobj)

def SendMailSuccess(localName, domainName, confirmation):
    subject = 'EXPORT ADDRESS REGISTERED [' + str(confirmation) + ']'
    fromAddr = 'jsoc@solarpost.stanford.edu'
    toAddrs = [ localName + '@' + domainName ]
    msg = 'From: jsoc@solarpost.stanford.edu\nTo: ' + ','.join(toAddrs) + '\nSubject: ' + subject + '\nThis message was automatically generated by the JSOC export system at Stanford.\n\nYour email address has been successfully registered.'

    try:
        server = smtplib.SMTP('solarpost.stanford.edu')
        server.sendmail(fromAddr, toAddrs, msg)
        server.quit()
    except Exception as exc:
        # If any exception happened, then the email message was not received.
        raise Exception('emailBadrecipient', 'Unable to send email message to address to confirm address.', RV_ERROR_MAIL)

def SendMailFailure(localName, domainName, confirmation, msg):
    subject = 'FAILURE REGISTERING EXPORT ADDRESS [' + str(confirmation) + ']'
    fromAddr = 'jsoc@solarpost.stanford.edu'
    toAddrs = [ localName + '@' + domainName ]
    msg = 'From: jsoc@solarpost.stanford.edu\nTo: ' + ','.join(toAddrs) + '\nSubject: ' + subject + '\nThis message was automatically generated by the JSOC export system at Stanford.\n\nSorry, we were unable to register your email address. ' + msg

    try:
        server = smtplib.SMTP('solarpost.stanford.edu')
        server.sendmail(fromAddr, toAddrs, msg)
        server.quit()
    except Exception as exc:
        # If any exception happened, then the email message was not received.
        raise Exception('emailBadrecipient', 'Unable to send email message to address to confirm address.', RV_ERROR_MAIL)

if __name__ == "__main__":
    rv = RV_ERROR_NONE
    
    try:
        regExpA = re.compile(r'From\s(\S+)\s')
        regExpS = re.compile(r'Subject:.+CONFIRM\sEXPORT\sADDRESS\s+\[(\S+)\]')

        address = None
        confirmation = None

        for line in fileinput.input():
            if len(line) == 0:
                continue
            
            if address is None:
                matchObj = regExpA.match(line)
                if matchObj:
                    address = matchObj.group(1)

            if confirmation is None:
                matchObj = regExpS.match(line)
                if matchObj:
                    confirmation = matchObj.group(1)

            if address and confirmation:
                break

        drmsParams = DRMSParams()
        if drmsParams is None:
            raise Exception('drmsParams', 'Unable to locate DRMS parameters file (drmsparams.py).', RV_ERROR_PARAMS)

        localName, domainName = address.split('@')

        try:
            with psycopg2.connect(database=drmsParams.get('DBNAME'), user=drmsParams.get('WEB_DBUSER'), host=drmsParams.get('SERVER'), port=drmsParams.get('DRMSPGPORT')) as conn:
                with conn.cursor() as cursor:
                    cmd = "SELECT A.confirmation, A.starttime, D.domainid FROM jsoc.export_addresses AS A, jsoc.export_addressdomains AS D WHERE A.domainid = D.domainid AND A.localname = '" + localName + "' AND D.domainname = '" + domainName + "'"
                    try:
                        cursor.execute(cmd)
                        rows = cursor.fetchall()
                        if len(rows) == 0:
                            raise Exception('raInvalidaddress', 'Email address not recognized.', RV_ERROR_NOADDRESS)
                        if len(rows) != 1:
                            raise Exception('dbCorruption', 'Unexpected number of rows returned: ' + cmd + '.', RV_ERROR_DBCMD)
                    except psycopg2.Error as exc:
                        # Handle database-command errors.
                        raise Exception('dbCmd', exc.diag.message_primary, RV_ERROR_DBCMD)

                    confirmationDB = rows[0][0]
                    starttimeDB = rows[0][1]
                    domainID = rows[0][2]
                    
                    if confirmationDB:
                        try:
                            # Ensure that the confirmation codes match.
                            if confirmation != confirmationDB:
                                SendMailFailure(localName, domainName, confirmation, 'The confirmation code returned in the subject line does not match the confirmation code sent to you. Please visit the export page and register your address again.')
                                raise Exception('raConfirmation', 'The confirmation code in the subject line does not match the confirmation code in the database.', RV_ERROR_CONFIRMATION)

                            # Reject if the confirmation code has expired.
                            if datetime.now(starttimeDB.tzinfo) > starttimeDB + timedelta(minutes=60):
                                SendMailFailure(localName, domainName, confirmation, 'The registration process timed-out. Please visit the export page and register your address again.')
                                raise Exception('raTimeout', 'The confirmation code for this address, ' + str(confirmationDB) + ' has expired.', RV_ERROR_TIMEOUT)

                            # Remove confirmation code from address's record in jsoc.export_addresses. This is how we signify that the address has
                            # been successfully registered.
                            cmd = 'UPDATE jsoc.export_addresses SET confirmation = NULL WHERE domainid = ' + str(domainID) + " AND localname = '" + localName + "'"

                            try:
                                cursor.execute(cmd)
                            except psycopg2.Error as exc:
                                # Handle database-command errors.
                                raise Exception('dbCmd', exc.diag.message_primary + ": " + cmd, RV_ERROR_DBCMD)

                            SendMailSuccess(localName, domainName, confirmation)
                        except Exception as exc:
                            if len(exc.args) == 3:
                                etype = exc.args[0]
                                msg = exc.args[1]
                                rv = exc.args[2]
                                if etype == 'raConfirmation' or etype == 'raTimeout':
                                    print(msg)

                                    # Remove row from address table. Don't worry about the domain table. Let the cleanAddresses.py script deal with that.
                                    cmd = 'DELETE FROM jsoc.export_addresses WHERE domainid = ' + str(domainID) + " AND localname = '" + localName + "'"
                                    try:
                                        cursor.execute(cmd)
                                    except psycopg2.Error as exc:
                                        # Handle database-command errors.
                                        raise Exception('dbCmd', exc.diag.message_primary + ": " + cmd, RV_ERROR_DBCMD)
                                else:
                                    raise # Re-raise
                            else:
                                raise # Re-raise
        except psycopg2.DatabaseError as exc:
            # Closes the cursor and connection.
            
            # Man, there is no way to get an error message from any exception object that will provide any information why
            # the connection failed.
            raise Exception('dbConnect', 'Unable to connect to the database.', RV_ERROR_DBCONNECT)

    except Exception as exc:
        if len(exc.args) != 3:
            if localName and domainName and confirmation:
                SendMailFailure(localName, domainName, confirmation, 'Please visit the export page and register your address again.')
            raise # Re-raise
        
        etype = exc.args[0]

        if etype == 'drmsParams' or etype == 'dbCorruption' or etype == 'dbCmd' or etype == 'dbConnect' or etype == 'raInvalidaddress':
            if etype == 'raInvalidaddress':
                SendMailFailure(localName, domainName, confirmation, 'Your email address was not recognized. Please visit the export page and register your address again.')
            else:
                SendMailFailure(localName, domainName, confirmation, 'Please visit the export page and register your address again.')

            msg = exc.args[1]
            rv = exc.args[2]
            print(msg)
        else:
            if localName and domainName and confirmation:
                SendMailFailure(localName, domainName, confirmation, 'Please visit the export page and register your address again.')
            raise # Re-raise

    sys.exit(rv)
