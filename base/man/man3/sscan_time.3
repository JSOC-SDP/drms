.\"
.TH sscan_time 3  2007-11-28 "DRMS MANPAGE" "DRMS Programmer's Manual"
.SH NAME
sscan_time/sprint_time \- I/O conversion of date/time representations
.nf
sscan_time sprint_time sprint_ut sprint_at sprint_dt
tai_adjustment zone_adjustment time_is_invalid
.SH SYNOPSIS
.nf
#include <timeio.h>

typedef double TIME;
#define JULIAN_DAY_ZERO (sscan_time ("JD_0.0"))

TIME sscan_time (char *string);
void sprint_time (char *str, TIME t, char *type, int precision);
sprint_at( char *str, TIME t);
sprint_dt (char *str, TIME t);
sprint_ut (char *str, TIME t);
double tai_adjustment (TIME t, char *zone);
double zone_adjustment (char *zone);
int time_is_invalid (TIME t);
.fi
.SH DESCRIPTION
.B sscan_time
reads from the \fIstring\fR representing a calendar
date/clock time in a standard format,
returning a double-precision floating point number representing the elapsed
time in
.B SI
seconds between the represented time and an arbitrary epoch.
.B sprint_time
writes a string corresponding to the elapsed time \fIt\fR into the location
\fIstr\fR, making the appropriate conversions for the clock system
designated by \fItype\fR.
The precision of the clock seconds field is controlled by the
.I precision
argument, which determines the number of digits written beyond the
decimal point.  Negative values of \fIprecision\fR
result in suppression of increasing numbers of clock and date fields, up
to values of -5. For example, a precision of -1 will suppress the seconds
field, and a precision of -5 (or less) will cause only the year to be
written. 

The macros
.B sprint_at, sprint_dt,
and
.B sprint_ut
invoke
.B sprint_time
with type "TAI", "TDT", and "UT" respectively, and with a precision of 0
(\fIi.e.\fR to the nearest second).

The functions support a range of clock systems including Atomic Time
(\fBTAI\fR, Temps Atomique Internationale),
Terrestrial Dynamical Time (\fBTDT\fR), and Coordinated Universal Time
(\fBUTC\fR), and a bewildering array of civil time zones tied to Universal Time.

The function \fBtai_adjustment\fR returns the difference in seconds between
TAI and the requested \fIzone\fR clock time at the specified internal time
\fIt\fR, in the sense TAI - zone time; for example it returns the
constant values of 32.184 for zone "\fBTDT\fR", and -19.0 for "\fBGPS\fR".
It returns a value of -32.0 for "\fBUTC\fR" when the date is between
1999.01.01 and 2005.12.31. The function \fBzone_adjustment()\fR returns
the difference in seconds between the named zone and UTC, for example
-18000.0 for zone "\fBEST\fR".

\fBtime_is_invalid\fR returns 1 if the time \fIt\fR is either NaN
or if it is equal to JULIAN_DAY_ZERO.

The detailed specifications for the format of date-time representations can
be found in \fIJSOC TN 07-001\fR, 
"Time Data Type and Representations of Dates and Times in the SDO JSOC".
Basically, three formats are supported: calendar, calender-clock, and
Julian date:
.TP 4
1.
year\fB.\fRmonth\fB.\fRfracday[\fB_\fRtype]
.TP 4
2.
year\fB.\fRmonth\fB.\fRday\fB_\fRhour\fB:\fRminute[\fB:\fRsecond][\fB_\fRtype]
.TP 4
3.
{\fBMJD\fR|\fBJD\fR}\fB_\fRjulday[\fB_\fRtype]
.PP
.I month
can either be an integer month number, a string containing at least the first
three letters of the English month name, or a Roman numeral;
.I year, day, hour,
and
.I minute
are integers;
.I julday, fracday,
and
.I second
can either be decimal fractions or integers; and
.I type
is a character string representing either the clock system, or, in the case
of civil time, the time zone.  If the type field is empty, the defaults
assumed by
\fBsscan_time()\fR are \fBTDT\fR if the notation is in Julian day format,
\fBUTC\fR otherwise. \fB TT\fR is an acceptable substitute for \fBTDT\fR
and \fBUT\fR for \fBUTC\fR.
Time zone designations can be any of the standard single-letter zone
designations, signed 4-digit hour/minute offsets from UT, or some of
the common 3- or 4-letter designations,
.I e.g.
.B PST
or
.B NZDT.
(See Table 2 of
\fIJSOC TN 07-001\fR for a listing of accepted codes.)
\fBsscan_time()\fR is case-insensitive.

For example, the call
.IP "" 4
char name[32];
.br
sprint_ut (name, sscan_time ("1981.Jul.01_00:00:19.5_TAI"));
.PP
will place in
.I name
the string
"1981.06.30_00:00:60.500_UT".
The call:
.IP "" 4
char name[32];
.br
sprint_time (name, sscan_time ("1582.10.15_03:30"),"PDT");
.PP
will place in
.I name
the string "1582.10.04_20:30:00.000_PDT".
.SH "SEE ALSO"
SOI TN 94-116
.br
JSOC TN 07-001 (http://jsoc.stanford.edu/doc/timerep.html)
.SH DIAGNOSTICS
None.  When an indecipherable string is encountered, \fBsscan_time\fR
returns the valid time \fBJULIAN_DAY_ZERO\fR, represented by
\fBsprint_time\fR as -4712.01.01_12:00:00.000_TT or
-4712.01.01_11:59:27.816_UT or JD_0.0.
.SH BUGS
The definition of the "invalid" time JULIAN_DAY_ZERO is not the same
as the definition of DRMS_MISSING_TIME in drms_types.h.

Years prior to 1 are written in "astronomical" rather than "historical"
fashion.  For example, the year 0 corresponds to 1 B.C, -1 to 2 B.C.,
.I etc.
The proleptic Julian reckoning of leap years is continued throughout.

Times during
.B UT
leap seconds are represented and assumed represented as
xxx\fB_23:59:60.yyy_UT\fR
or the equivalent.  The leap seconds occurring prior to 1972
are proleptic; those after 1997
are predictions.  Predicted future
.B UT
leap seconds are not automatically included at the time of announcement,
and require recompilation of the library. It is assumed that leap seconds
occur in the final minute of the \fBUT\fR day, regardless of the zone time
designation. \fBUT\fR times
before 1959.12.31:23:59:60 are identical to \fBTAI\fR times.

All times corresponding to dates on or before 4.Oct.1582 are
represented in the Julian calendar, and all times corresponding to
dates on or after 15.Oct.1582 are represented in the Gregorian calendar.

\fBtai_adjustment\fR for civil zone times is not well defined for times
during the \fBUT\fR leap second; its value during such seconds is the same as
that for the times one second later.

When clock and date fields are suppressed with negative \fIprecision\fR
values in \fBsprint_time\fR, the remaining clock and date fields are truncated
rather than rounded. (Rounding always occurs for times in JD format, as
there is only a single field.)

Single-letter time zone designations are suppressed when only the date
field or less is printed, \fIe.g.\fR 1582.10.04_13:00Z or 1582.10.04_13:00_UT
but 1582.10.04 or 1582.10.04_UT.

All times represented in Julian Day formats JD or MJD are assumed to  be
in Terrestrial Dynamical Time, which is offset by an assumed constant
32.184 sec from Atomic Time.

There is not complete reciprocity between date-time strings that can be
produced by \fBsprint_time\fR and those that can be properly read by
\fBsscan_time.\fR In particular, there is currently no support for
scanning of strings in ISO-8601 format, though they can be generated.

Because of the use of \fBstrtok\fR in parsing strings in \fBsscan_time\fR,
repeated separator symbols ([\fB.:_\fR]) are treated as single symbols.

Strings with a plus or minus symbol in the hours or minutes field are
subject to misinterpretation by \fBsscan_time\fR, due to confusion with
the ISO time-zone designator.

Ephemeris Time and "Carrington Time" are not supported.
.#$Id: sscan_time.3,v 1.1 2007/12/03 18:48:23 rick Exp $
.#$Source: /home/akoufos/Development/Testing/jsoc-4-repos-0914/JSOC-mirror/JSOC/base/man/man3/Attic/sscan_time.3,v $
.#$Author: rick $
