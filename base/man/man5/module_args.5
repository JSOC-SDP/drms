.\"
.TH module_args 5  2007-12-05 "DRMS MANPAGE" "DRMS Programmer's Manual"
.SH NAME
module_args \- global structure for declared module arguments
.SH SYNOPSIS
.nf
#include <cmdparams.h>
	 /*  Argument types in ModuleArgs_t used by cmdparams_parse()  */
typedef enum {
   ARG_END = 0,
   ARG_FLAG,   ARG_TIME,    ARG_INT,        ARG_FLOAT,   ARG_DOUBLE,
   ARG_STRING, ARG_VOID,    ARG_INTS,       ARG_FLOATS,  ARG_DOUBLES,
/* ARG_STRINGS, */
   ARG_NUME,   ARG_DATASET, ARG_DATASERIES, ARG_NEWDATA, ARG_NUMARGS
} ModuleArgs_Type_t;

typedef struct ModuleArgs_t {
  ModuleArgs_Type_t type;
  char *name;
  char *value;
  char *description;
  char *range;
} ModuleArgs_t; 

typedef struct CmdParams_t_struct {
  int num_args, max_args;
  char **args;
  Hash_Table_t hash;
  int buflen, head;
  char *buffer;
} CmdParams_t;

ModuleArgs_t module_args[] = {
  {ARG_type, "name", "default value"[, "description"[, "range"]]},
  ...
  {}
};

.SH DESCRIPTION
The global \fBModuleArgs_t\fR structure provides a standard mechanism for
declaring the parameters expected to be used by a module along with their
types and default values, if any. The elements of the \fImodule_args\fR
array are parsed and compared with arguments supplied to the module from
the command line or other invocation to produce a \fBCmdParams_t\fR structure
through which their values are available through the \fIparams_get\fR suite
of functions.

The module_args declarator requires at least one element, which must be
of type \fIARG_END\fR (which is 0, so an empty initializer as shown in
the synopsis is acceptable). Any array elements \fIfollowing\fR the
\fIARG_END\fR element are ignored.

Although the default value (and range, if applicable) is supplied as
a character string, it will be interpreted according to the declared type
of the argument. Arguments of type \fIARG_INT, ARG_FLOAT, ARG_DOUBLE,\fR
and ARG_STRING should be self-explanatory. Arguemts of type \fIARG_FLAG\fR
are expected to have single-character names and to be associated with
logical binaries, with a default value of FALSE (0); they can be set on
the command line via the \fB-X\fR construct (where \fIX\fR is the name of
the element to be set to TRUE). \fIARG_TIME\fR is a special case of
\fIARG_DOUBLE\fR, whose default or assigned values are interpreted by
\fBsscan_time\fR (\fIq.v.\fR). \fIARG_VOID\fR is reserved for use with
undeclared arguments supplied on the command line; it should not be used
for declared arguments in the module_args list.

The types \fIARG_INTS, ARG_FLOATS\fR, and \fIARG_DOUBLES\fR are used for
parameters that can be arrays of arbitrary length. The values must be
supplied as comma separated sets enclosed within matched delimiting
pairs of either brackets [], braces {} or parentheses () (unless there
is only one value in the array, in which case the delimiters are optional).
The total number of elements in the array is returned as the added parameter
\fBname_nvals\fR, and the value for the nth element (counting from 0) as
\fBname_\FIn\fB_value\fR. For example, a module_arg element declared as:
.nf
  {ARG_FLOATS, "lat", "[0.0, 5.0, 10.0]", "", ""},
.fi
would return 3 for \fBparams_get_int (params, "lat_nvals")\fR and the
value 5.0 for \fBparams_get_float (params, "lat_1_value")\fR. The number
of array values supplied at run time need not match the number in the default;
indeed there is no necessity of setting any default value at all, just as
with other types of arguments.

\fIARG_NUME\fR is a special type of argument representing an enumeration
class. It makes use of the \fImodule_args->range\fR field, which must be a
comma-separated list of strings. The value returned is an integer coresponding
to the order number of the range element matching the supplied value. For
example, a module_arg element declared as:
.nf
  {ARG_NUME, "color", "green", "", "red, yellow, green, blue"},
.fi
would return 2 for \fBparams_get_int (params, "color")\fR. A failure occurs
if the value supplied does not match anything in the range; the type is
designed especially for use with driver programs that can provide menus of
options, such as CGI forms.

\fIARG_DATASET\fR and \fIARG_DATASERIES\fR are special cases of
\fIARG_STRING\fR reserved for names of DRMS dataset specifications or series
names in an environment where the database can be queried for possible values;
they are not currently treated differently from any other type of string
argument.

\fIARG_NEWDATA\fR does not appear to be implemented; \fIARG_NUMARGS\fR is
reserved for internal use by the Fortran interface and should not be used.

The \fImodule_args->description\fR is intended to be used only by the
front-end handler for documentation, such as when the command is invoked
with a \fB-H\fR help flag, or in CGI web forms.

.SH SEE ALSO
.B module(1)
.B cmdparams_parse(3)
.B params_get(3)
.B sscan_time(3)
.SH BUGS
Range inspection is limited to arguments of type \fIARG_NUME\fR and
\fIARG_FLOAT.\fR
